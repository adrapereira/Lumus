android.support.v4.app.ActivityCompatHoneycomb -> android.support.v4.app.a:
    void invalidateOptionsMenu(android.app.Activity) -> a
android.support.v4.app.BackStackRecord -> android.support.v4.app.b:
    android.support.v4.app.FragmentManagerImpl mManager -> a
    android.support.v4.app.BackStackRecord$Op mHead -> b
    android.support.v4.app.BackStackRecord$Op mTail -> c
    int mNumOp -> d
    int mEnterAnim -> e
    int mExitAnim -> f
    int mPopEnterAnim -> g
    int mPopExitAnim -> h
    int mTransition -> i
    int mTransitionStyle -> j
    boolean mAddToBackStack -> k
    boolean mAllowAddToBackStack -> l
    java.lang.String mName -> m
    boolean mCommitted -> n
    int mIndex -> o
    int mBreadCrumbTitleRes -> p
    java.lang.CharSequence mBreadCrumbTitleText -> q
    int mBreadCrumbShortTitleRes -> r
    java.lang.CharSequence mBreadCrumbShortTitleText -> s
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    void dump(java.lang.String,java.io.PrintWriter,boolean) -> a
    void addOp(android.support.v4.app.BackStackRecord$Op) -> a
    android.support.v4.app.FragmentTransaction add(int,android.support.v4.app.Fragment,java.lang.String) -> a
    void doAddOp(int,android.support.v4.app.Fragment,java.lang.String,int) -> a
    android.support.v4.app.FragmentTransaction detach(android.support.v4.app.Fragment) -> a
    android.support.v4.app.FragmentTransaction attach(android.support.v4.app.Fragment) -> b
    void bumpBackStackNesting(int) -> a
    int commit() -> a
    int commitInternal(boolean) -> a
    void run() -> run
    void popFromBackStack(boolean) -> b
    java.lang.String getName() -> b
android.support.v4.app.BackStackRecord$Op -> android.support.v4.app.c:
    android.support.v4.app.BackStackRecord$Op next -> a
    android.support.v4.app.BackStackRecord$Op prev -> b
    int cmd -> c
    android.support.v4.app.Fragment fragment -> d
    int enterAnim -> e
    int exitAnim -> f
    int popEnterAnim -> g
    int popExitAnim -> h
    java.util.ArrayList removed -> i
android.support.v4.app.BackStackState -> android.support.v4.app.BackStackState:
    int[] mOps -> a
    int mTransition -> b
    int mTransitionStyle -> c
    java.lang.String mName -> d
    int mIndex -> e
    int mBreadCrumbTitleRes -> f
    java.lang.CharSequence mBreadCrumbTitleText -> g
    int mBreadCrumbShortTitleRes -> h
    java.lang.CharSequence mBreadCrumbShortTitleText -> i
    android.os.Parcelable$Creator CREATOR -> CREATOR
    android.support.v4.app.BackStackRecord instantiate(android.support.v4.app.FragmentManagerImpl) -> a
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.BackStackState$1 -> android.support.v4.app.d:
    android.support.v4.app.BackStackState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.BackStackState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.Fragment -> android.support.v4.app.Fragment:
    java.util.HashMap sClassMap -> P
    int mState -> a
    android.view.View mAnimatingAway -> b
    int mStateAfterAnimating -> c
    android.os.Bundle mSavedFragmentState -> d
    android.util.SparseArray mSavedViewState -> e
    int mIndex -> f
    java.lang.String mWho -> g
    android.os.Bundle mArguments -> h
    android.support.v4.app.Fragment mTarget -> i
    int mTargetIndex -> j
    int mTargetRequestCode -> k
    boolean mAdded -> l
    boolean mRemoving -> m
    boolean mResumed -> n
    boolean mFromLayout -> o
    boolean mInLayout -> p
    boolean mRestored -> q
    int mBackStackNesting -> r
    android.support.v4.app.FragmentManagerImpl mFragmentManager -> s
    android.support.v4.app.FragmentActivity mActivity -> t
    android.support.v4.app.FragmentManagerImpl mChildFragmentManager -> u
    android.support.v4.app.Fragment mParentFragment -> v
    int mFragmentId -> w
    int mContainerId -> x
    java.lang.String mTag -> y
    boolean mHidden -> z
    boolean mDetached -> A
    boolean mRetainInstance -> B
    boolean mRetaining -> C
    boolean mHasMenu -> D
    boolean mMenuVisible -> E
    boolean mCalled -> F
    int mNextAnim -> G
    android.view.ViewGroup mContainer -> H
    android.view.View mView -> I
    android.view.View mInnerView -> J
    boolean mDeferStart -> K
    boolean mUserVisibleHint -> L
    android.support.v4.app.LoaderManagerImpl mLoaderManager -> M
    boolean mLoadersStarted -> N
    boolean mCheckedForLoaderManager -> O
    android.support.v4.app.Fragment instantiate(android.content.Context,java.lang.String) -> a
    android.support.v4.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle) -> a
    void restoreViewState(android.os.Bundle) -> a
    void setIndex(int,android.support.v4.app.Fragment) -> a
    boolean isInBackStack() -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    android.support.v4.app.FragmentActivity getActivity() -> b
    android.content.res.Resources getResources() -> c
    boolean isDetached() -> d
    void onHiddenChanged(boolean) -> a
    void onActivityResult(int,int,android.content.Intent) -> a
    android.view.LayoutInflater getLayoutInflater(android.os.Bundle) -> b
    void onInflate(android.app.Activity,android.util.AttributeSet,android.os.Bundle) -> a
    void onAttach(android.app.Activity) -> a
    android.view.animation.Animation onCreateAnimation(int,boolean,int) -> a
    void onCreate(android.os.Bundle) -> c
    android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> a
    void onViewCreated(android.view.View,android.os.Bundle) -> a
    void onActivityCreated(android.os.Bundle) -> d
    void onViewStateRestored(android.os.Bundle) -> e
    void onStart() -> e
    void onResume() -> f
    void onSaveInstanceState(android.os.Bundle) -> f
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onPause() -> g
    void onStop() -> h
    void onLowMemory() -> onLowMemory
    void onDestroyView() -> i
    void onDestroy() -> j
    void initState() -> k
    void onDetach() -> l
    void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> a
    void onPrepareOptionsMenu(android.view.Menu) -> a
    void onDestroyOptionsMenu() -> m
    boolean onOptionsItemSelected(android.view.MenuItem) -> a
    void onOptionsMenuClosed(android.view.Menu) -> b
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    boolean onContextItemSelected(android.view.MenuItem) -> b
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    void instantiateChildFragmentManager() -> n
    void performCreate(android.os.Bundle) -> g
    android.view.View performCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> b
    void performActivityCreated(android.os.Bundle) -> h
    void performStart() -> o
    void performResume() -> p
    void performConfigurationChanged(android.content.res.Configuration) -> a
    void performLowMemory() -> q
    boolean performCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> b
    boolean performPrepareOptionsMenu(android.view.Menu) -> c
    boolean performOptionsItemSelected(android.view.MenuItem) -> c
    boolean performContextItemSelected(android.view.MenuItem) -> d
    void performOptionsMenuClosed(android.view.Menu) -> d
    void performSaveInstanceState(android.os.Bundle) -> i
    void performPause() -> r
    void performStop() -> s
    void performReallyStop() -> t
    void performDestroyView() -> u
    void performDestroy() -> v
android.support.v4.app.Fragment$1 -> android.support.v4.app.e:
    android.support.v4.app.Fragment this$0 -> a
    android.view.View findViewById(int) -> a
android.support.v4.app.Fragment$InstantiationException -> android.support.v4.app.f:
android.support.v4.app.Fragment$SavedState -> android.support.v4.app.Fragment$SavedState:
    android.os.Bundle mState -> a
    android.os.Parcelable$Creator CREATOR -> CREATOR
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.Fragment$SavedState$1 -> android.support.v4.app.g:
    android.support.v4.app.Fragment$SavedState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.Fragment$SavedState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentActivity -> android.support.v4.app.h:
    android.os.Handler mHandler -> a
    android.support.v4.app.FragmentManagerImpl mFragments -> b
    android.support.v4.app.FragmentContainer mContainer -> c
    boolean mCreated -> d
    boolean mResumed -> e
    boolean mStopped -> f
    boolean mReallyStopped -> g
    boolean mRetaining -> h
    boolean mOptionsMenuInvalidated -> i
    boolean mCheckedForLoaderManager -> j
    boolean mLoadersStarted -> k
    java.util.HashMap mAllLoaderManagers -> l
    android.support.v4.app.LoaderManagerImpl mLoaderManager -> m
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onBackPressed() -> onBackPressed
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onCreate(android.os.Bundle) -> onCreate
    boolean onCreatePanelMenu(int,android.view.Menu) -> onCreatePanelMenu
    android.view.View onCreateView(java.lang.String,android.content.Context,android.util.AttributeSet) -> onCreateView
    void onDestroy() -> onDestroy
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void onLowMemory() -> onLowMemory
    boolean onMenuItemSelected(int,android.view.MenuItem) -> onMenuItemSelected
    void onPanelClosed(int,android.view.Menu) -> onPanelClosed
    void onPause() -> onPause
    void onNewIntent(android.content.Intent) -> onNewIntent
    void onResume() -> onResume
    void onPostResume() -> onPostResume
    void onResumeFragments() -> a
    boolean onPreparePanel(int,android.view.View,android.view.Menu) -> onPreparePanel
    java.lang.Object onRetainNonConfigurationInstance() -> onRetainNonConfigurationInstance
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void onStart() -> onStart
    void onStop() -> onStop
    java.lang.Object onRetainCustomNonConfigurationInstance() -> b
    void supportInvalidateOptionsMenu() -> c
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> dump
    java.lang.String viewToString(android.view.View) -> a
    void dumpViewHierarchy(java.lang.String,java.io.PrintWriter,android.view.View) -> a
    void doReallyStop(boolean) -> a
    void onReallyStop() -> d
    void onAttachFragment(android.support.v4.app.Fragment) -> a
    void startActivityForResult(android.content.Intent,int) -> startActivityForResult
    void invalidateSupportFragment(java.lang.String) -> a
    android.support.v4.app.LoaderManagerImpl getLoaderManager(java.lang.String,boolean,boolean) -> a
android.support.v4.app.FragmentActivity$FragmentTag -> android.support.v4.app.i:
    int[] Fragment -> a
android.support.v4.app.FragmentActivity$NonConfigurationInstances -> android.support.v4.app.j:
    java.lang.Object activity -> a
    java.lang.Object custom -> b
    java.util.HashMap children -> c
    java.util.ArrayList fragments -> d
    java.util.HashMap loaders -> e
android.support.v4.app.FragmentContainer -> android.support.v4.app.k:
    android.view.View findViewById(int) -> a
android.support.v4.app.FragmentManager -> android.support.v4.app.l:
    android.support.v4.app.FragmentTransaction beginTransaction() -> a
    boolean executePendingTransactions() -> b
    android.support.v4.app.Fragment findFragmentByTag(java.lang.String) -> a
android.support.v4.app.FragmentManager$OnBackStackChangedListener -> android.support.v4.app.m:
    void onBackStackChanged() -> a
android.support.v4.app.FragmentManagerImpl -> android.support.v4.app.n:
    boolean DEBUG -> a
    boolean HONEYCOMB -> b
    java.util.ArrayList mPendingActions -> c
    java.lang.Runnable[] mTmpActions -> d
    boolean mExecutingActions -> e
    java.util.ArrayList mActive -> f
    java.util.ArrayList mAdded -> g
    java.util.ArrayList mAvailIndices -> h
    java.util.ArrayList mBackStack -> i
    java.util.ArrayList mCreatedMenus -> j
    java.util.ArrayList mBackStackIndices -> k
    java.util.ArrayList mAvailBackStackIndices -> l
    java.util.ArrayList mBackStackChangeListeners -> m
    int mCurState -> n
    android.support.v4.app.FragmentActivity mActivity -> o
    android.support.v4.app.FragmentContainer mContainer -> p
    android.support.v4.app.Fragment mParent -> q
    boolean mNeedMenuInvalidate -> r
    boolean mStateSaved -> s
    boolean mDestroyed -> t
    java.lang.String mNoTransactionsBecause -> u
    boolean mHavePendingDeferredStart -> v
    android.os.Bundle mStateBundle -> w
    android.util.SparseArray mStateArray -> x
    java.lang.Runnable mExecCommit -> y
    android.view.animation.Interpolator DECELERATE_QUINT -> z
    android.view.animation.Interpolator DECELERATE_CUBIC -> A
    android.view.animation.Interpolator ACCELERATE_QUINT -> B
    android.view.animation.Interpolator ACCELERATE_CUBIC -> C
    void throwException(java.lang.RuntimeException) -> a
    android.support.v4.app.FragmentTransaction beginTransaction() -> a
    boolean executePendingTransactions() -> b
    boolean popBackStackImmediate() -> c
    void putFragment(android.os.Bundle,java.lang.String,android.support.v4.app.Fragment) -> a
    android.support.v4.app.Fragment getFragment(android.os.Bundle,java.lang.String) -> a
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    android.view.animation.Animation makeOpenCloseAnimation(android.content.Context,float,float,float,float) -> a
    android.view.animation.Animation makeFadeAnimation(android.content.Context,float,float) -> a
    android.view.animation.Animation loadAnimation(android.support.v4.app.Fragment,int,boolean,int) -> a
    void performPendingDeferredStart(android.support.v4.app.Fragment) -> a
    void moveToState(android.support.v4.app.Fragment,int,int,int,boolean) -> a
    void moveToState(android.support.v4.app.Fragment) -> b
    void moveToState(int,boolean) -> a
    void moveToState(int,int,int,boolean) -> a
    void startPendingDeferredFragments() -> d
    void makeActive(android.support.v4.app.Fragment) -> c
    void makeInactive(android.support.v4.app.Fragment) -> d
    void addFragment(android.support.v4.app.Fragment,boolean) -> a
    void removeFragment(android.support.v4.app.Fragment,int,int) -> a
    void hideFragment(android.support.v4.app.Fragment,int,int) -> b
    void showFragment(android.support.v4.app.Fragment,int,int) -> c
    void detachFragment(android.support.v4.app.Fragment,int,int) -> d
    void attachFragment(android.support.v4.app.Fragment,int,int) -> e
    android.support.v4.app.Fragment findFragmentById(int) -> a
    android.support.v4.app.Fragment findFragmentByTag(java.lang.String) -> a
    void checkStateLoss() -> t
    void enqueueAction(java.lang.Runnable,boolean) -> a
    int allocBackStackIndex(android.support.v4.app.BackStackRecord) -> a
    void setBackStackIndex(int,android.support.v4.app.BackStackRecord) -> a
    void freeBackStackIndex(int) -> b
    boolean execPendingActions() -> e
    void reportBackStackChanged() -> f
    void addBackStackState(android.support.v4.app.BackStackRecord) -> b
    boolean popBackStackState(android.os.Handler,java.lang.String,int,int) -> a
    java.util.ArrayList retainNonConfig() -> g
    void saveFragmentViewState(android.support.v4.app.Fragment) -> e
    android.os.Bundle saveFragmentBasicState(android.support.v4.app.Fragment) -> f
    android.os.Parcelable saveAllState() -> h
    void restoreAllState(android.os.Parcelable,java.util.ArrayList) -> a
    void attachActivity(android.support.v4.app.FragmentActivity,android.support.v4.app.FragmentContainer,android.support.v4.app.Fragment) -> a
    void noteStateNotSaved() -> i
    void dispatchCreate() -> j
    void dispatchActivityCreated() -> k
    void dispatchStart() -> l
    void dispatchResume() -> m
    void dispatchPause() -> n
    void dispatchStop() -> o
    void dispatchReallyStop() -> p
    void dispatchDestroyView() -> q
    void dispatchDestroy() -> r
    void dispatchConfigurationChanged(android.content.res.Configuration) -> a
    void dispatchLowMemory() -> s
    boolean dispatchCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> a
    boolean dispatchPrepareOptionsMenu(android.view.Menu) -> a
    boolean dispatchOptionsItemSelected(android.view.MenuItem) -> a
    boolean dispatchContextItemSelected(android.view.MenuItem) -> b
    void dispatchOptionsMenuClosed(android.view.Menu) -> b
    int reverseTransit(int) -> c
    int transitToStyleIndex(int,boolean) -> b
android.support.v4.app.FragmentManagerImpl$1 -> android.support.v4.app.o:
    android.support.v4.app.FragmentManagerImpl this$0 -> a
    void run() -> run
android.support.v4.app.FragmentManagerImpl$5 -> android.support.v4.app.p:
    android.support.v4.app.Fragment val$fragment -> a
    android.support.v4.app.FragmentManagerImpl this$0 -> b
    void onAnimationEnd(android.view.animation.Animation) -> onAnimationEnd
    void onAnimationRepeat(android.view.animation.Animation) -> onAnimationRepeat
    void onAnimationStart(android.view.animation.Animation) -> onAnimationStart
android.support.v4.app.FragmentManagerState -> android.support.v4.app.FragmentManagerState:
    android.support.v4.app.FragmentState[] mActive -> a
    int[] mAdded -> b
    android.support.v4.app.BackStackState[] mBackStack -> c
    android.os.Parcelable$Creator CREATOR -> CREATOR
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.FragmentManagerState$1 -> android.support.v4.app.q:
    android.support.v4.app.FragmentManagerState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.FragmentManagerState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentState -> android.support.v4.app.FragmentState:
    java.lang.String mClassName -> a
    int mIndex -> b
    boolean mFromLayout -> c
    int mFragmentId -> d
    int mContainerId -> e
    java.lang.String mTag -> f
    boolean mRetainInstance -> g
    boolean mDetached -> h
    android.os.Bundle mArguments -> i
    android.os.Bundle mSavedFragmentState -> j
    android.support.v4.app.Fragment mInstance -> k
    android.os.Parcelable$Creator CREATOR -> CREATOR
    android.support.v4.app.Fragment instantiate(android.support.v4.app.FragmentActivity,android.support.v4.app.Fragment) -> a
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.FragmentState$1 -> android.support.v4.app.r:
    android.support.v4.app.FragmentState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.FragmentState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentTabHost -> android.support.v4.app.FragmentTabHost:
    java.util.ArrayList mTabs -> a
    android.content.Context mContext -> b
    android.support.v4.app.FragmentManager mFragmentManager -> c
    int mContainerId -> d
    android.widget.TabHost$OnTabChangeListener mOnTabChangeListener -> e
    android.support.v4.app.FragmentTabHost$TabInfo mLastTab -> f
    boolean mAttached -> g
    void setup() -> setup
    void setOnTabChangedListener(android.widget.TabHost$OnTabChangeListener) -> setOnTabChangedListener
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    void onTabChanged(java.lang.String) -> onTabChanged
    android.support.v4.app.FragmentTransaction doTabChanged(java.lang.String,android.support.v4.app.FragmentTransaction) -> a
android.support.v4.app.FragmentTabHost$1 -> android.support.v4.app.s:
android.support.v4.app.FragmentTabHost$SavedState -> android.support.v4.app.FragmentTabHost$SavedState:
    java.lang.String curTab -> a
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    java.lang.String toString() -> toString
android.support.v4.app.FragmentTabHost$SavedState$1 -> android.support.v4.app.t:
    android.support.v4.app.FragmentTabHost$SavedState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.FragmentTabHost$SavedState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentTabHost$TabInfo -> android.support.v4.app.u:
    java.lang.String tag -> a
    java.lang.Class clss -> b
    android.os.Bundle args -> c
    android.support.v4.app.Fragment fragment -> d
    android.support.v4.app.Fragment access$102(android.support.v4.app.FragmentTabHost$TabInfo,android.support.v4.app.Fragment) -> a
    android.support.v4.app.Fragment access$100(android.support.v4.app.FragmentTabHost$TabInfo) -> a
    java.lang.String access$200(android.support.v4.app.FragmentTabHost$TabInfo) -> b
    java.lang.Class access$300(android.support.v4.app.FragmentTabHost$TabInfo) -> c
    android.os.Bundle access$400(android.support.v4.app.FragmentTabHost$TabInfo) -> d
android.support.v4.app.FragmentTransaction -> android.support.v4.app.v:
    android.support.v4.app.FragmentTransaction add(int,android.support.v4.app.Fragment,java.lang.String) -> a
    android.support.v4.app.FragmentTransaction detach(android.support.v4.app.Fragment) -> a
    android.support.v4.app.FragmentTransaction attach(android.support.v4.app.Fragment) -> b
    int commit() -> a
android.support.v4.app.LoaderManager -> android.support.v4.app.w:
    boolean hasRunningLoaders() -> a
android.support.v4.app.LoaderManager$LoaderCallbacks -> android.support.v4.app.x:
    android.support.v4.content.Loader onCreateLoader(int,android.os.Bundle) -> a
    void onLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
    void onLoaderReset(android.support.v4.content.Loader) -> a
android.support.v4.app.LoaderManagerImpl -> android.support.v4.app.y:
    boolean DEBUG -> a
    android.support.v4.util.SparseArrayCompat mLoaders -> b
    android.support.v4.util.SparseArrayCompat mInactiveLoaders -> c
    java.lang.String mWho -> d
    android.support.v4.app.FragmentActivity mActivity -> e
    boolean mStarted -> f
    boolean mRetaining -> g
    void updateActivity(android.support.v4.app.FragmentActivity) -> a
    void doStart() -> b
    void doStop() -> c
    void doRetain() -> d
    void finishRetain() -> e
    void doReportNextStart() -> f
    void doReportStart() -> g
    void doDestroy() -> h
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    boolean hasRunningLoaders() -> a
android.support.v4.app.LoaderManagerImpl$LoaderInfo -> android.support.v4.app.z:
    int mId -> a
    android.os.Bundle mArgs -> b
    android.support.v4.app.LoaderManager$LoaderCallbacks mCallbacks -> c
    android.support.v4.content.Loader mLoader -> d
    boolean mHaveData -> e
    boolean mDeliveredData -> f
    java.lang.Object mData -> g
    boolean mStarted -> h
    boolean mRetaining -> i
    boolean mRetainingStarted -> j
    boolean mReportNextStart -> k
    boolean mDestroyed -> l
    boolean mListenerRegistered -> m
    android.support.v4.app.LoaderManagerImpl$LoaderInfo mPendingLoader -> n
    android.support.v4.app.LoaderManagerImpl this$0 -> o
    void start() -> a
    void retain() -> b
    void finishRetain() -> c
    void reportStart() -> d
    void stop() -> e
    void destroy() -> f
    void callOnLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
android.support.v4.app.NoSaveStateFrameLayout -> android.support.v4.app.aa:
    android.view.ViewGroup wrap(android.view.View) -> a
    void dispatchSaveInstanceState(android.util.SparseArray) -> dispatchSaveInstanceState
    void dispatchRestoreInstanceState(android.util.SparseArray) -> dispatchRestoreInstanceState
android.support.v4.app.SuperNotCalledException -> android.support.v4.app.ab:
android.support.v4.content.Loader -> android.support.v4.a.a:
    int mId -> a
    android.support.v4.content.Loader$OnLoadCompleteListener mListener -> b
    boolean mStarted -> c
    boolean mAbandoned -> d
    boolean mReset -> e
    boolean mContentChanged -> f
    void registerListener(int,android.support.v4.content.Loader$OnLoadCompleteListener) -> a
    void unregisterListener(android.support.v4.content.Loader$OnLoadCompleteListener) -> a
    void startLoading() -> a
    void onStartLoading() -> b
    void stopLoading() -> c
    void onStopLoading() -> d
    void reset() -> e
    void onReset() -> f
    java.lang.String dataToString(java.lang.Object) -> a
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
android.support.v4.content.Loader$OnLoadCompleteListener -> android.support.v4.a.b:
android.support.v4.os.ParcelableCompat -> android.support.v4.b.a:
    android.os.Parcelable$Creator newCreator(android.support.v4.os.ParcelableCompatCreatorCallbacks) -> a
android.support.v4.os.ParcelableCompat$CompatCreator -> android.support.v4.b.b:
    android.support.v4.os.ParcelableCompatCreatorCallbacks mCallbacks -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
android.support.v4.os.ParcelableCompatCreatorCallbacks -> android.support.v4.b.c:
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> a
    java.lang.Object[] newArray(int) -> a
android.support.v4.os.ParcelableCompatCreatorHoneycombMR2 -> android.support.v4.b.d:
    android.support.v4.os.ParcelableCompatCreatorCallbacks mCallbacks -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
android.support.v4.os.ParcelableCompatCreatorHoneycombMR2Stub -> android.support.v4.b.e:
    android.os.Parcelable$Creator instantiate(android.support.v4.os.ParcelableCompatCreatorCallbacks) -> a
android.support.v4.util.DebugUtils -> android.support.v4.c.a:
    void buildShortClassTag(java.lang.Object,java.lang.StringBuilder) -> a
android.support.v4.util.LogWriter -> android.support.v4.c.b:
    java.lang.String mTag -> a
    java.lang.StringBuilder mBuilder -> b
    void close() -> close
    void flush() -> flush
    void write(char[],int,int) -> write
    void flushBuilder() -> a
android.support.v4.util.SparseArrayCompat -> android.support.v4.c.c:
    java.lang.Object DELETED -> a
    boolean mGarbage -> b
    int[] mKeys -> c
    java.lang.Object[] mValues -> d
    int mSize -> e
    void gc() -> c
    int size() -> a
    int keyAt(int) -> a
    java.lang.Object valueAt(int) -> b
    void clear() -> b
    int idealByteArraySize(int) -> c
    int idealIntArraySize(int) -> d
android.support.v4.view.GravityCompat -> android.support.v4.view.a:
    android.support.v4.view.GravityCompat$GravityCompatImpl IMPL -> a
    int getAbsoluteGravity(int,int) -> a
android.support.v4.view.GravityCompat$GravityCompatImpl -> android.support.v4.view.b:
    int getAbsoluteGravity(int,int) -> a
android.support.v4.view.GravityCompat$GravityCompatImplBase -> android.support.v4.view.c:
    int getAbsoluteGravity(int,int) -> a
android.support.v4.view.GravityCompat$GravityCompatImplJellybeanMr1 -> android.support.v4.view.d:
    int getAbsoluteGravity(int,int) -> a
android.support.v4.view.GravityCompatJellybeanMr1 -> android.support.v4.view.e:
    int getAbsoluteGravity(int,int) -> a
android.support.v4.view.KeyEventCompat -> android.support.v4.view.f:
    android.support.v4.view.KeyEventCompat$KeyEventVersionImpl IMPL -> a
    boolean hasModifiers(android.view.KeyEvent,int) -> a
    boolean hasNoModifiers(android.view.KeyEvent) -> a
    void startTracking(android.view.KeyEvent) -> b
android.support.v4.view.KeyEventCompat$BaseKeyEventVersionImpl -> android.support.v4.view.g:
    int metaStateFilterDirectionalModifiers(int,int,int,int,int) -> a
    int normalizeMetaState(int) -> a
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
    void startTracking(android.view.KeyEvent) -> a
android.support.v4.view.KeyEventCompat$EclairKeyEventVersionImpl -> android.support.v4.view.h:
    void startTracking(android.view.KeyEvent) -> a
android.support.v4.view.KeyEventCompat$HoneycombKeyEventVersionImpl -> android.support.v4.view.i:
    int normalizeMetaState(int) -> a
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
android.support.v4.view.KeyEventCompat$KeyEventVersionImpl -> android.support.v4.view.j:
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
    void startTracking(android.view.KeyEvent) -> a
android.support.v4.view.KeyEventCompatEclair -> android.support.v4.view.k:
    void startTracking(android.view.KeyEvent) -> a
android.support.v4.view.KeyEventCompatHoneycomb -> android.support.v4.view.l:
    int normalizeMetaState(int) -> a
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
android.support.v4.view.MotionEventCompat -> android.support.v4.view.m:
    android.support.v4.view.MotionEventCompat$MotionEventVersionImpl IMPL -> a
    int getActionMasked(android.view.MotionEvent) -> a
    int getActionIndex(android.view.MotionEvent) -> b
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
    int getPointerCount(android.view.MotionEvent) -> c
android.support.v4.view.MotionEventCompat$BaseMotionEventVersionImpl -> android.support.v4.view.n:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
    int getPointerCount(android.view.MotionEvent) -> a
android.support.v4.view.MotionEventCompat$EclairMotionEventVersionImpl -> android.support.v4.view.o:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
    int getPointerCount(android.view.MotionEvent) -> a
android.support.v4.view.MotionEventCompat$MotionEventVersionImpl -> android.support.v4.view.p:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
    int getPointerCount(android.view.MotionEvent) -> a
android.support.v4.view.MotionEventCompatEclair -> android.support.v4.view.q:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
    int getPointerCount(android.view.MotionEvent) -> a
android.support.v4.view.PagerAdapter -> android.support.v4.view.r:
    android.database.DataSetObservable mObservable -> a
    int getCount() -> a
    void startUpdate(android.view.ViewGroup) -> a
    java.lang.Object instantiateItem(android.view.ViewGroup,int) -> a
    void destroyItem(android.view.ViewGroup,int,java.lang.Object) -> a
    void setPrimaryItem(android.view.ViewGroup,int,java.lang.Object) -> b
    void finishUpdate(android.view.ViewGroup) -> b
    void startUpdate(android.view.View) -> a
    java.lang.Object instantiateItem(android.view.View,int) -> a
    void destroyItem(android.view.View,int,java.lang.Object) -> a
    void setPrimaryItem(android.view.View,int,java.lang.Object) -> b
    void finishUpdate(android.view.View) -> b
    boolean isViewFromObject(android.view.View,java.lang.Object) -> a
    android.os.Parcelable saveState() -> b
    void restoreState(android.os.Parcelable,java.lang.ClassLoader) -> a
    int getItemPosition(java.lang.Object) -> a
    void registerDataSetObserver(android.database.DataSetObserver) -> a
    void unregisterDataSetObserver(android.database.DataSetObserver) -> b
    float getPageWidth(int) -> a
android.support.v4.view.VelocityTrackerCompat -> android.support.v4.view.s:
    android.support.v4.view.VelocityTrackerCompat$VelocityTrackerVersionImpl IMPL -> a
    float getXVelocity(android.view.VelocityTracker,int) -> a
    float getYVelocity(android.view.VelocityTracker,int) -> b
android.support.v4.view.VelocityTrackerCompat$BaseVelocityTrackerVersionImpl -> android.support.v4.view.t:
    float getXVelocity(android.view.VelocityTracker,int) -> a
    float getYVelocity(android.view.VelocityTracker,int) -> b
android.support.v4.view.VelocityTrackerCompat$HoneycombVelocityTrackerVersionImpl -> android.support.v4.view.u:
    float getXVelocity(android.view.VelocityTracker,int) -> a
    float getYVelocity(android.view.VelocityTracker,int) -> b
android.support.v4.view.VelocityTrackerCompat$VelocityTrackerVersionImpl -> android.support.v4.view.v:
    float getXVelocity(android.view.VelocityTracker,int) -> a
    float getYVelocity(android.view.VelocityTracker,int) -> b
android.support.v4.view.VelocityTrackerCompatHoneycomb -> android.support.v4.view.w:
    float getXVelocity(android.view.VelocityTracker,int) -> a
    float getYVelocity(android.view.VelocityTracker,int) -> b
android.support.v4.view.ViewCompat -> android.support.v4.view.x:
    android.support.v4.view.ViewCompat$ViewCompatImpl IMPL -> a
    boolean canScrollHorizontally(android.view.View,int) -> a
    int getOverScrollMode(android.view.View) -> a
    void postInvalidateOnAnimation(android.view.View) -> b
    void postInvalidateOnAnimation(android.view.View,int,int,int,int) -> a
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
    int getLayerType(android.view.View) -> c
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
    int getLayoutDirection(android.view.View) -> d
android.support.v4.view.ViewCompat$BaseViewCompatImpl -> android.support.v4.view.y:
    boolean canScrollHorizontally(android.view.View,int) -> a
    int getOverScrollMode(android.view.View) -> a
    void postInvalidateOnAnimation(android.view.View) -> b
    void postInvalidateOnAnimation(android.view.View,int,int,int,int) -> a
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    long getFrameTime() -> a
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
    int getLayerType(android.view.View) -> c
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
    int getLayoutDirection(android.view.View) -> d
android.support.v4.view.ViewCompat$GBViewCompatImpl -> android.support.v4.view.z:
    int getOverScrollMode(android.view.View) -> a
android.support.v4.view.ViewCompat$HCViewCompatImpl -> android.support.v4.view.aa:
    long getFrameTime() -> a
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
    int getLayerType(android.view.View) -> c
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
android.support.v4.view.ViewCompat$ICSViewCompatImpl -> android.support.v4.view.ab:
    boolean canScrollHorizontally(android.view.View,int) -> a
android.support.v4.view.ViewCompat$JBViewCompatImpl -> android.support.v4.view.ac:
    void postInvalidateOnAnimation(android.view.View) -> b
    void postInvalidateOnAnimation(android.view.View,int,int,int,int) -> a
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
android.support.v4.view.ViewCompat$JbMr1ViewCompatImpl -> android.support.v4.view.ad:
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
    int getLayoutDirection(android.view.View) -> d
android.support.v4.view.ViewCompat$ViewCompatImpl -> android.support.v4.view.ae:
    boolean canScrollHorizontally(android.view.View,int) -> a
    int getOverScrollMode(android.view.View) -> a
    void postInvalidateOnAnimation(android.view.View) -> b
    void postInvalidateOnAnimation(android.view.View,int,int,int,int) -> a
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
    int getLayerType(android.view.View) -> c
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
    int getLayoutDirection(android.view.View) -> d
android.support.v4.view.ViewCompatGingerbread -> android.support.v4.view.af:
    int getOverScrollMode(android.view.View) -> a
android.support.v4.view.ViewCompatHC -> android.support.v4.view.ag:
    long getFrameTime() -> a
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
    int getLayerType(android.view.View) -> a
android.support.v4.view.ViewCompatICS -> android.support.v4.view.ah:
    boolean canScrollHorizontally(android.view.View,int) -> a
android.support.v4.view.ViewCompatJB -> android.support.v4.view.ai:
    void postInvalidateOnAnimation(android.view.View) -> a
    void postInvalidateOnAnimation(android.view.View,int,int,int,int) -> a
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
android.support.v4.view.ViewCompatJellybeanMr1 -> android.support.v4.view.aj:
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
    int getLayoutDirection(android.view.View) -> a
android.support.v4.view.ViewPager -> android.support.v4.view.ViewPager:
    int[] LAYOUT_ATTRS -> a
    int mExpectedAdapterCount -> b
    java.util.Comparator COMPARATOR -> c
    android.view.animation.Interpolator sInterpolator -> d
    java.util.ArrayList mItems -> e
    android.support.v4.view.ViewPager$ItemInfo mTempItem -> f
    android.graphics.Rect mTempRect -> g
    android.support.v4.view.PagerAdapter mAdapter -> h
    int mCurItem -> i
    int mRestoredCurItem -> j
    android.os.Parcelable mRestoredAdapterState -> k
    java.lang.ClassLoader mRestoredClassLoader -> l
    android.widget.Scroller mScroller -> m
    android.support.v4.view.ViewPager$PagerObserver mObserver -> n
    int mPageMargin -> o
    android.graphics.drawable.Drawable mMarginDrawable -> p
    int mTopPageBounds -> q
    int mBottomPageBounds -> r
    float mFirstOffset -> s
    float mLastOffset -> t
    int mChildWidthMeasureSpec -> u
    int mChildHeightMeasureSpec -> v
    boolean mInLayout -> w
    boolean mScrollingCacheEnabled -> x
    boolean mPopulatePending -> y
    int mOffscreenPageLimit -> z
    boolean mIsBeingDragged -> A
    boolean mIsUnableToDrag -> B
    int mDefaultGutterSize -> C
    int mGutterSize -> D
    int mTouchSlop -> E
    float mLastMotionX -> F
    float mLastMotionY -> G
    float mInitialMotionX -> H
    float mInitialMotionY -> I
    int mActivePointerId -> J
    android.view.VelocityTracker mVelocityTracker -> K
    int mMinimumVelocity -> L
    int mMaximumVelocity -> M
    int mFlingDistance -> N
    int mCloseEnough -> O
    boolean mFakeDragging -> P
    android.support.v4.widget.EdgeEffectCompat mLeftEdge -> Q
    android.support.v4.widget.EdgeEffectCompat mRightEdge -> R
    boolean mFirstLayout -> S
    boolean mNeedCalculatePageOffsets -> T
    boolean mCalledSuper -> U
    int mDecorChildCount -> V
    android.support.v4.view.ViewPager$OnPageChangeListener mOnPageChangeListener -> W
    android.support.v4.view.ViewPager$OnPageChangeListener mInternalPageChangeListener -> Z
    android.support.v4.view.ViewPager$OnAdapterChangeListener mAdapterChangeListener -> aa
    android.support.v4.view.ViewPager$PageTransformer mPageTransformer -> ab
    java.lang.reflect.Method mSetChildrenDrawingOrderEnabled -> ac
    int mDrawingOrder -> ad
    java.util.ArrayList mDrawingOrderedChildren -> ae
    android.support.v4.view.ViewPager$ViewPositionComparator sPositionComparator -> af
    java.lang.Runnable mEndScrollRunnable -> ag
    int mScrollState -> ah
    void onDetachedFromWindow() -> onDetachedFromWindow
    void setScrollState(int) -> setScrollState
    void setAdapter(android.support.v4.view.PagerAdapter) -> setAdapter
    void removeNonDecorViews() -> f
    android.support.v4.view.PagerAdapter getAdapter() -> getAdapter
    void setOnAdapterChangeListener(android.support.v4.view.ViewPager$OnAdapterChangeListener) -> setOnAdapterChangeListener
    int getClientWidth() -> getClientWidth
    void setCurrentItem(int) -> setCurrentItem
    void setCurrentItem(int,boolean) -> a
    int getCurrentItem() -> getCurrentItem
    void setCurrentItemInternal(int,boolean,boolean) -> a
    void setCurrentItemInternal(int,boolean,boolean,int) -> a
    void scrollToItem(int,boolean,int,boolean) -> a
    void setOnPageChangeListener(android.support.v4.view.ViewPager$OnPageChangeListener) -> setOnPageChangeListener
    void setChildrenDrawingOrderEnabledCompat(boolean) -> setChildrenDrawingOrderEnabledCompat
    int getChildDrawingOrder(int,int) -> getChildDrawingOrder
    int getOffscreenPageLimit() -> getOffscreenPageLimit
    void setOffscreenPageLimit(int) -> setOffscreenPageLimit
    void setPageMargin(int) -> setPageMargin
    int getPageMargin() -> getPageMargin
    void setPageMarginDrawable(android.graphics.drawable.Drawable) -> setPageMarginDrawable
    void setPageMarginDrawable(int) -> setPageMarginDrawable
    boolean verifyDrawable(android.graphics.drawable.Drawable) -> verifyDrawable
    void drawableStateChanged() -> drawableStateChanged
    float distanceInfluenceForSnapDuration(float) -> a
    void smoothScrollTo(int,int,int) -> a
    android.support.v4.view.ViewPager$ItemInfo addNewItem(int,int) -> a
    void dataSetChanged() -> a
    void populate() -> b
    void populate(int) -> a
    void sortChildDrawingOrder() -> g
    void calculatePageOffsets(android.support.v4.view.ViewPager$ItemInfo,int,android.support.v4.view.ViewPager$ItemInfo) -> a
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    void addView(android.view.View,int,android.view.ViewGroup$LayoutParams) -> addView
    void removeView(android.view.View) -> removeView
    android.support.v4.view.ViewPager$ItemInfo infoForChild(android.view.View) -> a
    android.support.v4.view.ViewPager$ItemInfo infoForAnyChild(android.view.View) -> b
    android.support.v4.view.ViewPager$ItemInfo infoForPosition(int) -> b
    void onAttachedToWindow() -> onAttachedToWindow
    void onMeasure(int,int) -> onMeasure
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    void recomputeScrollPosition(int,int,int,int) -> a
    void onLayout(boolean,int,int,int,int) -> onLayout
    void computeScroll() -> computeScroll
    boolean pageScrolled(int) -> d
    void onPageScrolled(int,float,int) -> a
    void completeScroll(boolean) -> a
    boolean isGutterDrag(float,float) -> a
    void enableLayers(boolean) -> b
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean performDrag(float) -> b
    android.support.v4.view.ViewPager$ItemInfo infoForCurrentScrollPosition() -> h
    int determineTargetPage(int,float,int,int) -> a
    void draw(android.graphics.Canvas) -> draw
    void onDraw(android.graphics.Canvas) -> onDraw
    void onSecondaryPointerUp(android.view.MotionEvent) -> a
    void endDrag() -> i
    void setScrollingCacheEnabled(boolean) -> setScrollingCacheEnabled
    boolean canScroll(android.view.View,boolean,int,int,int) -> a
    boolean dispatchKeyEvent(android.view.KeyEvent) -> dispatchKeyEvent
    boolean executeKeyEvent(android.view.KeyEvent) -> a
    boolean arrowScroll(int) -> c
    android.graphics.Rect getChildRectInPagerCoordinates(android.graphics.Rect,android.view.View) -> a
    boolean pageLeft() -> c
    boolean pageRight() -> d
    void addFocusables(java.util.ArrayList,int,int) -> addFocusables
    void addTouchables(java.util.ArrayList) -> addTouchables
    boolean onRequestFocusInDescendants(int,android.graphics.Rect) -> onRequestFocusInDescendants
    boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent) -> dispatchPopulateAccessibilityEvent
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
    boolean checkLayoutParams(android.view.ViewGroup$LayoutParams) -> checkLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    int[] access$400() -> e
android.support.v4.view.ViewPager$1 -> android.support.v4.view.ak:
    int compare(android.support.v4.view.ViewPager$ItemInfo,android.support.v4.view.ViewPager$ItemInfo) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
android.support.v4.view.ViewPager$2 -> android.support.v4.view.al:
    float getInterpolation(float) -> getInterpolation
android.support.v4.view.ViewPager$Decor -> android.support.v4.view.am:
android.support.v4.view.ViewPager$ItemInfo -> android.support.v4.view.an:
    java.lang.Object object -> a
    int position -> b
    boolean scrolling -> c
    float widthFactor -> d
    float offset -> e
android.support.v4.view.ViewPager$LayoutParams -> android.support.v4.view.ao:
    boolean isDecor -> a
    int gravity -> b
    float widthFactor -> c
    boolean needsMeasure -> d
    int position -> e
    int childIndex -> f
android.support.v4.view.ViewPager$OnAdapterChangeListener -> android.support.v4.view.ap:
    void onAdapterChanged(android.support.v4.view.PagerAdapter,android.support.v4.view.PagerAdapter) -> a
android.support.v4.view.ViewPager$OnPageChangeListener -> android.support.v4.view.aq:
    void onPageScrolled(int,float,int) -> a
    void onPageSelected(int) -> a
    void onPageScrollStateChanged(int) -> b
android.support.v4.view.ViewPager$PageTransformer -> android.support.v4.view.ar:
    void transformPage(android.view.View,float) -> a
android.support.v4.view.ViewPager$PagerObserver -> android.support.v4.view.as:
    android.support.v4.view.ViewPager this$0 -> a
    void onChanged() -> onChanged
    void onInvalidated() -> onInvalidated
android.support.v4.view.ViewPager$SavedState -> android.support.v4.view.ViewPager$SavedState:
    int position -> a
    android.os.Parcelable adapterState -> b
    java.lang.ClassLoader loader -> c
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    java.lang.String toString() -> toString
android.support.v4.view.ViewPager$SavedState$1 -> android.support.v4.view.at:
    android.support.v4.view.ViewPager$SavedState createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> b
    android.support.v4.view.ViewPager$SavedState[] newArray(int) -> b
    java.lang.Object[] newArray(int) -> a
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> a
android.support.v4.view.ViewPager$ViewPositionComparator -> android.support.v4.view.au:
    int compare(android.view.View,android.view.View) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
android.support.v4.widget.DrawerLayout -> android.support.v4.widget.DrawerLayout:
    int[] LAYOUT_ATTRS -> a
    int mMinDrawerMargin -> b
    int mScrimColor -> c
    float mScrimOpacity -> d
    android.graphics.Paint mScrimPaint -> e
    android.support.v4.widget.ViewDragHelper mLeftDragger -> f
    android.support.v4.widget.ViewDragHelper mRightDragger -> g
    android.support.v4.widget.DrawerLayout$ViewDragCallback mLeftCallback -> h
    android.support.v4.widget.DrawerLayout$ViewDragCallback mRightCallback -> i
    int mDrawerState -> j
    boolean mInLayout -> k
    boolean mFirstLayout -> l
    int mLockModeLeft -> m
    int mLockModeRight -> n
    boolean mDisallowInterceptRequested -> o
    boolean mChildrenCanceledTouch -> p
    android.support.v4.widget.DrawerLayout$DrawerListener mListener -> q
    float mInitialMotionX -> r
    float mInitialMotionY -> s
    android.graphics.drawable.Drawable mShadowLeft -> t
    android.graphics.drawable.Drawable mShadowRight -> u
    void setScrimColor(int) -> setScrimColor
    void setDrawerListener(android.support.v4.widget.DrawerLayout$DrawerListener) -> setDrawerListener
    void setDrawerLockMode(int) -> setDrawerLockMode
    void setDrawerLockMode(int,int) -> a
    int getDrawerLockMode(android.view.View) -> a
    void updateDrawerState(int,int,android.view.View) -> a
    void dispatchOnDrawerClosed(android.view.View) -> b
    void dispatchOnDrawerOpened(android.view.View) -> c
    void dispatchOnDrawerSlide(android.view.View,float) -> a
    void setDrawerViewOffset(android.view.View,float) -> b
    float getDrawerViewOffset(android.view.View) -> d
    int getDrawerViewGravity(android.view.View) -> e
    boolean checkDrawerViewGravity(android.view.View,int) -> a
    android.view.View findOpenDrawer() -> a
    android.view.View findDrawerWithGravity(int) -> a
    java.lang.String gravityToString(int) -> b
    void onDetachedFromWindow() -> onDetachedFromWindow
    void onAttachedToWindow() -> onAttachedToWindow
    void onMeasure(int,int) -> onMeasure
    void onLayout(boolean,int,int,int,int) -> onLayout
    void requestLayout() -> requestLayout
    void computeScroll() -> computeScroll
    boolean hasOpaqueBackground(android.view.View) -> k
    boolean drawChild(android.graphics.Canvas,android.view.View,long) -> drawChild
    boolean isContentView(android.view.View) -> f
    boolean isDrawerView(android.view.View) -> g
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void requestDisallowInterceptTouchEvent(boolean) -> requestDisallowInterceptTouchEvent
    void closeDrawers() -> b
    void closeDrawers(boolean) -> a
    void openDrawer(android.view.View) -> h
    void closeDrawer(android.view.View) -> i
    boolean isDrawerVisible(android.view.View) -> j
    boolean hasPeekingDrawer() -> d
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
    boolean checkLayoutParams(android.view.ViewGroup$LayoutParams) -> checkLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    boolean hasVisibleDrawer() -> e
    android.view.View findVisibleDrawer() -> f
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    boolean onKeyUp(int,android.view.KeyEvent) -> onKeyUp
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    int[] access$100() -> c
android.support.v4.widget.DrawerLayout$DrawerListener -> android.support.v4.widget.a:
    void onDrawerSlide(android.view.View,float) -> a
    void onDrawerOpened(android.view.View) -> a
    void onDrawerClosed(android.view.View) -> b
    void onDrawerStateChanged(int) -> a
android.support.v4.widget.DrawerLayout$LayoutParams -> android.support.v4.widget.b:
    int gravity -> a
    float onScreen -> b
    boolean isPeeking -> c
    boolean knownOpen -> d
android.support.v4.widget.DrawerLayout$SavedState -> android.support.v4.widget.DrawerLayout$SavedState:
    int openDrawerGravity -> a
    int lockModeLeft -> b
    int lockModeRight -> c
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.widget.DrawerLayout$SavedState$1 -> android.support.v4.widget.c:
    android.support.v4.widget.DrawerLayout$SavedState createFromParcel(android.os.Parcel) -> a
    android.support.v4.widget.DrawerLayout$SavedState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.widget.DrawerLayout$ViewDragCallback -> android.support.v4.widget.d:
    int mGravity -> b
    android.support.v4.widget.ViewDragHelper mDragger -> c
    java.lang.Runnable mPeekRunnable -> d
    android.support.v4.widget.DrawerLayout this$0 -> a
    void removeCallbacks() -> a
    boolean tryCaptureView(android.view.View,int) -> a
    void onViewDragStateChanged(int) -> a
    void onViewPositionChanged(android.view.View,int,int,int,int) -> a
    void onViewCaptured(android.view.View,int) -> b
    void closeOtherDrawer() -> b
    void onViewReleased(android.view.View,float,float) -> a
    void onEdgeTouched(int,int) -> a
    boolean onEdgeLock(int) -> b
    void onEdgeDragStarted(int,int) -> b
    int getViewHorizontalDragRange(android.view.View) -> a
    int clampViewPositionHorizontal(android.view.View,int,int) -> a
    int clampViewPositionVertical(android.view.View,int,int) -> b
android.support.v4.widget.EdgeEffectCompat -> android.support.v4.widget.e:
    java.lang.Object mEdgeEffect -> a
    android.support.v4.widget.EdgeEffectCompat$EdgeEffectImpl IMPL -> b
    void setSize(int,int) -> a
    boolean isFinished() -> a
    void finish() -> b
    boolean onPull(float) -> a
    boolean onRelease() -> c
    boolean draw(android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompat$BaseEdgeEffectImpl -> android.support.v4.widget.f:
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompat$EdgeEffectIcsImpl -> android.support.v4.widget.g:
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompat$EdgeEffectImpl -> android.support.v4.widget.h:
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompatIcs -> android.support.v4.widget.i:
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.ScrollerCompat -> android.support.v4.widget.j:
    java.lang.Object mScroller -> a
    android.support.v4.widget.ScrollerCompat$ScrollerCompatImpl IMPL -> b
    boolean isFinished() -> a
    int getCurrX() -> b
    int getCurrY() -> c
    int getFinalX() -> d
    int getFinalY() -> e
    boolean computeScrollOffset() -> f
    void startScroll(int,int,int,int,int) -> a
    void abortAnimation() -> g
android.support.v4.widget.ScrollerCompat$ScrollerCompatImpl -> android.support.v4.widget.k:
    boolean isFinished(java.lang.Object) -> a
    int getCurrX(java.lang.Object) -> b
    int getCurrY(java.lang.Object) -> c
    boolean computeScrollOffset(java.lang.Object) -> d
    void startScroll(java.lang.Object,int,int,int,int,int) -> a
    void abortAnimation(java.lang.Object) -> e
    int getFinalX(java.lang.Object) -> f
    int getFinalY(java.lang.Object) -> g
android.support.v4.widget.ScrollerCompat$ScrollerCompatImplBase -> android.support.v4.widget.l:
    boolean isFinished(java.lang.Object) -> a
    int getCurrX(java.lang.Object) -> b
    int getCurrY(java.lang.Object) -> c
    boolean computeScrollOffset(java.lang.Object) -> d
    void startScroll(java.lang.Object,int,int,int,int,int) -> a
    void abortAnimation(java.lang.Object) -> e
    int getFinalX(java.lang.Object) -> f
    int getFinalY(java.lang.Object) -> g
android.support.v4.widget.ScrollerCompat$ScrollerCompatImplGingerbread -> android.support.v4.widget.m:
    boolean isFinished(java.lang.Object) -> a
    int getCurrX(java.lang.Object) -> b
    int getCurrY(java.lang.Object) -> c
    boolean computeScrollOffset(java.lang.Object) -> d
    void startScroll(java.lang.Object,int,int,int,int,int) -> a
    void abortAnimation(java.lang.Object) -> e
    int getFinalX(java.lang.Object) -> f
    int getFinalY(java.lang.Object) -> g
android.support.v4.widget.ScrollerCompat$ScrollerCompatImplIcs -> android.support.v4.widget.n:
android.support.v4.widget.ScrollerCompatGingerbread -> android.support.v4.widget.o:
    boolean isFinished(java.lang.Object) -> a
    int getCurrX(java.lang.Object) -> b
    int getCurrY(java.lang.Object) -> c
    boolean computeScrollOffset(java.lang.Object) -> d
    void startScroll(java.lang.Object,int,int,int,int,int) -> a
    void abortAnimation(java.lang.Object) -> e
    int getFinalX(java.lang.Object) -> f
    int getFinalY(java.lang.Object) -> g
android.support.v4.widget.SlidingPaneLayout -> android.support.v4.widget.SlidingPaneLayout:
    int mSliderFadeColor -> b
    int mCoveredFadeColor -> c
    android.graphics.drawable.Drawable mShadowDrawable -> d
    int mOverhangSize -> e
    boolean mCanSlide -> f
    android.view.View mSlideableView -> g
    float mSlideOffset -> h
    float mParallaxOffset -> i
    int mSlideRange -> j
    boolean mIsUnableToDrag -> k
    int mParallaxBy -> l
    float mInitialMotionX -> m
    float mInitialMotionY -> n
    android.support.v4.widget.SlidingPaneLayout$PanelSlideListener mPanelSlideListener -> o
    android.support.v4.widget.ViewDragHelper mDragHelper -> p
    boolean mPreservedOpenState -> q
    boolean mFirstLayout -> r
    android.graphics.Rect mTmpRect -> s
    java.util.ArrayList mPostedRunnables -> t
    android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImpl IMPL -> a
    void setParallaxDistance(int) -> setParallaxDistance
    int getParallaxDistance() -> getParallaxDistance
    void setSliderFadeColor(int) -> setSliderFadeColor
    int getSliderFadeColor() -> getSliderFadeColor
    void setCoveredFadeColor(int) -> setCoveredFadeColor
    int getCoveredFadeColor() -> getCoveredFadeColor
    void setPanelSlideListener(android.support.v4.widget.SlidingPaneLayout$PanelSlideListener) -> setPanelSlideListener
    void updateObscuredViewsVisibility(android.view.View) -> a
    void setAllChildrenVisible() -> a
    boolean hasOpaqueBackground(android.view.View) -> c
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    void onMeasure(int,int) -> onMeasure
    void onLayout(boolean,int,int,int,int) -> onLayout
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    void requestChildFocus(android.view.View,android.view.View) -> requestChildFocus
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean closePane(android.view.View,int) -> a
    boolean openPane(android.view.View,int) -> b
    boolean openPane() -> b
    boolean closePane() -> c
    boolean isOpen() -> d
    boolean isSlideable() -> e
    void dimChildView(android.view.View,float,int) -> a
    boolean drawChild(android.graphics.Canvas,android.view.View,long) -> drawChild
    void invalidateChildRegion(android.view.View) -> d
    boolean smoothSlideTo(float,int) -> a
    void computeScroll() -> computeScroll
    void setShadowDrawable(android.graphics.drawable.Drawable) -> setShadowDrawable
    void setShadowResource(int) -> setShadowResource
    void draw(android.graphics.Canvas) -> draw
    void parallaxOtherViews(float) -> a
    boolean isDimmed(android.view.View) -> b
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
    boolean checkLayoutParams(android.view.ViewGroup$LayoutParams) -> checkLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    void access$900(android.support.v4.widget.SlidingPaneLayout,android.view.View) -> a
    java.util.ArrayList access$1000(android.support.v4.widget.SlidingPaneLayout) -> a
android.support.v4.widget.SlidingPaneLayout$1 -> android.support.v4.widget.p:
android.support.v4.widget.SlidingPaneLayout$DisableLayerRunnable -> android.support.v4.widget.q:
    android.view.View mChildView -> a
    android.support.v4.widget.SlidingPaneLayout this$0 -> b
    void run() -> run
android.support.v4.widget.SlidingPaneLayout$LayoutParams -> android.support.v4.widget.r:
    int[] ATTRS -> e
    float weight -> a
    boolean slideable -> b
    boolean dimWhenOffset -> c
    android.graphics.Paint dimPaint -> d
android.support.v4.widget.SlidingPaneLayout$PanelSlideListener -> android.support.v4.widget.s:
android.support.v4.widget.SlidingPaneLayout$SavedState -> android.support.v4.widget.SlidingPaneLayout$SavedState:
    boolean isOpen -> a
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.widget.SlidingPaneLayout$SavedState$1 -> android.support.v4.widget.t:
    android.support.v4.widget.SlidingPaneLayout$SavedState createFromParcel(android.os.Parcel) -> a
    android.support.v4.widget.SlidingPaneLayout$SavedState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImpl -> android.support.v4.widget.u:
    void invalidateChildRegion(android.support.v4.widget.SlidingPaneLayout,android.view.View) -> a
android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImplBase -> android.support.v4.widget.v:
    void invalidateChildRegion(android.support.v4.widget.SlidingPaneLayout,android.view.View) -> a
android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImplJB -> android.support.v4.widget.w:
    java.lang.reflect.Method mGetDisplayList -> a
    java.lang.reflect.Field mRecreateDisplayList -> b
    void invalidateChildRegion(android.support.v4.widget.SlidingPaneLayout,android.view.View) -> a
android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImplJBMR1 -> android.support.v4.widget.x:
    void invalidateChildRegion(android.support.v4.widget.SlidingPaneLayout,android.view.View) -> a
android.support.v4.widget.ViewDragHelper -> android.support.v4.widget.y:
    int mDragState -> a
    int mTouchSlop -> b
    int mActivePointerId -> c
    float[] mInitialMotionX -> d
    float[] mInitialMotionY -> e
    float[] mLastMotionX -> f
    float[] mLastMotionY -> g
    int[] mInitialEdgesTouched -> h
    int[] mEdgeDragsInProgress -> i
    int[] mEdgeDragsLocked -> j
    int mPointersDown -> k
    android.view.VelocityTracker mVelocityTracker -> l
    float mMaxVelocity -> m
    float mMinVelocity -> n
    int mEdgeSize -> o
    int mTrackingEdges -> p
    android.support.v4.widget.ScrollerCompat mScroller -> q
    android.support.v4.widget.ViewDragHelper$Callback mCallback -> r
    android.view.View mCapturedView -> s
    boolean mReleaseInProgress -> t
    android.view.ViewGroup mParentView -> u
    android.view.animation.Interpolator sInterpolator -> v
    java.lang.Runnable mSetIdleRunnable -> w
    int getViewDragState() -> a
    int getEdgeSize() -> b
    void captureChildView(android.view.View,int) -> a
    android.view.View getCapturedView() -> c
    int getTouchSlop() -> d
    void cancel() -> e
    void abort() -> f
    boolean smoothSlideViewTo(android.view.View,int,int) -> a
    boolean settleCapturedViewAt(int,int) -> a
    boolean forceSettleCapturedViewAt(int,int,int,int) -> a
    int computeSettleDuration(android.view.View,int,int,int,int) -> a
    int computeAxisDuration(int,int,int) -> a
    int clampMag(int,int,int) -> b
    float clampMag(float,float,float) -> a
    float distanceInfluenceForSnapDuration(float) -> a
    boolean continueSettling(boolean) -> a
    void dispatchViewReleased(float,float) -> a
    void clearMotionHistory() -> g
    void clearMotionHistory(int) -> e
    void ensureMotionHistorySizeForId(int) -> f
    void saveInitialMotion(float,float,int) -> a
    void saveLastMotion(android.view.MotionEvent) -> c
    boolean isPointerDown(int) -> a
    void setDragState(int) -> b
    boolean tryCaptureViewForDrag(android.view.View,int) -> b
    boolean shouldInterceptTouchEvent(android.view.MotionEvent) -> a
    void processTouchEvent(android.view.MotionEvent) -> b
    void reportNewEdgeDrags(float,float,int) -> b
    boolean checkNewEdgeDrag(float,float,int,int) -> a
    boolean checkTouchSlop(android.view.View,float,float) -> a
    boolean checkTouchSlop(int) -> c
    boolean checkTouchSlop(int,int) -> b
    boolean isEdgeTouched(int) -> d
    boolean isEdgeTouched(int,int) -> c
    void releaseViewForPointerUp() -> h
    void dragTo(int,int,int,int) -> b
    boolean isCapturedViewUnder(int,int) -> d
    boolean isViewUnder(android.view.View,int,int) -> b
    android.view.View findTopChildUnder(int,int) -> e
    int getEdgesTouched(int,int) -> f
android.support.v4.widget.ViewDragHelper$1 -> android.support.v4.widget.z:
    float getInterpolation(float) -> getInterpolation
android.support.v4.widget.ViewDragHelper$Callback -> android.support.v4.widget.aa:
    void onViewDragStateChanged(int) -> a
    void onViewPositionChanged(android.view.View,int,int,int,int) -> a
    void onViewCaptured(android.view.View,int) -> b
    void onViewReleased(android.view.View,float,float) -> a
    void onEdgeTouched(int,int) -> a
    boolean onEdgeLock(int) -> b
    void onEdgeDragStarted(int,int) -> b
    int getOrderedChildIndex(int) -> c
    int getViewHorizontalDragRange(android.view.View) -> a
    int getViewVerticalDragRange(android.view.View) -> b
    boolean tryCaptureView(android.view.View,int) -> a
    int clampViewPositionHorizontal(android.view.View,int,int) -> a
    int clampViewPositionVertical(android.view.View,int,int) -> b
com.adp.lumus.activity.GameActivity -> com.adp.lumus.activity.GameActivity:
    org.andengine.engine.camera.Camera camera -> d
    com.adp.lumus.general.ResourcesManager rm -> e
    com.example.android.util.IabHelper mHelper -> a
    void onSetContentView() -> a
    org.andengine.engine.Engine onCreateEngine(org.andengine.engine.options.EngineOptions) -> a
    org.andengine.engine.options.EngineOptions onCreateEngineOptions() -> b
    void onCreateResources(org.andengine.ui.IGameInterface$OnCreateResourcesCallback) -> a
    void onCreateScene(org.andengine.ui.IGameInterface$OnCreateSceneCallback) -> a
    void onPopulateScene(org.andengine.entity.scene.Scene,org.andengine.ui.IGameInterface$OnPopulateSceneCallback) -> a
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void onDestroy() -> onDestroy
    void onPause() -> onPause
    void onResume() -> onResume
    void setIabHelper(com.example.android.util.IabHelper) -> a
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    java.lang.String fazString() -> r
    org.andengine.engine.Engine access$0(com.adp.lumus.activity.GameActivity) -> a
com.adp.lumus.activity.GameActivity$1 -> com.adp.lumus.activity.a:
    com.adp.lumus.activity.GameActivity this$0 -> a
    void onTimePassed(org.andengine.engine.handler.timer.TimerHandler) -> a
com.adp.lumus.game.GameLogic -> com.adp.lumus.a.a:
    int[][] backup -> a
    int[][] matriz -> b
    boolean[][] modf -> c
    com.adp.lumus.saveGame.Nivel nivel -> d
    int[][] getMatriz() -> a
    int getTile(int,int) -> a
    boolean isResolvido() -> b
    void addJogada(com.adp.lumus.saveGame.Jogada) -> a
    void setTile(int,int,int) -> a
    boolean fazUndo() -> c
    void modfNumero(int,int) -> i
    void updateMatriz() -> d
    void acendeTiles(int,int) -> b
    void testaLamp(int,int) -> c
    boolean testeColocarLamp(int,int) -> j
    boolean testaNumCompleto(int,int) -> d
    int resolvido() -> e
    boolean validaBoard() -> j
    boolean validaLamp(int,int) -> e
    boolean validaBlock(int,int) -> f
    boolean validaMarca(int,int) -> g
    void guardaEstadoActual() -> k
    void restaurarEstado() -> f
    void copySolucao() -> g
    void reset() -> h
    void setModfAs(boolean) -> a
    void resetModf() -> i
    boolean isUpdate(int,int) -> h
com.adp.lumus.game.GameScene -> com.adp.lumus.a.b:
    int BEGINTABLEY -> S
    int NEXTLEVEL -> T
    int RESET -> U
    int MENU -> V
    int TEMPOMARCA -> W
    com.adp.lumus.general.BaseScene thisScene -> X
    org.andengine.engine.camera.hud.HUD gameHUD -> Y
    com.adp.lumus.game.GameLogic game -> Z
    org.andengine.entity.text.Text nivelText -> aa
    org.andengine.entity.text.Text nextLevelText -> ab
    org.andengine.entity.text.Text resetText -> ac
    org.andengine.entity.text.Text menuText -> ad
    org.andengine.entity.text.Text levelCompleteText -> ae
    org.andengine.entity.sprite.ButtonSprite[][] sprites -> af
    org.andengine.entity.primitive.Rectangle backg -> ag
    org.andengine.entity.sprite.Sprite contentor -> ah
    org.andengine.entity.sprite.Sprite table -> ai
    org.andengine.entity.scene.menu.item.IMenuItem btNext -> aj
    org.andengine.entity.scene.menu.item.IMenuItem btReset -> ak
    org.andengine.entity.scene.menu.item.IMenuItem btMenu -> al
    org.andengine.entity.scene.menu.MenuScene menuChildScene -> am
    long timeofclick -> an
    int ultClickX -> ao
    int ultClickY -> ap
    boolean clickable -> aq
    boolean solution -> ar
    java.util.ArrayList spritesAEliminar -> as
    int completos -> at
    void createScene() -> a
    void onBackKeyPressed() -> b
    com.adp.lumus.general.SceneManager$SceneType getSceneType() -> c
    void disposeScene() -> d
    void createBackground() -> f
    void createHUD() -> Y
    java.lang.String stringNivelTopBanner() -> Z
    void createTopBanner() -> aa
    void createButtons() -> ab
    void updateTable() -> e
    void updateTile(int,int) -> a
    void createChangeLevelScene() -> ac
    void createMenuChildScene() -> ad
    void changeLevel() -> ae
    void limparHUDChangeLevel() -> af
    void fazReset() -> ag
    org.andengine.entity.sprite.ButtonSprite$OnClickListener clLivre() -> ah
    org.andengine.entity.sprite.ButtonSprite$OnClickListener clLamp() -> ai
    org.andengine.entity.sprite.ButtonSprite$OnClickListener clNada() -> aj
    org.andengine.entity.sprite.ButtonSprite$OnClickListener clSoluc() -> ak
    org.andengine.entity.sprite.ButtonSprite$OnClickListener clReset() -> al
    org.andengine.entity.sprite.ButtonSprite$OnClickListener clUndo() -> am
    boolean onMenuItemClicked(org.andengine.entity.scene.menu.MenuScene,org.andengine.entity.scene.menu.item.IMenuItem,float,float) -> a
    com.adp.lumus.general.BaseScene access$0(com.adp.lumus.game.GameScene) -> a
    java.util.ArrayList access$1(com.adp.lumus.game.GameScene) -> b
    android.app.Activity access$2(com.adp.lumus.game.GameScene) -> c
    org.andengine.engine.camera.hud.HUD access$3(com.adp.lumus.game.GameScene) -> d
    org.andengine.entity.sprite.Sprite access$4(com.adp.lumus.game.GameScene) -> e
    org.andengine.entity.text.Text access$5(com.adp.lumus.game.GameScene) -> f
    org.andengine.entity.scene.menu.MenuScene access$6(com.adp.lumus.game.GameScene) -> g
    org.andengine.entity.primitive.Rectangle access$7(com.adp.lumus.game.GameScene) -> h
    boolean access$8(com.adp.lumus.game.GameScene) -> i
    com.adp.lumus.game.GameLogic access$9(com.adp.lumus.game.GameScene) -> j
    void access$10(com.adp.lumus.game.GameScene,long) -> a
    void access$11(com.adp.lumus.game.GameScene,int) -> a
    void access$12(com.adp.lumus.game.GameScene,int) -> b
    void access$13(com.adp.lumus.game.GameScene,boolean) -> a
    void access$14(com.adp.lumus.game.GameScene) -> k
    long access$15(com.adp.lumus.game.GameScene) -> l
    int access$16(com.adp.lumus.game.GameScene) -> m
    int access$17(com.adp.lumus.game.GameScene) -> n
    void access$18(com.adp.lumus.game.GameScene) -> o
com.adp.lumus.game.GameScene$1 -> com.adp.lumus.a.c:
    com.adp.lumus.game.GameScene this$0 -> a
    void run() -> run
com.adp.lumus.game.GameScene$10 -> com.adp.lumus.a.d:
    com.adp.lumus.game.GameScene this$0 -> a
    void run() -> run
com.adp.lumus.game.GameScene$11 -> com.adp.lumus.a.e:
    com.adp.lumus.game.GameScene this$0 -> a
    void onClick(org.andengine.entity.sprite.ButtonSprite,float,float) -> a
com.adp.lumus.game.GameScene$12 -> com.adp.lumus.a.f:
    com.adp.lumus.game.GameScene this$0 -> a
    void onClick(org.andengine.entity.sprite.ButtonSprite,float,float) -> a
com.adp.lumus.game.GameScene$13 -> com.adp.lumus.a.g:
    com.adp.lumus.game.GameScene this$0 -> a
    void onClick(org.andengine.entity.sprite.ButtonSprite,float,float) -> a
com.adp.lumus.game.GameScene$14 -> com.adp.lumus.a.h:
    com.adp.lumus.game.GameScene this$0 -> a
    void onClick(org.andengine.entity.sprite.ButtonSprite,float,float) -> a
    com.adp.lumus.game.GameScene access$0(com.adp.lumus.game.GameScene$14) -> a
com.adp.lumus.game.GameScene$14$1 -> com.adp.lumus.a.i:
    com.adp.lumus.game.GameScene$14 this$1 -> a
    void run() -> run
    com.adp.lumus.game.GameScene$14 access$0(com.adp.lumus.game.GameScene$14$1) -> a
com.adp.lumus.game.GameScene$14$1$1 -> com.adp.lumus.a.j:
    com.adp.lumus.game.GameScene$14$1 this$2 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.adp.lumus.game.GameScene$14$1$2 -> com.adp.lumus.a.k:
    com.adp.lumus.game.GameScene$14$1 this$2 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.adp.lumus.game.GameScene$15 -> com.adp.lumus.a.l:
    com.adp.lumus.game.GameScene this$0 -> a
    void onClick(org.andengine.entity.sprite.ButtonSprite,float,float) -> a
    com.adp.lumus.game.GameScene access$0(com.adp.lumus.game.GameScene$15) -> a
com.adp.lumus.game.GameScene$15$1 -> com.adp.lumus.a.m:
    com.adp.lumus.game.GameScene$15 this$1 -> a
    void run() -> run
    com.adp.lumus.game.GameScene$15 access$0(com.adp.lumus.game.GameScene$15$1) -> a
com.adp.lumus.game.GameScene$15$1$1 -> com.adp.lumus.a.n:
    com.adp.lumus.game.GameScene$15$1 this$2 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.adp.lumus.game.GameScene$15$1$2 -> com.adp.lumus.a.o:
    com.adp.lumus.game.GameScene$15$1 this$2 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.adp.lumus.game.GameScene$16 -> com.adp.lumus.a.p:
    com.adp.lumus.game.GameScene this$0 -> a
    void onClick(org.andengine.entity.sprite.ButtonSprite,float,float) -> a
    com.adp.lumus.game.GameScene access$0(com.adp.lumus.game.GameScene$16) -> a
com.adp.lumus.game.GameScene$16$1 -> com.adp.lumus.a.q:
    com.adp.lumus.game.GameScene$16 this$1 -> a
    void run() -> run
com.adp.lumus.game.GameScene$2 -> com.adp.lumus.a.r:
    com.adp.lumus.game.GameScene this$0 -> a
    void preDraw(org.andengine.opengl.util.GLState,org.andengine.engine.camera.Camera) -> a_
com.adp.lumus.game.GameScene$3 -> com.adp.lumus.a.s:
    com.adp.lumus.game.GameScene this$0 -> a
    void preDraw(org.andengine.opengl.util.GLState,org.andengine.engine.camera.Camera) -> a_
com.adp.lumus.game.GameScene$4 -> com.adp.lumus.a.t:
    com.adp.lumus.game.GameScene this$0 -> a
    void preDraw(org.andengine.opengl.util.GLState,org.andengine.engine.camera.Camera) -> a_
com.adp.lumus.game.GameScene$5 -> com.adp.lumus.a.u:
    com.adp.lumus.game.GameScene this$0 -> a
    void preDraw(org.andengine.opengl.util.GLState,org.andengine.engine.camera.Camera) -> a_
com.adp.lumus.game.GameScene$6 -> com.adp.lumus.a.v:
    com.adp.lumus.game.GameScene this$0 -> a
    void preDraw(org.andengine.opengl.util.GLState,org.andengine.engine.camera.Camera) -> a_
com.adp.lumus.game.GameScene$7 -> com.adp.lumus.a.w:
    com.adp.lumus.game.GameScene this$0 -> a
    void preDraw(org.andengine.opengl.util.GLState,org.andengine.engine.camera.Camera) -> a_
com.adp.lumus.game.GameScene$8 -> com.adp.lumus.a.x:
    com.adp.lumus.game.GameScene this$0 -> a
    void run() -> run
com.adp.lumus.game.GameScene$9 -> com.adp.lumus.a.y:
    com.adp.lumus.game.GameScene this$0 -> a
    void run() -> run
com.adp.lumus.general.BaseScene -> com.adp.lumus.b.a:
    org.andengine.engine.Engine engine -> a
    android.app.Activity activity -> b
    com.adp.lumus.general.ResourcesManager rm -> c
    org.andengine.opengl.vbo.VertexBufferObjectManager vbom -> d
    org.andengine.engine.camera.Camera camera -> e
    void createScene() -> a
    void onBackKeyPressed() -> b
    com.adp.lumus.general.SceneManager$SceneType getSceneType() -> c
    void disposeScene() -> d
com.adp.lumus.general.CompraPacote -> com.adp.lumus.b.b:
    com.adp.lumus.general.ResourcesManager rm -> d
    boolean hasPack1 -> e
    boolean hasPack2 -> f
    boolean hasPack3 -> g
    com.example.android.util.IabHelper mHelper -> h
    com.example.android.util.IabHelper$QueryInventoryFinishedListener mGotInventoryListener -> a
    com.example.android.util.IabHelper$OnIabPurchaseFinishedListener mPurchaseFinishedListener -> b
    com.example.android.util.IabHelper$OnConsumeFinishedListener mConsumeFinishedListener -> c
    void onBuyPacoteButtonClicked(int) -> a
    boolean verifyDeveloperPayload(com.example.android.util.Purchase) -> a
    void destroy() -> a
    void complain(java.lang.String) -> a
    java.lang.String fazerChave() -> e
    boolean isHasPack1() -> b
    boolean isHasPack2() -> c
    boolean isHasPack3() -> d
    void access$0(com.adp.lumus.general.CompraPacote,boolean) -> a
    void access$1(com.adp.lumus.general.CompraPacote,boolean) -> b
    void access$2(com.adp.lumus.general.CompraPacote,boolean) -> c
    com.adp.lumus.general.ResourcesManager access$3(com.adp.lumus.general.CompraPacote) -> a
    com.example.android.util.IabHelper access$4(com.adp.lumus.general.CompraPacote) -> b
com.adp.lumus.general.CompraPacote$1 -> com.adp.lumus.b.c:
    com.adp.lumus.general.CompraPacote this$0 -> a
    void onQueryInventoryFinished(com.example.android.util.IabResult,com.example.android.util.Inventory) -> a
com.adp.lumus.general.CompraPacote$2 -> com.adp.lumus.b.d:
    com.adp.lumus.general.CompraPacote this$0 -> a
    void onIabPurchaseFinished(com.example.android.util.IabResult,com.example.android.util.Purchase) -> a
com.adp.lumus.general.CompraPacote$3 -> com.adp.lumus.b.e:
    com.adp.lumus.general.CompraPacote this$0 -> a
com.adp.lumus.general.CompraPacote$4 -> com.adp.lumus.b.f:
    com.adp.lumus.general.CompraPacote this$0 -> a
    void onIabSetupFinished(com.example.android.util.IabResult) -> a
com.adp.lumus.general.LoadingScene -> com.adp.lumus.b.g:
    void createScene() -> a
    void onBackKeyPressed() -> b
    com.adp.lumus.general.SceneManager$SceneType getSceneType() -> c
    void disposeScene() -> d
com.adp.lumus.general.ResourcesManager -> com.adp.lumus.b.h:
    com.adp.lumus.general.ResourcesManager INSTANCE -> ai
    org.andengine.engine.Engine engine -> a
    com.adp.lumus.activity.GameActivity activity -> b
    org.andengine.engine.camera.Camera camera -> c
    org.andengine.opengl.vbo.VertexBufferObjectManager vbom -> d
    org.andengine.opengl.font.Font levelCompleteFont -> e
    org.andengine.opengl.font.Font nextLevelFont -> f
    org.andengine.opengl.font.Font topBannerFont -> g
    org.andengine.opengl.font.Font titleFont -> h
    org.andengine.opengl.font.Font descriptionFont -> i
    org.andengine.opengl.font.Font completedFont -> j
    org.andengine.opengl.font.Font levelFont -> k
    org.andengine.opengl.font.Font pacoteFont -> l
    org.andengine.opengl.font.Font menuInicialFont -> m
    org.andengine.opengl.font.Font loadingFont -> n
    org.andengine.opengl.font.Font howtoplayFont -> o
    org.andengine.opengl.font.Font statsFont -> p
    int nivelSeleccionado -> q
    int pacoteSeleccionado -> r
    com.adp.lumus.saveGame.Save save -> s
    android.content.SharedPreferences preferences -> t
    com.adp.lumus.general.CompraPacote cp -> u
    org.andengine.audio.sound.Sound complete -> v
    org.andengine.audio.music.Music music -> w
    org.andengine.opengl.texture.region.ITextureRegion splash_region -> x
    org.andengine.opengl.texture.region.ITextureRegion background_region -> y
    org.andengine.opengl.texture.region.ITextureRegion game_table_region -> z
    org.andengine.opengl.texture.region.ITextureRegion pacote_region -> A
    org.andengine.opengl.texture.region.ITextureRegion topBannerPacotes_region -> B
    org.andengine.opengl.texture.region.ITextureRegion lamp_region -> C
    org.andengine.opengl.texture.region.ITextureRegion lampErrada_region -> D
    org.andengine.opengl.texture.region.ITextureRegion livre_region -> E
    org.andengine.opengl.texture.region.ITextureRegion iluminada_region -> F
    org.andengine.opengl.texture.region.ITextureRegion marca_region -> G
    org.andengine.opengl.texture.region.ITextureRegion zero_region -> H
    org.andengine.opengl.texture.region.ITextureRegion um_region -> I
    org.andengine.opengl.texture.region.ITextureRegion dois_region -> J
    org.andengine.opengl.texture.region.ITextureRegion tres_region -> K
    org.andengine.opengl.texture.region.ITextureRegion quatro_region -> L
    org.andengine.opengl.texture.region.ITextureRegion zeroGreen_region -> M
    org.andengine.opengl.texture.region.ITextureRegion umGreen_region -> N
    org.andengine.opengl.texture.region.ITextureRegion doisGreen_region -> O
    org.andengine.opengl.texture.region.ITextureRegion tresGreen_region -> P
    org.andengine.opengl.texture.region.ITextureRegion quatroGreen_region -> Q
    org.andengine.opengl.texture.region.ITextureRegion parede_region -> R
    org.andengine.opengl.texture.region.ITextureRegion topBanner_region -> S
    org.andengine.opengl.texture.region.ITextureRegion nivelCompleto_region -> T
    org.andengine.opengl.texture.region.ITextureRegion nivelIncompleto_region -> U
    org.andengine.opengl.texture.region.ITextureRegion nextLevel -> V
    org.andengine.opengl.texture.region.ITextureRegion bkgNextLevel -> W
    org.andengine.opengl.texture.region.ITextureRegion bannerMenu_region -> X
    org.andengine.opengl.texture.region.ITextureRegion lumusBanner_region -> Y
    org.andengine.opengl.texture.region.ITextureRegion options_region -> Z
    org.andengine.opengl.texture.region.ITextureRegion iconReset_region -> aa
    org.andengine.opengl.texture.region.ITextureRegion iconUndo_region -> ab
    org.andengine.opengl.texture.region.ITextureRegion iconSolucao_region -> ac
    org.andengine.opengl.texture.region.ITextureRegion direcoes_region -> ad
    org.andengine.opengl.texture.region.ITextureRegion marca1_region -> ae
    org.andengine.opengl.texture.region.ITextureRegion marca2_region -> af
    org.andengine.opengl.texture.region.ITextureRegion numerosCerto_region -> ag
    org.andengine.opengl.texture.region.ITextureRegion numerosErrado_region -> ah
    org.andengine.opengl.texture.atlas.bitmap.BuildableBitmapTextureAtlas menuTextureAtlas -> aj
    org.andengine.opengl.texture.atlas.bitmap.BuildableBitmapTextureAtlas gameTextureAtlas -> ak
    org.andengine.opengl.texture.atlas.bitmap.BuildableBitmapTextureAtlas gameTilesTextureAtlas -> al
    org.andengine.opengl.texture.atlas.bitmap.BitmapTextureAtlas splashTextureAtlas -> am
    org.andengine.opengl.texture.atlas.bitmap.BitmapTextureAtlas backgTextureAtlas -> an
    void loadPreferences() -> l
    void loadMenuResources() -> a
    void loadMenuGraphics() -> m
    void loadMenuFonts() -> n
    void unloadMenuTextures() -> b
    void loadMenuTextures() -> c
    void loadSounds() -> o
    void loadJingle() -> p
    void loadMusic() -> q
    void loadGameResources() -> d
    void loadGameFonts() -> r
    void loadGameGraphics() -> s
    void loadGameTiles() -> t
    void unloadGameTextures() -> e
    void loadSavedGame() -> u
    void loadSavedGameMemInterna() -> v
    void saveGame() -> f
    void resetSave() -> g
    void loadSplashScreen() -> h
    void unloadSplashScreen() -> i
    void prepareManager(org.andengine.engine.Engine,com.adp.lumus.activity.GameActivity,org.andengine.engine.camera.Camera,org.andengine.opengl.vbo.VertexBufferObjectManager) -> a
    void actualizarPaid() -> j
    com.adp.lumus.general.ResourcesManager getInstance() -> k
    void loadBackground() -> w
com.adp.lumus.general.SceneManager -> com.adp.lumus.b.i:
    com.adp.lumus.general.BaseScene splashScene -> a
    com.adp.lumus.general.BaseScene menuScene -> b
    com.adp.lumus.general.BaseScene gameScene -> c
    com.adp.lumus.general.BaseScene loadingScene -> d
    com.adp.lumus.general.BaseScene optionsScene -> e
    com.adp.lumus.general.BaseScene pacotesScene -> f
    com.adp.lumus.general.BaseScene howtoplayScene -> g
    com.adp.lumus.general.BaseScene statsScene -> h
    com.adp.lumus.menu.MenuNivelScene niveisScene -> i
    com.adp.lumus.general.SceneManager INSTANCE -> j
    com.adp.lumus.general.SceneManager$SceneType currentSceneType -> k
    com.adp.lumus.general.BaseScene currentScene -> l
    com.adp.lumus.general.BaseScene disposableScene -> m
    com.adp.lumus.general.ResourcesManager rm -> n
    org.andengine.engine.Engine engine -> o
    void setScene(com.adp.lumus.general.BaseScene) -> a
    void createSplashScene(org.andengine.ui.IGameInterface$OnCreateSceneCallback) -> a
    void disposeSplashScene() -> d
    void createMenuScene() -> a
    void loadMenuScene(org.andengine.engine.Engine) -> a
    void loadOptionsScene(org.andengine.engine.Engine) -> b
    void loadPacotesScene(org.andengine.engine.Engine) -> c
    void loadHowToPlayScene(org.andengine.engine.Engine) -> d
    void loadStatsScene(org.andengine.engine.Engine) -> e
    void loadNiveisScene(org.andengine.engine.Engine,boolean,com.adp.lumus.general.ResourcesManager) -> a
    void loadGameScene(org.andengine.engine.Engine) -> f
    void changeSceneSemDispose() -> e
    void changeScene() -> f
    com.adp.lumus.general.SceneManager getInstance() -> b
    com.adp.lumus.general.BaseScene getCurrentScene() -> c
    com.adp.lumus.general.BaseScene access$1(com.adp.lumus.general.SceneManager) -> a
    com.adp.lumus.general.BaseScene access$2(com.adp.lumus.general.SceneManager) -> b
    com.adp.lumus.general.BaseScene access$3(com.adp.lumus.general.SceneManager) -> c
    com.adp.lumus.general.BaseScene access$4(com.adp.lumus.general.SceneManager) -> d
    com.adp.lumus.general.BaseScene access$5(com.adp.lumus.general.SceneManager) -> e
    com.adp.lumus.general.ResourcesManager access$6(com.adp.lumus.general.SceneManager) -> f
    com.adp.lumus.menu.MenuNivelScene access$7(com.adp.lumus.general.SceneManager) -> g
    void access$8(com.adp.lumus.general.SceneManager,com.adp.lumus.general.BaseScene) -> a
    com.adp.lumus.general.BaseScene access$9(com.adp.lumus.general.SceneManager) -> h
com.adp.lumus.general.SceneManager$1 -> com.adp.lumus.b.j:
    com.adp.lumus.general.SceneManager this$0 -> a
    org.andengine.engine.Engine val$mEngine -> b
    void onTimePassed(org.andengine.engine.handler.timer.TimerHandler) -> a
com.adp.lumus.general.SceneManager$2 -> com.adp.lumus.b.k:
    com.adp.lumus.general.SceneManager this$0 -> a
    org.andengine.engine.Engine val$mEngine -> b
    void onTimePassed(org.andengine.engine.handler.timer.TimerHandler) -> a
com.adp.lumus.general.SceneManager$3 -> com.adp.lumus.b.l:
    com.adp.lumus.general.SceneManager this$0 -> a
    org.andengine.engine.Engine val$mEngine -> b
    void onTimePassed(org.andengine.engine.handler.timer.TimerHandler) -> a
com.adp.lumus.general.SceneManager$4 -> com.adp.lumus.b.m:
    com.adp.lumus.general.SceneManager this$0 -> a
    org.andengine.engine.Engine val$mEngine -> b
    void onTimePassed(org.andengine.engine.handler.timer.TimerHandler) -> a
com.adp.lumus.general.SceneManager$5 -> com.adp.lumus.b.n:
    com.adp.lumus.general.SceneManager this$0 -> a
    org.andengine.engine.Engine val$mEngine -> b
    void onTimePassed(org.andengine.engine.handler.timer.TimerHandler) -> a
com.adp.lumus.general.SceneManager$6 -> com.adp.lumus.b.o:
    com.adp.lumus.general.SceneManager this$0 -> a
    void run() -> run
com.adp.lumus.general.SceneManager$7 -> com.adp.lumus.b.p:
    com.adp.lumus.general.SceneManager this$0 -> a
    org.andengine.engine.Engine val$mEngine -> b
    void onTimePassed(org.andengine.engine.handler.timer.TimerHandler) -> a
com.adp.lumus.general.SceneManager$8 -> com.adp.lumus.b.q:
    com.adp.lumus.general.SceneManager this$0 -> a
    org.andengine.engine.Engine val$mEngine -> b
    void onTimePassed(org.andengine.engine.handler.timer.TimerHandler) -> a
com.adp.lumus.general.SceneManager$SceneType -> com.adp.lumus.b.r:
    com.adp.lumus.general.SceneManager$SceneType SCENE_SPLASH -> a
    com.adp.lumus.general.SceneManager$SceneType SCENE_MENU -> b
    com.adp.lumus.general.SceneManager$SceneType SCENE_GAME -> c
    com.adp.lumus.general.SceneManager$SceneType SCENE_LOADING -> d
    com.adp.lumus.general.SceneManager$SceneType SCENE_PACOTES -> e
    com.adp.lumus.general.SceneManager$SceneType SCENE_NIVEIS -> f
    com.adp.lumus.general.SceneManager$SceneType SCENE_OPTIONS -> g
    com.adp.lumus.general.SceneManager$SceneType SCENE_HOWTOPLAY -> h
    com.adp.lumus.general.SceneManager$SceneType SCENE_STATS -> i
    com.adp.lumus.general.SceneManager$SceneType[] ENUM$VALUES -> j
    com.adp.lumus.general.SceneManager$SceneType[] values() -> values
    com.adp.lumus.general.SceneManager$SceneType valueOf(java.lang.String) -> valueOf
com.adp.lumus.menu.HowToPlayScene -> com.adp.lumus.c.a:
    float FREQ_D -> S
    int STATE_WAIT -> T
    int STATE_SCROLLING -> U
    int STATE_MOMENTUM -> V
    int STATE_DISABLE -> W
    int MAXSCROLL -> X
    int MINSCROLL -> Y
    float MAX_ACCEL -> Z
    double FRICTION -> aa
    org.andengine.input.touch.detector.SurfaceScrollDetector mScrollDetector -> ab
    double accel -> ac
    double accel1 -> ad
    double accel0 -> ae
    int mState -> af
    float mCurrentY -> ag
    long t0 -> ah
    org.andengine.engine.handler.timer.TimerHandler thandle -> ai
    org.andengine.entity.scene.menu.MenuScene menuChildScene -> aj
    org.andengine.entity.scene.Scene thisScene -> ak
    void createScene() -> a
    void onBackKeyPressed() -> b
    com.adp.lumus.general.SceneManager$SceneType getSceneType() -> c
    void disposeScene() -> d
    void createMenuChildScene() -> Y
    void createHUD() -> e
    void createBackground() -> Z
    void createTop() -> aa
    boolean onSceneTouchEvent(org.andengine.entity.scene.Scene,org.andengine.input.touch.TouchEvent) -> a
    void onScrollStarted(org.andengine.input.touch.detector.ScrollDetector,int,float,float) -> a
    void onScroll(org.andengine.input.touch.detector.ScrollDetector,int,float,float) -> b
    void onScrollFinished(org.andengine.input.touch.detector.ScrollDetector,int,float,float) -> c
    void doSetPos() -> f
    boolean onMenuItemClicked(org.andengine.entity.scene.menu.MenuScene,org.andengine.entity.scene.menu.item.IMenuItem,float,float) -> a
    org.andengine.entity.scene.Scene access$0(com.adp.lumus.menu.HowToPlayScene) -> a
    org.andengine.input.touch.detector.SurfaceScrollDetector access$1(com.adp.lumus.menu.HowToPlayScene) -> b
    int access$2(com.adp.lumus.menu.HowToPlayScene) -> c
com.adp.lumus.menu.HowToPlayScene$1 -> com.adp.lumus.c.b:
    com.adp.lumus.menu.HowToPlayScene this$0 -> a
    void onTimePassed(org.andengine.engine.handler.timer.TimerHandler) -> a
com.adp.lumus.menu.HowToPlayScene$2 -> com.adp.lumus.c.c:
    com.adp.lumus.menu.HowToPlayScene this$0 -> a
    void run() -> run
com.adp.lumus.menu.HowToPlayScene$3 -> com.adp.lumus.c.d:
    com.adp.lumus.menu.HowToPlayScene this$0 -> a
    boolean onAreaTouched(org.andengine.input.touch.TouchEvent,float,float) -> a
com.adp.lumus.menu.HowToPlayScene$4 -> com.adp.lumus.c.e:
    com.adp.lumus.menu.HowToPlayScene this$0 -> a
    boolean onAreaTouched(org.andengine.input.touch.TouchEvent,float,float) -> a
com.adp.lumus.menu.HowToPlayScene$5 -> com.adp.lumus.c.f:
    com.adp.lumus.menu.HowToPlayScene this$0 -> a
    boolean onAreaTouched(org.andengine.input.touch.TouchEvent,float,float) -> a
com.adp.lumus.menu.HowToPlayScene$6 -> com.adp.lumus.c.g:
    com.adp.lumus.menu.HowToPlayScene this$0 -> a
    boolean onAreaTouched(org.andengine.input.touch.TouchEvent,float,float) -> a
com.adp.lumus.menu.HowToPlayScene$7 -> com.adp.lumus.c.h:
    com.adp.lumus.menu.HowToPlayScene this$0 -> a
    boolean onAreaTouched(org.andengine.input.touch.TouchEvent,float,float) -> a
com.adp.lumus.menu.HowToPlayScene$8 -> com.adp.lumus.c.i:
    com.adp.lumus.menu.HowToPlayScene this$0 -> a
    void preDraw(org.andengine.opengl.util.GLState,org.andengine.engine.camera.Camera) -> a_
com.adp.lumus.menu.HowToPlayScene$9 -> com.adp.lumus.c.j:
    com.adp.lumus.menu.HowToPlayScene this$0 -> a
    void preDraw(org.andengine.opengl.util.GLState,org.andengine.engine.camera.Camera) -> a_
com.adp.lumus.menu.MainMenuScene -> com.adp.lumus.c.k:
    org.andengine.entity.scene.menu.MenuScene menuChildScene -> S
    int PLAY -> T
    int OPTIONS -> U
    int HELP -> V
    int STATS -> W
    void createScene() -> a
    void onBackKeyPressed() -> b
    com.adp.lumus.general.SceneManager$SceneType getSceneType() -> c
    void disposeScene() -> d
    void createBackground() -> e
    void createMenuChildScene() -> f
    void createTopBanner() -> Y
    boolean onMenuItemClicked(org.andengine.entity.scene.menu.MenuScene,org.andengine.entity.scene.menu.item.IMenuItem,float,float) -> a
com.adp.lumus.menu.MainMenuScene$1 -> com.adp.lumus.c.l:
    com.adp.lumus.menu.MainMenuScene this$0 -> a
    void preDraw(org.andengine.opengl.util.GLState,org.andengine.engine.camera.Camera) -> a_
com.adp.lumus.menu.MainMenuScene$2 -> com.adp.lumus.c.m:
    com.adp.lumus.menu.MainMenuScene this$0 -> a
    void preDraw(org.andengine.opengl.util.GLState,org.andengine.engine.camera.Camera) -> a_
com.adp.lumus.menu.MenuNivelScene -> com.adp.lumus.c.n:
    org.andengine.entity.scene.menu.MenuScene menuChildScene -> S
    int NIVEIS -> T
    int DESVIOX -> U
    int DESVIOY -> V
    int TAMANHOSPRITEX -> W
    int TAMANHOSPRITEY -> X
    org.andengine.engine.camera.hud.HUD sceneHUD -> Y
    org.andengine.entity.scene.Scene thisScene -> Z
    void createScene() -> a
    void onBackKeyPressed() -> b
    com.adp.lumus.general.SceneManager$SceneType getSceneType() -> c
    void disposeScene() -> d
    void createBackground() -> f
    void createMenuChildScene() -> Y
    void createHUD() -> e
    void createTop() -> Z
    boolean onMenuItemClicked(org.andengine.entity.scene.menu.MenuScene,org.andengine.entity.scene.menu.item.IMenuItem,float,float) -> a
    org.andengine.entity.scene.Scene access$0(com.adp.lumus.menu.MenuNivelScene) -> a
com.adp.lumus.menu.MenuNivelScene$1 -> com.adp.lumus.c.o:
    com.adp.lumus.menu.MenuNivelScene this$0 -> a
    void run() -> run
com.adp.lumus.menu.MenuNivelScene$2 -> com.adp.lumus.c.p:
    com.adp.lumus.menu.MenuNivelScene this$0 -> a
    void preDraw(org.andengine.opengl.util.GLState,org.andengine.engine.camera.Camera) -> a_
com.adp.lumus.menu.MenuNivelScene$3 -> com.adp.lumus.c.q:
    com.adp.lumus.menu.MenuNivelScene this$0 -> a
    void preDraw(org.andengine.opengl.util.GLState,org.andengine.engine.camera.Camera) -> a_
com.adp.lumus.menu.MenuPacotesScene -> com.adp.lumus.c.r:
    float FREQ_D -> S
    int STATE_WAIT -> T
    int STATE_SCROLLING -> U
    int STATE_MOMENTUM -> V
    int STATE_DISABLE -> W
    int MAXSCROLL -> X
    int MINSCROLL -> Y
    float MAX_ACCEL -> Z
    double FRICTION -> aa
    org.andengine.input.touch.detector.SurfaceScrollDetector mScrollDetector -> ab
    double accel -> ac
    double accel1 -> ad
    double accel0 -> ae
    int mState -> af
    float mCurrentY -> ag
    long t0 -> ah
    int DESVIOX -> ai
    int DESVIOY -> aj
    org.andengine.entity.scene.menu.MenuScene menuChildScene -> ak
    org.andengine.engine.handler.timer.TimerHandler thandle -> al
    org.andengine.entity.scene.Scene thisScene -> am
    void createScene() -> a
    void onBackKeyPressed() -> b
    com.adp.lumus.general.SceneManager$SceneType getSceneType() -> c
    void disposeScene() -> d
    void createMenuChildScene() -> Y
    org.andengine.entity.scene.menu.item.IMenuItem createPacote(int) -> a
    void createHUD() -> e
    java.lang.String stringR(int,int) -> a
    void createBackground() -> Z
    void createTop() -> aa
    boolean onSceneTouchEvent(org.andengine.entity.scene.Scene,org.andengine.input.touch.TouchEvent) -> a
    void onScrollStarted(org.andengine.input.touch.detector.ScrollDetector,int,float,float) -> a
    void onScroll(org.andengine.input.touch.detector.ScrollDetector,int,float,float) -> b
    void onScrollFinished(org.andengine.input.touch.detector.ScrollDetector,int,float,float) -> c
    void doSetPos() -> f
    boolean onMenuItemClicked(org.andengine.entity.scene.menu.MenuScene,org.andengine.entity.scene.menu.item.IMenuItem,float,float) -> a
    void carregarPacote() -> ab
    boolean unlock1() -> ac
    boolean unlock2() -> ad
    org.andengine.entity.scene.Scene access$0(com.adp.lumus.menu.MenuPacotesScene) -> a
    org.andengine.input.touch.detector.SurfaceScrollDetector access$1(com.adp.lumus.menu.MenuPacotesScene) -> b
    int access$2(com.adp.lumus.menu.MenuPacotesScene) -> c
    android.app.Activity access$3(com.adp.lumus.menu.MenuPacotesScene) -> d
com.adp.lumus.menu.MenuPacotesScene$1 -> com.adp.lumus.c.s:
    com.adp.lumus.menu.MenuPacotesScene this$0 -> a
    void onTimePassed(org.andengine.engine.handler.timer.TimerHandler) -> a
com.adp.lumus.menu.MenuPacotesScene$2 -> com.adp.lumus.c.t:
    com.adp.lumus.menu.MenuPacotesScene this$0 -> a
    void run() -> run
com.adp.lumus.menu.MenuPacotesScene$3 -> com.adp.lumus.c.u:
    com.adp.lumus.menu.MenuPacotesScene this$0 -> a
    boolean onAreaTouched(org.andengine.input.touch.TouchEvent,float,float) -> a
com.adp.lumus.menu.MenuPacotesScene$4 -> com.adp.lumus.c.v:
    com.adp.lumus.menu.MenuPacotesScene this$0 -> a
    void preDraw(org.andengine.opengl.util.GLState,org.andengine.engine.camera.Camera) -> a_
com.adp.lumus.menu.MenuPacotesScene$5 -> com.adp.lumus.c.w:
    com.adp.lumus.menu.MenuPacotesScene this$0 -> a
    void preDraw(org.andengine.opengl.util.GLState,org.andengine.engine.camera.Camera) -> a_
com.adp.lumus.menu.MenuPacotesScene$6 -> com.adp.lumus.c.x:
    com.adp.lumus.menu.MenuPacotesScene this$0 -> a
    void run() -> run
com.adp.lumus.menu.MenuPacotesScene$7 -> com.adp.lumus.c.y:
    com.adp.lumus.menu.MenuPacotesScene this$0 -> a
    void run() -> run
com.adp.lumus.menu.OptionsMenuScrollingScene -> com.adp.lumus.c.z:
    int NOPTIONS -> S
    org.andengine.entity.scene.menu.MenuScene menuChildScene -> T
    java.lang.String toastString -> U
    org.andengine.entity.text.Text soundText -> V
    org.andengine.entity.scene.Scene thisScene -> W
    void createScene() -> a
    void onBackKeyPressed() -> b
    com.adp.lumus.general.SceneManager$SceneType getSceneType() -> c
    void disposeScene() -> d
    void createMenuChildScene() -> f
    void createHUD() -> e
    void textoSound() -> Y
    void createBackground() -> Z
    void createTop() -> aa
    void opcaoReset() -> ab
    boolean onMenuItemClicked(org.andengine.entity.scene.menu.MenuScene,org.andengine.entity.scene.menu.item.IMenuItem,float,float) -> a
    boolean MyStartActivity(android.content.Intent) -> a
    org.andengine.entity.scene.Scene access$0(com.adp.lumus.menu.OptionsMenuScrollingScene) -> a
    android.app.Activity access$1(com.adp.lumus.menu.OptionsMenuScrollingScene) -> b
    java.lang.String access$2(com.adp.lumus.menu.OptionsMenuScrollingScene) -> c
com.adp.lumus.menu.OptionsMenuScrollingScene$1 -> com.adp.lumus.c.aa:
    com.adp.lumus.menu.OptionsMenuScrollingScene this$0 -> a
    void run() -> run
com.adp.lumus.menu.OptionsMenuScrollingScene$2 -> com.adp.lumus.c.ab:
    com.adp.lumus.menu.OptionsMenuScrollingScene this$0 -> a
    void preDraw(org.andengine.opengl.util.GLState,org.andengine.engine.camera.Camera) -> a_
com.adp.lumus.menu.OptionsMenuScrollingScene$3 -> com.adp.lumus.c.ac:
    com.adp.lumus.menu.OptionsMenuScrollingScene this$0 -> a
    void preDraw(org.andengine.opengl.util.GLState,org.andengine.engine.camera.Camera) -> a_
com.adp.lumus.menu.OptionsMenuScrollingScene$4 -> com.adp.lumus.c.ad:
    com.adp.lumus.menu.OptionsMenuScrollingScene this$0 -> a
    void run() -> run
com.adp.lumus.menu.OptionsMenuScrollingScene$4$1 -> com.adp.lumus.c.ae:
    com.adp.lumus.menu.OptionsMenuScrollingScene$4 this$1 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.adp.lumus.menu.OptionsMenuScrollingScene$4$2 -> com.adp.lumus.c.af:
    com.adp.lumus.menu.OptionsMenuScrollingScene$4 this$1 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.adp.lumus.menu.OptionsMenuScrollingScene$5 -> com.adp.lumus.c.ag:
    com.adp.lumus.menu.OptionsMenuScrollingScene this$0 -> a
    void run() -> run
com.adp.lumus.menu.SplashScene -> com.adp.lumus.c.ah:
    org.andengine.entity.sprite.Sprite splash -> S
    void createScene() -> a
    void onBackKeyPressed() -> b
    com.adp.lumus.general.SceneManager$SceneType getSceneType() -> c
    void disposeScene() -> d
com.adp.lumus.menu.SplashScene$1 -> com.adp.lumus.c.ai:
    com.adp.lumus.menu.SplashScene this$0 -> a
    void preDraw(org.andengine.opengl.util.GLState,org.andengine.engine.camera.Camera) -> a_
com.adp.lumus.menu.StatsScene -> com.adp.lumus.c.aj:
    float FREQ_D -> S
    int STATE_WAIT -> T
    int STATE_SCROLLING -> U
    int STATE_MOMENTUM -> V
    int STATE_DISABLE -> W
    int MAXSCROLL -> X
    int MINSCROLL -> Y
    float MAX_ACCEL -> Z
    double FRICTION -> aa
    org.andengine.input.touch.detector.SurfaceScrollDetector mScrollDetector -> ab
    double accel -> ac
    double accel1 -> ad
    double accel0 -> ae
    int mState -> af
    float mCurrentY -> ag
    long t0 -> ah
    org.andengine.engine.handler.timer.TimerHandler thandle -> ai
    org.andengine.entity.scene.menu.MenuScene menuChildScene -> aj
    int DESVIOX -> ak
    org.andengine.entity.scene.Scene thisScene -> al
    void createScene() -> a
    void onBackKeyPressed() -> b
    com.adp.lumus.general.SceneManager$SceneType getSceneType() -> c
    void disposeScene() -> d
    void createMenuChildScene() -> Y
    void createTextos() -> e
    void colocaTexto(java.lang.String,java.lang.String,int) -> a
    void createBackground() -> Z
    void createTop() -> aa
    void contarEstatisticas() -> ab
    boolean onSceneTouchEvent(org.andengine.entity.scene.Scene,org.andengine.input.touch.TouchEvent) -> a
    void onScrollStarted(org.andengine.input.touch.detector.ScrollDetector,int,float,float) -> a
    void onScroll(org.andengine.input.touch.detector.ScrollDetector,int,float,float) -> b
    void onScrollFinished(org.andengine.input.touch.detector.ScrollDetector,int,float,float) -> c
    void doSetPos() -> f
    boolean onMenuItemClicked(org.andengine.entity.scene.menu.MenuScene,org.andengine.entity.scene.menu.item.IMenuItem,float,float) -> a
    org.andengine.entity.scene.Scene access$0(com.adp.lumus.menu.StatsScene) -> a
com.adp.lumus.menu.StatsScene$1 -> com.adp.lumus.c.ak:
    com.adp.lumus.menu.StatsScene this$0 -> a
    void onTimePassed(org.andengine.engine.handler.timer.TimerHandler) -> a
com.adp.lumus.menu.StatsScene$2 -> com.adp.lumus.c.al:
    com.adp.lumus.menu.StatsScene this$0 -> a
    void run() -> run
com.adp.lumus.menu.StatsScene$3 -> com.adp.lumus.c.am:
    com.adp.lumus.menu.StatsScene this$0 -> a
    void preDraw(org.andengine.opengl.util.GLState,org.andengine.engine.camera.Camera) -> a_
com.adp.lumus.menu.StatsScene$4 -> com.adp.lumus.c.an:
    com.adp.lumus.menu.StatsScene this$0 -> a
    void preDraw(org.andengine.opengl.util.GLState,org.andengine.engine.camera.Camera) -> a_
com.adp.lumus.saveGame.Estatisticas -> com.adp.lumus.saveGame.Estatisticas:
    int pacotesCompletos -> pacotesCompletos
    int niveisCompletos -> niveisCompletos
    int lampadasColocadas -> lampadasColocadas
    int lampadasRetiradas -> lampadasRetiradas
    int marcasColocadas -> marcasColocadas
    int resets -> resets
    int solucoesVistas -> solucoesVistas
    int undos -> undos
    int inicializacoes -> inicializacoes
    long serialVersionUID -> serialVersionUID
    void addPacotesCompletos() -> addPacotesCompletos
    void addNiveisCompletos() -> addNiveisCompletos
    void addLampadasColocadas() -> addLampadasColocadas
    void addLampadasRetiradas() -> addLampadasRetiradas
    void addmarcasColocadas() -> addmarcasColocadas
    void addResets() -> addResets
    void addSolucoesVistas() -> addSolucoesVistas
    void addUndos() -> addUndos
    void addInicializacoes() -> addInicializacoes
    void subLampadasColocadas() -> subLampadasColocadas
    int getPacotesCompletos() -> getPacotesCompletos
    int getNiveisCompletos() -> getNiveisCompletos
    int getLampadasColocadas() -> getLampadasColocadas
    int getLampadasRetiradas() -> getLampadasRetiradas
    int getMarcasColocadas() -> getMarcasColocadas
    int getResets() -> getResets
    int getSolucoesVistas() -> getSolucoesVistas
    int getUndos() -> getUndos
    int getInicializacoes() -> getInicializacoes
    void setPacotesCompletos(int) -> setPacotesCompletos
    void setNiveisCompletos(int) -> setNiveisCompletos
    void setLampadasColocadas(int) -> setLampadasColocadas
    void setLampadasRetiradas(int) -> setLampadasRetiradas
    void setMarcasColocadas(int) -> setMarcasColocadas
    void setResets(int) -> setResets
    void setSolucoesVistas(int) -> setSolucoesVistas
    void setUndos(int) -> setUndos
    void setInicializacoes(int) -> setInicializacoes
    com.adp.lumus.saveGame.Estatisticas clone() -> clone
    java.lang.Object clone() -> clone
com.adp.lumus.saveGame.Jogada -> com.adp.lumus.saveGame.Jogada:
    int x -> x
    int y -> y
    int tileAntigo -> tileAntigo
    long serialVersionUID -> serialVersionUID
    int getX() -> getX
    void setX(int) -> setX
    int getY() -> getY
    void setY(int) -> setY
    int getTileAntigo() -> getTileAntigo
    void setTileAntigo(int) -> setTileAntigo
com.adp.lumus.saveGame.Nivel -> com.adp.lumus.saveGame.Nivel:
    java.lang.String nome -> nome
    int[][] matriz -> matriz
    int[][] solucao -> solucao
    boolean resolvido -> resolvido
    java.util.Stack stack -> stack
    long serialVersionUID -> serialVersionUID
    java.lang.String getNome() -> getNome
    int getCoord(int,int) -> getCoord
    int[][] getMatriz() -> getMatriz
    int[][] getSolucao() -> getSolucao
    boolean isResolvido() -> isResolvido
    void setResolvido(boolean) -> setResolvido
    void setMatriz(int[][]) -> setMatriz
    void setStack(java.util.Stack) -> setStack
    java.util.Stack getStack() -> getStack
    com.adp.lumus.saveGame.Jogada fazPop() -> fazPop
    void addToStack(com.adp.lumus.saveGame.Jogada) -> addToStack
    com.adp.lumus.saveGame.Nivel clone() -> clone
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
com.adp.lumus.saveGame.Pacote -> com.adp.lumus.saveGame.Pacote:
    int numero -> numero
    java.util.Map niveis -> niveis
    long serialVersionUID -> serialVersionUID
    int getNumero() -> getNumero
    com.adp.lumus.saveGame.Nivel getNivel(int) -> getNivel
    void addNivel(int,com.adp.lumus.saveGame.Nivel) -> addNivel
    boolean isCompleto() -> isCompleto
    void putNivel(int,com.adp.lumus.saveGame.Nivel,boolean) -> putNivel
    void putNivelNoCheck(int,com.adp.lumus.saveGame.Nivel) -> putNivelNoCheck
    int sizePacote() -> sizePacote
    java.util.Map getNiveis() -> getNiveis
    com.adp.lumus.saveGame.Pacote clone() -> clone
    java.lang.Object clone() -> clone
com.adp.lumus.saveGame.Save -> com.adp.lumus.saveGame.Save:
    int versao -> versao
    java.util.Map pacotes -> pacotes
    com.adp.lumus.saveGame.Estatisticas est -> est
    long serialVersionUID -> serialVersionUID
    com.adp.lumus.saveGame.Nivel getNivel(int,int) -> getNivel
    int getVersao() -> getVersao
    void setVersao(int) -> setVersao
    void putPacote(int,com.adp.lumus.saveGame.Pacote) -> putPacote
    void putPacoteNoCheck(int,com.adp.lumus.saveGame.Pacote) -> putPacoteNoCheck
    java.util.Map getPacotes() -> getPacotes
    int size() -> size
    void mergeSave(com.adp.lumus.saveGame.Save) -> mergeSave
    com.adp.lumus.saveGame.Estatisticas getEstatisticas() -> getEstatisticas
    void setEstatisticas(com.adp.lumus.saveGame.Estatisticas) -> setEstatisticas
com.adp.lumus.tiles.Dois -> com.adp.lumus.d.a:
com.adp.lumus.tiles.Iluminada -> com.adp.lumus.d.b:
com.adp.lumus.tiles.Lamp -> com.adp.lumus.d.c:
com.adp.lumus.tiles.LampErrada -> com.adp.lumus.d.d:
com.adp.lumus.tiles.Livre -> com.adp.lumus.d.e:
com.adp.lumus.tiles.Marca -> com.adp.lumus.d.f:
com.adp.lumus.tiles.Parede -> com.adp.lumus.d.g:
com.adp.lumus.tiles.Quatro -> com.adp.lumus.d.h:
com.adp.lumus.tiles.Tile -> com.adp.lumus.d.i:
    org.andengine.entity.sprite.ButtonSprite image -> a
    int x -> b
    int y -> c
    com.adp.lumus.general.ResourcesManager resources -> d
    org.andengine.entity.sprite.Sprite getSprite() -> a
com.adp.lumus.tiles.Tres -> com.adp.lumus.d.j:
com.adp.lumus.tiles.Um -> com.adp.lumus.d.k:
com.adp.lumus.tiles.Zero -> com.adp.lumus.d.l:
com.android.vending.billing.IInAppBillingService -> com.a.a.a.a:
    int isBillingSupported(int,java.lang.String,java.lang.String) -> a
    android.os.Bundle getSkuDetails(int,java.lang.String,java.lang.String,android.os.Bundle) -> a
    android.os.Bundle getBuyIntent(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    android.os.Bundle getPurchases(int,java.lang.String,java.lang.String,java.lang.String) -> a
    int consumePurchase(int,java.lang.String,java.lang.String) -> b
com.android.vending.billing.IInAppBillingService$Stub -> com.a.a.a.b:
    com.android.vending.billing.IInAppBillingService asInterface(android.os.IBinder) -> a
    boolean onTransact(int,android.os.Parcel,android.os.Parcel,int) -> onTransact
com.android.vending.billing.IInAppBillingService$Stub$Proxy -> com.a.a.a.c:
    android.os.IBinder mRemote -> a
    android.os.IBinder asBinder() -> asBinder
    int isBillingSupported(int,java.lang.String,java.lang.String) -> a
    android.os.Bundle getSkuDetails(int,java.lang.String,java.lang.String,android.os.Bundle) -> a
    android.os.Bundle getBuyIntent(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    android.os.Bundle getPurchases(int,java.lang.String,java.lang.String,java.lang.String) -> a
    int consumePurchase(int,java.lang.String,java.lang.String) -> b
com.example.android.util.Base64 -> com.b.a.a.a:
    byte[] ALPHABET -> b
    byte[] WEBSAFE_ALPHABET -> c
    byte[] DECODABET -> d
    byte[] WEBSAFE_DECODABET -> e
    boolean $assertionsDisabled -> a
    int decode4to3(byte[],int,byte[],int,byte[]) -> a
    byte[] decode(java.lang.String) -> a
    byte[] decode(byte[],int,int) -> a
    byte[] decode(byte[],int,int,byte[]) -> a
com.example.android.util.Base64DecoderException -> com.b.a.a.b:
com.example.android.util.IabException -> com.b.a.a.c:
    com.example.android.util.IabResult mResult -> a
    com.example.android.util.IabResult getResult() -> a
com.example.android.util.IabHelper -> com.b.a.a.d:
    boolean mDebugLog -> a
    java.lang.String mDebugTag -> b
    boolean mSetupDone -> c
    boolean mSubscriptionsSupported -> d
    boolean mAsyncInProgress -> e
    java.lang.String mAsyncOperation -> f
    android.content.Context mContext -> g
    com.android.vending.billing.IInAppBillingService mService -> h
    android.content.ServiceConnection mServiceConn -> i
    int mRequestCode -> j
    java.lang.String mPurchasingItemType -> k
    java.lang.String mSignatureBase64 -> l
    com.example.android.util.IabHelper$OnIabPurchaseFinishedListener mPurchaseListener -> m
    void enableDebugLogging(boolean) -> a
    void startSetup(com.example.android.util.IabHelper$OnIabSetupFinishedListener) -> a
    void dispose() -> a
    void launchPurchaseFlow(android.app.Activity,java.lang.String,int,com.example.android.util.IabHelper$OnIabPurchaseFinishedListener,java.lang.String) -> a
    void launchPurchaseFlow(android.app.Activity,java.lang.String,java.lang.String,int,com.example.android.util.IabHelper$OnIabPurchaseFinishedListener,java.lang.String) -> a
    boolean handleActivityResult(int,int,android.content.Intent) -> a
    com.example.android.util.Inventory queryInventory(boolean,java.util.List) -> a
    com.example.android.util.Inventory queryInventory(boolean,java.util.List,java.util.List) -> a
    void queryInventoryAsync(boolean,java.util.List,com.example.android.util.IabHelper$QueryInventoryFinishedListener) -> a
    void queryInventoryAsync(com.example.android.util.IabHelper$QueryInventoryFinishedListener) -> a
    java.lang.String getResponseDesc(int) -> a
    void checkSetupDone(java.lang.String) -> a
    int getResponseCodeFromBundle(android.os.Bundle) -> a
    int getResponseCodeFromIntent(android.content.Intent) -> a
    void flagStartAsync(java.lang.String) -> b
    void flagEndAsync() -> b
    int queryPurchases(com.example.android.util.Inventory,java.lang.String) -> a
    int querySkuDetails(java.lang.String,com.example.android.util.Inventory,java.util.List) -> a
    void logDebug(java.lang.String) -> c
    void logError(java.lang.String) -> d
    void logWarn(java.lang.String) -> e
com.example.android.util.IabHelper$1 -> com.b.a.a.e:
    com.example.android.util.IabHelper this$0 -> a
    com.example.android.util.IabHelper$OnIabSetupFinishedListener val$listener -> b
    void onServiceDisconnected(android.content.ComponentName) -> onServiceDisconnected
    void onServiceConnected(android.content.ComponentName,android.os.IBinder) -> onServiceConnected
com.example.android.util.IabHelper$2 -> com.b.a.a.f:
    com.example.android.util.IabHelper this$0 -> a
    boolean val$querySkuDetails -> b
    java.util.List val$moreSkus -> c
    android.os.Handler val$handler -> d
    com.example.android.util.IabHelper$QueryInventoryFinishedListener val$listener -> e
    void run() -> run
com.example.android.util.IabHelper$2$1 -> com.b.a.a.g:
    com.example.android.util.IabHelper$2 this$1 -> a
    com.example.android.util.IabHelper$QueryInventoryFinishedListener val$listener -> b
    com.example.android.util.IabResult val$result_f -> c
    com.example.android.util.Inventory val$inv_f -> d
    void run() -> run
com.example.android.util.IabHelper$OnConsumeFinishedListener -> com.b.a.a.h:
com.example.android.util.IabHelper$OnIabPurchaseFinishedListener -> com.b.a.a.i:
    void onIabPurchaseFinished(com.example.android.util.IabResult,com.example.android.util.Purchase) -> a
com.example.android.util.IabHelper$OnIabSetupFinishedListener -> com.b.a.a.j:
    void onIabSetupFinished(com.example.android.util.IabResult) -> a
com.example.android.util.IabHelper$QueryInventoryFinishedListener -> com.b.a.a.k:
    void onQueryInventoryFinished(com.example.android.util.IabResult,com.example.android.util.Inventory) -> a
com.example.android.util.IabResult -> com.b.a.a.l:
    int mResponse -> a
    java.lang.String mMessage -> b
    java.lang.String getMessage() -> a
    boolean isSuccess() -> b
    boolean isFailure() -> c
    java.lang.String toString() -> toString
com.example.android.util.Inventory -> com.b.a.a.m:
    java.util.Map mSkuMap -> a
    java.util.Map mPurchaseMap -> b
    com.example.android.util.Purchase getPurchase(java.lang.String) -> a
    java.util.List getAllOwnedSkus(java.lang.String) -> b
    void addSkuDetails(com.example.android.util.SkuDetails) -> a
    void addPurchase(com.example.android.util.Purchase) -> a
com.example.android.util.Purchase -> com.b.a.a.n:
    java.lang.String mItemType -> a
    java.lang.String mOrderId -> b
    java.lang.String mPackageName -> c
    java.lang.String mSku -> d
    long mPurchaseTime -> e
    int mPurchaseState -> f
    java.lang.String mDeveloperPayload -> g
    java.lang.String mToken -> h
    java.lang.String mOriginalJson -> i
    java.lang.String mSignature -> j
    java.lang.String getItemType() -> a
    java.lang.String getSku() -> b
    java.lang.String getToken() -> c
    java.lang.String toString() -> toString
com.example.android.util.Security -> com.b.a.a.o:
    boolean verifyPurchase(java.lang.String,java.lang.String,java.lang.String) -> a
    java.security.PublicKey generatePublicKey(java.lang.String) -> a
    boolean verify(java.security.PublicKey,java.lang.String,java.lang.String) -> a
com.example.android.util.SkuDetails -> com.b.a.a.p:
    java.lang.String mItemType -> a
    java.lang.String mSku -> b
    java.lang.String mType -> c
    java.lang.String mPrice -> d
    java.lang.String mTitle -> e
    java.lang.String mDescription -> f
    java.lang.String mJson -> g
    java.lang.String getSku() -> a
    java.lang.String toString() -> toString
com.google.ads.Ad -> com.google.ads.Ad:
com.google.ads.AdActivity -> com.google.ads.AdActivity:
    com.google.ads.internal.a a -> a
    java.lang.Object b -> b
    com.google.ads.AdActivity c -> c
    com.google.ads.internal.d d -> d
    com.google.ads.AdActivity e -> e
    com.google.ads.AdActivity f -> f
    com.google.ads.AdActivity$StaticMethodWrapper g -> g
    com.google.ads.internal.AdWebView h -> h
    android.widget.FrameLayout i -> i
    int j -> j
    android.view.ViewGroup k -> k
    boolean l -> l
    long m -> m
    android.widget.RelativeLayout n -> n
    com.google.ads.AdActivity o -> o
    boolean p -> p
    boolean q -> q
    boolean r -> r
    boolean s -> s
    com.google.ads.internal.AdVideoView t -> t
    android.view.View a(int,boolean) -> a
    void a(java.lang.String) -> a
    void a(java.lang.String,java.lang.Throwable) -> a
    com.google.ads.internal.AdVideoView getAdVideoView() -> a
    boolean isShowing() -> b
    boolean leftApplication() -> c
    void launchAdActivity(com.google.ads.internal.d,com.google.ads.internal.e) -> a
    void a(java.util.HashMap,com.google.ads.internal.d) -> a
    void a(com.google.ads.internal.d) -> a
    com.google.ads.internal.AdVideoView a(android.app.Activity) -> a
    void moveAdVideoView(int,int,int,int) -> a
    void newAdVideoView(int,int,int,int) -> b
    android.widget.RelativeLayout$LayoutParams a(int,int,int,int) -> c
    void onClick(android.view.View) -> onClick
    void onCreate(android.os.Bundle) -> onCreate
    void a(com.google.ads.internal.AdWebView,boolean,int,boolean,boolean) -> a
    void onDestroy() -> onDestroy
    void onPause() -> onPause
    void e() -> h
    void onWindowFocusChanged(boolean) -> onWindowFocusChanged
    void setCustomClose(boolean) -> a
    java.lang.Object a() -> d
    com.google.ads.AdActivity b() -> e
    com.google.ads.AdActivity c() -> f
    com.google.ads.internal.d d() -> g
    com.google.ads.internal.d b(com.google.ads.internal.d) -> b
com.google.ads.AdActivity$StaticMethodWrapper -> com.google.ads.AdActivity$StaticMethodWrapper:
    boolean isShowing() -> a
    boolean leftApplication() -> b
    void launchAdActivity(com.google.ads.internal.d,com.google.ads.internal.e) -> a
com.google.ads.AdListener -> com.google.ads.AdListener:
    void onReceiveAd(com.google.ads.Ad) -> a
    void onFailedToReceiveAd(com.google.ads.Ad,com.google.ads.AdRequest$ErrorCode) -> a
    void onPresentScreen(com.google.ads.Ad) -> b
    void onDismissScreen(com.google.ads.Ad) -> c
    void onLeaveApplication(com.google.ads.Ad) -> d
com.google.ads.AdRequest -> com.google.ads.AdRequest:
    java.text.SimpleDateFormat a -> b
    java.lang.reflect.Method b -> c
    java.lang.reflect.Method c -> d
    com.google.ads.AdRequest$Gender d -> e
    java.util.Date e -> f
    java.util.Set f -> g
    java.util.Map g -> h
    java.util.Map h -> i
    android.location.Location i -> j
    boolean j -> k
    boolean k -> l
    java.lang.String TEST_EMULATOR -> a
    java.util.Set l -> m
    com.google.ads.AdRequest setGender(com.google.ads.AdRequest$Gender) -> a
    com.google.ads.AdRequest$Gender getGender() -> a
    com.google.ads.AdRequest setBirthday(java.util.Date) -> a
    java.util.Date getBirthday() -> b
    com.google.ads.AdRequest setKeywords(java.util.Set) -> a
    java.util.Set getKeywords() -> c
    com.google.ads.AdRequest setNetworkExtras(com.google.ads.mediation.NetworkExtras) -> a
    java.lang.Object getNetworkExtras(java.lang.Class) -> a
    com.google.ads.AdRequest setLocation(android.location.Location) -> a
    android.location.Location getLocation() -> d
    java.util.Map getRequestMap(android.content.Context) -> a
    com.google.ads.AdRequest addTestDevice(java.lang.String) -> a
    boolean isTestDevice(android.content.Context) -> b
com.google.ads.AdRequest$ErrorCode -> com.google.ads.AdRequest$ErrorCode:
    com.google.ads.AdRequest$ErrorCode INVALID_REQUEST -> a
    com.google.ads.AdRequest$ErrorCode NO_FILL -> b
    com.google.ads.AdRequest$ErrorCode NETWORK_ERROR -> c
    com.google.ads.AdRequest$ErrorCode INTERNAL_ERROR -> d
    java.lang.String a -> e
    com.google.ads.AdRequest$ErrorCode[] b -> f
    com.google.ads.AdRequest$ErrorCode[] values() -> values
    com.google.ads.AdRequest$ErrorCode valueOf(java.lang.String) -> valueOf
    java.lang.String toString() -> toString
com.google.ads.AdRequest$Gender -> com.google.ads.AdRequest$Gender:
    com.google.ads.AdRequest$Gender UNKNOWN -> a
    com.google.ads.AdRequest$Gender MALE -> b
    com.google.ads.AdRequest$Gender FEMALE -> c
    com.google.ads.AdRequest$Gender[] a -> d
    com.google.ads.AdRequest$Gender[] values() -> values
    com.google.ads.AdRequest$Gender valueOf(java.lang.String) -> valueOf
com.google.ads.AdSize -> com.google.ads.AdSize:
    com.google.ads.AdSize SMART_BANNER -> a
    com.google.ads.AdSize BANNER -> b
    com.google.ads.AdSize IAB_MRECT -> c
    com.google.ads.AdSize IAB_BANNER -> d
    com.google.ads.AdSize IAB_LEADERBOARD -> e
    com.google.ads.AdSize IAB_WIDE_SKYSCRAPER -> f
    int a -> g
    int b -> h
    boolean c -> i
    boolean d -> j
    boolean e -> k
    java.lang.String f -> l
    com.google.ads.AdSize createAdSize(com.google.ads.AdSize,android.content.Context) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    int getWidth() -> a
    int getHeight() -> b
    boolean a() -> f
    boolean isFullWidth() -> c
    boolean isAutoHeight() -> d
    boolean isCustomAdSize() -> e
    java.lang.String toString() -> toString
    boolean isSizeAppropriate(int,int) -> a
    com.google.ads.AdSize findBestSize(com.google.ads.AdSize[]) -> a
    int a(android.content.Context) -> a
    int b(android.content.Context) -> b
com.google.ads.AdView -> com.google.ads.AdView:
    com.google.ads.internal.d a -> a
    com.google.ads.internal.a b -> b
    void a(android.content.Context,java.lang.String,int,com.google.ads.AdSize,android.util.AttributeSet) -> a
    boolean a(android.content.Context,com.google.ads.AdSize,android.util.AttributeSet) -> a
    boolean b(android.content.Context,com.google.ads.AdSize,android.util.AttributeSet) -> b
    void destroy() -> a
    void a(android.content.Context,java.lang.String,com.google.ads.AdSize,android.util.AttributeSet) -> a
    void a(android.app.Activity,com.google.ads.AdSize,java.lang.String) -> a
    boolean isRefreshing() -> b
    void loadAd(com.google.ads.AdRequest) -> a
    void setAdListener(com.google.ads.AdListener) -> setAdListener
    void setAppEventListener(com.google.ads.AppEventListener) -> setAppEventListener
    void setSwipeableEventListener(com.google.ads.SwipeableAdListener) -> setSwipeableEventListener
    void setSupportedAdSizes(com.google.ads.AdSize[]) -> setSupportedAdSizes
    void a(com.google.ads.AdSize[]) -> a
    void onMeasure(int,int) -> onMeasure
    void stopLoading() -> c
    void onWindowVisibilityChanged(int) -> onWindowVisibilityChanged
com.google.ads.AppEventListener -> com.google.ads.AppEventListener:
    void onAppEvent(com.google.ads.Ad,java.lang.String,java.lang.String) -> a
com.google.ads.InterstitialAd -> com.google.ads.InterstitialAd:
    com.google.ads.internal.d a -> a
    void loadAd(com.google.ads.AdRequest) -> a
    void show() -> a
    void setAdListener(com.google.ads.AdListener) -> a
    void stopLoading() -> b
com.google.ads.SwipeableAdListener -> com.google.ads.SwipeableAdListener:
    void onAdActivated(com.google.ads.Ad) -> a
    void onAdDeactivated(com.google.ads.Ad) -> b
com.google.ads.a -> com.google.ads.a:
    java.lang.String a -> a
    java.lang.String b -> b
    java.util.List c -> c
    java.util.List d -> d
    java.util.HashMap e -> e
    java.lang.String a() -> a
    java.lang.String b() -> b
    java.util.List c() -> c
    java.util.List d() -> d
    java.util.HashMap e() -> e
com.google.ads.aa -> com.google.ads.aa:
    void a(com.google.ads.internal.d,java.util.HashMap,android.webkit.WebView) -> a
com.google.ads.ab -> com.google.ads.ab:
    void a(com.google.ads.internal.d,java.util.HashMap,android.webkit.WebView) -> a
com.google.ads.ac -> com.google.ads.ac:
    com.google.ads.internal.a a -> a
    int a(java.util.HashMap,java.lang.String,int,android.util.DisplayMetrics) -> a
    void a(com.google.ads.internal.d,java.util.HashMap,android.webkit.WebView) -> a
com.google.ads.ae -> com.google.ads.ae:
    android.content.Context a -> a
    java.lang.String b -> b
    java.net.HttpURLConnection a(java.net.URL) -> a
    void run() -> run
com.google.ads.af -> com.google.ads.af:
    java.lang.ref.WeakReference a -> a
    void run() -> run
com.google.ads.ag -> com.google.ads.ag:
    int a -> a
    int b -> b
    int c -> c
    int d -> d
    int e -> e
    int f -> f
    int g -> g
    int h -> h
    int i -> i
    int j -> j
    int k -> k
    int l -> l
    int m -> m
    int n -> n
    int o -> o
    int p -> p
    int q -> q
    int r -> r
    int s -> s
    int t -> t
    int u -> u
    int v -> v
    int w -> w
    int x -> x
    int y -> y
    int z -> z
    int A -> A
    int B -> B
    int C -> C
    int D -> D
    int E -> E
    int F -> F
    int G -> G
    int H -> H
    int I -> I
    int J -> J
    int K -> K
    int L -> L
    int M -> M
    int N -> N
    int O -> O
    int P -> P
    int Q -> Q
    int R -> R
    int S -> S
    int T -> T
    int U -> U
    int V -> V
    int W -> W
    int X -> X
    int Y -> Y
    int Z -> Z
    int aa -> aa
    int ab -> ab
    int ac -> ac
    int ad -> ad
    int ae -> ae
    int af -> af
    int ag -> ag
    int ah -> ah
    int ai -> ai
    int aj -> aj
    int ak -> ak
    int al -> al
    int am -> am
    int an -> an
    int ao -> ao
    int ap -> ap
    int aq -> aq
    int ar -> ar
    int as -> as
    int at -> at
    int au -> au
    int av -> av
    int aw -> aw
    int ax -> ax
    int ay -> ay
    int az -> az
    int aA -> aA
    int aB -> aB
    int aC -> aC
    int aD -> aD
    int aE -> aE
    int aF -> aF
    int aG -> aG
    int aH -> aH
    int aI -> aI
    int aJ -> aJ
    int aK -> aK
    int aL -> aL
    int aM -> aM
    int aN -> aN
    int aO -> aO
    int aP -> aP
    int aQ -> aQ
    int aR -> aR
    int aS -> aS
    int aT -> aT
    int aU -> aU
    int aV -> aV
    int aW -> aW
    int aX -> aX
    int aY -> aY
    int aZ -> aZ
    int ba -> ba
    int bb -> bb
    int bc -> bc
    int bd -> bd
    int be -> be
    int bf -> bf
    int bg -> bg
    int bh -> bh
    int bi -> bi
    int bj -> bj
    int bk -> bk
    int bl -> bl
    int bm -> bm
    int bn -> bn
    int bo -> bo
    int bp -> bp
    int bq -> bq
    int br -> br
    int bs -> bs
    int bt -> bt
    int bu -> bu
    int bv -> bv
    int bw -> bw
    int bx -> bx
    int by -> by
    int bz -> bz
    int bA -> bA
    int bB -> bB
    int bC -> bC
    int bD -> bD
    int bE -> bE
    int bF -> bF
    int bG -> bG
    int bH -> bH
    int bI -> bI
    int bJ -> bJ
    int bK -> bK
    int bL -> bL
    int bM -> bM
    int bN -> bN
    int bO -> bO
    int bP -> bP
    int bQ -> bQ
    int bR -> bR
    int bS -> bS
    int bT -> bT
    int bU -> bU
    int bV -> bV
    int bW -> bW
    int bX -> bX
    int bY -> bY
    int bZ -> bZ
    int ca -> ca
    int cb -> cb
    int cc -> cc
    int cd -> cd
    int ce -> ce
    int cf -> cf
    int cg -> cg
    int ch -> ch
    int ci -> ci
    int cj -> cj
    int ck -> ck
    int cl -> cl
    int cm -> cm
    int cn -> cn
    int co -> co
    int cp -> cp
    int cq -> cq
    int cr -> cr
    int cs -> cs
    int ct -> ct
    int cu -> cu
    int cv -> cv
    int cw -> cw
    int cx -> cx
    int cy -> cy
    int cz -> cz
    int cA -> cA
    int cB -> cB
    int cC -> cC
    int cD -> cD
    int cE -> cE
    int cF -> cF
    int cG -> cG
    int cH -> cH
    int cI -> cI
    int cJ -> cJ
    int cK -> cK
    int cL -> cL
    int cM -> cM
    com.google.ads.ag$a[] cN -> cN
    void a(byte[],byte[]) -> a
com.google.ads.ag$1 -> com.google.ads.ag$1:
com.google.ads.ag$a -> com.google.ads.ag$a:
    void a(byte[],byte[]) -> a
com.google.ads.ag$b -> com.google.ads.ag$b:
    com.google.ads.ag a -> a
    void a(byte[],byte[]) -> a
com.google.ads.ag$c -> com.google.ads.ag$c:
    com.google.ads.ag a -> a
    void a(byte[],byte[]) -> a
com.google.ads.ag$d -> com.google.ads.ag$d:
    com.google.ads.ag a -> a
    void a(byte[],byte[]) -> a
com.google.ads.ag$e -> com.google.ads.ag$e:
    com.google.ads.ag a -> a
    void a(byte[],byte[]) -> a
com.google.ads.ag$f -> com.google.ads.ag$f:
    com.google.ads.ag a -> a
    void a(byte[],byte[]) -> a
com.google.ads.ag$g -> com.google.ads.ag$g:
    com.google.ads.ag a -> a
    void a(byte[],byte[]) -> a
com.google.ads.ag$h -> com.google.ads.ag$h:
    com.google.ads.ag a -> a
    void a(byte[],byte[]) -> a
com.google.ads.ag$i -> com.google.ads.ag$i:
    com.google.ads.ag a -> a
    void a(byte[],byte[]) -> a
com.google.ads.ag$j -> com.google.ads.ag$j:
    com.google.ads.ag a -> a
    void a(byte[],byte[]) -> a
com.google.ads.ag$k -> com.google.ads.ag$k:
    com.google.ads.ag a -> a
    void a(byte[],byte[]) -> a
com.google.ads.ag$l -> com.google.ads.ag$l:
    com.google.ads.ag a -> a
    void a(byte[],byte[]) -> a
com.google.ads.ag$m -> com.google.ads.ag$m:
    com.google.ads.ag a -> a
    void a(byte[],byte[]) -> a
com.google.ads.ah -> com.google.ads.ah:
    java.lang.String[] a -> a
com.google.ads.ai -> com.google.ads.ai:
    java.lang.String a(android.content.Context) -> a
    java.lang.String a(android.content.Context,java.lang.String) -> a
com.google.ads.aj -> com.google.ads.aj:
    com.google.ads.au c -> c
    java.io.ByteArrayOutputStream d -> d
    android.view.MotionEvent a -> a
    android.util.DisplayMetrics b -> b
    void b(android.content.Context) -> b
    void c(android.content.Context) -> c
    java.lang.String a(android.content.Context) -> a
    java.lang.String a(android.content.Context,java.lang.String) -> a
    void a(android.view.MotionEvent) -> a
    void a(int,int,int) -> a
    java.lang.String a(android.content.Context,java.lang.String,boolean) -> a
    void a(int,long) -> a
    void a(int,java.lang.String) -> a
    void a() -> a
    byte[] b() -> b
    java.lang.String a(byte[],java.lang.String) -> a
    void a(java.lang.String,byte[]) -> a
com.google.ads.ak -> com.google.ads.ak:
    java.lang.reflect.Method d -> d
    java.lang.reflect.Method e -> e
    java.lang.reflect.Method f -> f
    java.lang.reflect.Method g -> g
    java.lang.reflect.Method h -> h
    java.lang.String i -> i
    long j -> j
    boolean c -> c
    com.google.ads.ak a(java.lang.String,android.content.Context) -> a
    void b(java.lang.String,android.content.Context) -> b
    void b(android.content.Context) -> b
    void c(android.content.Context) -> c
    java.lang.String a() -> a
    java.lang.Long b() -> b
    java.lang.String d(android.content.Context) -> d
    java.lang.String c() -> c
    java.util.ArrayList a(android.view.MotionEvent,android.util.DisplayMetrics) -> a
    java.lang.String e(android.content.Context) -> e
    java.lang.String b(byte[],java.lang.String) -> b
    void f(android.content.Context) -> f
com.google.ads.ak$a -> com.google.ads.ak$a:
com.google.ads.al -> com.google.ads.al:
    java.lang.String a -> a
    java.lang.String b -> b
    java.lang.String[] c -> c
    com.google.ads.ai d -> d
    com.google.ads.ah e -> e
    boolean a(android.net.Uri) -> a
    void a(java.lang.String) -> a
    android.net.Uri a(android.net.Uri,android.content.Context) -> a
    android.net.Uri a(android.net.Uri,java.lang.String,java.lang.String) -> a
    android.net.Uri a(android.net.Uri,android.content.Context,java.lang.String,boolean) -> a
com.google.ads.am -> com.google.ads.am:
com.google.ads.an -> com.google.ads.an:
    void a(byte[]) -> a
    byte[] a(java.lang.String) -> a
    byte[] a(byte[],java.lang.String) -> a
com.google.ads.an$a -> com.google.ads.an$a:
com.google.ads.ao -> com.google.ads.ao:
    java.lang.String a() -> a
    java.lang.String b() -> b
    java.lang.String c() -> c
    java.lang.String d() -> d
    java.lang.String e() -> e
    java.lang.String f() -> f
    java.lang.String g() -> g
    java.lang.String h() -> h
    java.lang.String i() -> i
    java.lang.String j() -> j
    java.lang.String k() -> k
    java.lang.String l() -> l
com.google.ads.ap -> com.google.ads.ap:
com.google.ads.aq -> com.google.ads.aq:
    char[] a -> a
    char[] b -> b
    byte[] c -> c
    byte[] d -> d
    char[] a(byte[],int,int,char[],int,char[]) -> a
    java.lang.String a(byte[],boolean) -> a
    java.lang.String a(byte[],int,int,char[],boolean) -> a
    char[] a(byte[],int,int,char[],int) -> a
    int a(char[],int,byte[],int,byte[]) -> a
    byte[] a(java.lang.String) -> a
    byte[] a(char[],int,int) -> a
    byte[] a(char[],int,int,byte[]) -> a
com.google.ads.ar -> com.google.ads.ar:
    byte[] a -> a
    int b -> b
    int c -> c
    void a(byte[]) -> a
com.google.ads.as -> com.google.ads.as:
    android.net.Uri a -> a
    java.lang.String[] b -> b
com.google.ads.at -> com.google.ads.at:
    com.google.ads.internal.a a -> a
    boolean a(android.content.Context,long) -> a
    boolean a(android.content.Context,long,android.content.SharedPreferences) -> a
    void a(android.app.Activity) -> a
com.google.ads.at$1 -> com.google.ads.at$1:
    android.content.Context a -> a
    void run() -> run
com.google.ads.at$a -> com.google.ads.at$a:
    java.lang.ref.WeakReference a -> a
    android.content.SharedPreferences$Editor b -> b
    android.content.SharedPreferences$Editor a(android.content.Context) -> a
    void run() -> run
com.google.ads.au -> com.google.ads.au:
    byte[] a -> a
    int b -> b
    int c -> c
    int d -> d
    java.io.OutputStream e -> e
    com.google.ads.au a(java.io.OutputStream) -> a
    com.google.ads.au a(java.io.OutputStream,int) -> a
    void a(int,long) -> a
    void a(int,java.lang.String) -> a
    void a(long) -> a
    void a(java.lang.String) -> a
    void b() -> b
    void a() -> a
    void a(byte) -> a
    void a(int) -> a
    void a(byte[]) -> a
    void a(byte[],int,int) -> a
    void a(int,int) -> a
    void b(int) -> b
    void b(long) -> b
com.google.ads.au$a -> com.google.ads.au$a:
com.google.ads.av -> com.google.ads.av:
    int a -> a
    int b -> b
    int c -> c
    int d -> d
    int a(int,int) -> a
com.google.ads.b -> com.google.ads.b:
    java.math.BigInteger a -> a
    java.math.BigInteger b -> b
    com.google.ads.b c -> c
    com.google.ads.b a() -> a
    java.math.BigInteger b() -> b
    java.math.BigInteger c() -> c
    java.math.BigInteger d() -> d
    byte[] a(long) -> a
com.google.ads.c -> com.google.ads.c:
    java.util.Map a -> a
    java.lang.String b -> b
    java.lang.String c -> c
    java.util.List d -> d
    java.lang.Integer e -> e
    java.lang.Integer f -> f
    java.util.List g -> g
    java.util.List h -> h
    java.util.List i -> i
    com.google.ads.c a(java.lang.String) -> a
    boolean a() -> a
    int b() -> b
    java.lang.String c() -> c
    boolean d() -> d
    int e() -> e
    java.util.List f() -> f
    java.util.List g() -> g
    java.util.List h() -> h
    java.util.List i() -> i
    com.google.ads.a a(org.json.JSONObject) -> a
    com.google.ads.internal.h j() -> j
    java.util.List a(org.json.JSONObject,java.lang.String) -> a
com.google.ads.c$1 -> com.google.ads.c$1:
com.google.ads.d -> com.google.ads.d:
    com.google.ads.c a -> a
    long b -> b
    boolean a() -> a
    void a(com.google.ads.c,int) -> a
    com.google.ads.c b() -> b
com.google.ads.doubleclick.DfpAdView -> com.google.ads.doubleclick.DfpAdView:
    void setAppEventListener(com.google.ads.AppEventListener) -> setAppEventListener
    void setSupportedAdSizes(com.google.ads.AdSize[]) -> setSupportedAdSizes
com.google.ads.doubleclick.DfpExtras -> com.google.ads.doubleclick.DfpExtras:
    java.lang.String a -> a
    java.lang.String getPublisherProvidedId() -> a
    com.google.ads.doubleclick.DfpExtras clearExtras() -> b
    com.google.ads.doubleclick.DfpExtras addExtra(java.lang.String,java.lang.Object) -> a
    com.google.ads.mediation.admob.AdMobAdapterExtras addExtra(java.lang.String,java.lang.Object) -> b
    com.google.ads.mediation.admob.AdMobAdapterExtras clearExtras() -> c
com.google.ads.doubleclick.DfpInterstitialAd -> com.google.ads.doubleclick.DfpInterstitialAd:
com.google.ads.doubleclick.SwipeableDfpAdView -> com.google.ads.doubleclick.SwipeableDfpAdView:
    void setSwipeableEventListener(com.google.ads.SwipeableAdListener) -> setSwipeableEventListener
com.google.ads.e -> com.google.ads.e:
    com.google.ads.internal.d a -> a
    com.google.ads.h b -> b
    java.lang.Object c -> c
    java.lang.Thread d -> d
    java.lang.Object e -> e
    boolean f -> f
    java.lang.Object g -> g
    boolean a() -> a
    void b() -> b
    void a(com.google.ads.c,com.google.ads.AdRequest) -> a
    boolean a(com.google.ads.c,com.google.ads.internal.d) -> a
    boolean a(com.google.ads.h,java.lang.String) -> a
    void a(com.google.ads.h,boolean) -> a
    void a(com.google.ads.h,android.view.View) -> a
    void a(com.google.ads.h) -> a
    void b(com.google.ads.h) -> b
    void c(com.google.ads.h) -> c
    boolean c() -> c
    boolean d() -> d
    void b(com.google.ads.c,com.google.ads.AdRequest) -> b
    boolean a(java.lang.String,android.app.Activity,com.google.ads.AdRequest,com.google.ads.f,java.util.HashMap,long) -> a
    boolean e(com.google.ads.h) -> e
    com.google.ads.h e() -> e
    void d(com.google.ads.h) -> d
    void a(com.google.ads.e,com.google.ads.c,com.google.ads.AdRequest) -> a
    java.lang.Object a(com.google.ads.e) -> a
    java.lang.Thread a(com.google.ads.e,java.lang.Thread) -> a
    com.google.ads.internal.d b(com.google.ads.e) -> b
    com.google.ads.h c(com.google.ads.e) -> c
    boolean a(com.google.ads.e,com.google.ads.h) -> a
com.google.ads.e$1 -> com.google.ads.e$1:
    com.google.ads.c a -> a
    com.google.ads.AdRequest b -> b
    com.google.ads.e c -> c
    void run() -> run
com.google.ads.e$2 -> com.google.ads.e$2:
    com.google.ads.f a -> a
    boolean b -> b
    com.google.ads.e c -> c
    void run() -> run
com.google.ads.e$3 -> com.google.ads.e$3:
    android.view.View a -> a
    com.google.ads.f b -> b
    com.google.ads.e c -> c
    void run() -> run
com.google.ads.e$4 -> com.google.ads.e$4:
    com.google.ads.e a -> a
    void run() -> run
com.google.ads.e$5 -> com.google.ads.e$5:
    com.google.ads.e a -> a
    void run() -> run
com.google.ads.e$6 -> com.google.ads.e$6:
    com.google.ads.e a -> a
    void run() -> run
com.google.ads.e$7 -> com.google.ads.e$7:
    com.google.ads.c a -> a
    com.google.ads.e b -> b
    void run() -> run
com.google.ads.e$8 -> com.google.ads.e$8:
    com.google.ads.h a -> a
    android.view.View b -> b
    com.google.ads.f c -> c
    com.google.ads.e d -> d
    void run() -> run
com.google.ads.f -> com.google.ads.f:
    java.lang.String a -> a
    java.lang.String b -> b
    java.lang.String c -> c
    java.util.List d -> d
    java.util.List e -> e
    java.util.List f -> f
    java.lang.String a() -> a
    java.lang.String b() -> b
    java.lang.String c() -> c
    java.util.List d() -> d
    java.util.List e() -> e
com.google.ads.g -> com.google.ads.g:
    java.lang.String a(java.lang.String,java.lang.String,java.lang.Boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    java.lang.Object a(java.lang.String,java.lang.Class) -> a
com.google.ads.g$a -> com.google.ads.g$a:
    com.google.ads.g$a a -> a
    com.google.ads.g$a b -> b
    com.google.ads.g$a c -> c
    com.google.ads.g$a d -> d
    com.google.ads.g$a e -> e
    com.google.ads.g$a f -> f
    com.google.ads.g$a[] g -> g
    com.google.ads.g$a[] values() -> values
    com.google.ads.g$a valueOf(java.lang.String) -> valueOf
com.google.ads.h -> com.google.ads.h:
    com.google.ads.internal.h a -> a
    com.google.ads.f b -> b
    boolean c -> c
    boolean d -> d
    com.google.ads.g$a e -> e
    com.google.ads.e f -> f
    com.google.ads.mediation.MediationAdapter g -> g
    boolean h -> h
    boolean i -> i
    android.view.View j -> j
    java.lang.String k -> k
    com.google.ads.AdRequest l -> l
    java.util.HashMap m -> m
    com.google.ads.f a() -> a
    void a(android.app.Activity) -> a
    void b() -> b
    boolean c() -> c
    boolean d() -> d
    com.google.ads.g$a e() -> e
    android.view.View f() -> f
    void g() -> g
    java.lang.String h() -> h
    void a(boolean,com.google.ads.g$a) -> a
    void a(com.google.ads.mediation.MediationAdapter) -> a
    com.google.ads.mediation.MediationAdapter i() -> i
    com.google.ads.e j() -> j
    void a(android.view.View) -> a
    void k() -> k
    boolean l() -> l
    com.google.ads.mediation.MediationAdapter a(com.google.ads.h) -> a
com.google.ads.h$1 -> com.google.ads.h$1:
    com.google.ads.h a -> a
    void run() -> run
com.google.ads.h$2 -> com.google.ads.h$2:
    com.google.ads.mediation.MediationInterstitialAdapter a -> a
    com.google.ads.h b -> b
    void run() -> run
com.google.ads.i -> com.google.ads.i:
    com.google.ads.h a -> a
    java.lang.String b -> b
    com.google.ads.AdRequest c -> c
    java.util.HashMap d -> d
    boolean e -> e
    java.lang.ref.WeakReference f -> f
    boolean a(java.util.Map) -> a
    void run() -> run
    void a(java.lang.String,java.lang.Throwable,com.google.ads.g$a) -> a
    void a(com.google.ads.mediation.MediationAdapter) -> a
com.google.ads.i$a -> com.google.ads.i$a:
com.google.ads.internal.ActivationOverlay -> com.google.ads.internal.ActivationOverlay:
    boolean b -> b
    boolean c -> c
    int d -> d
    int e -> e
    com.google.ads.internal.i f -> f
    void setOverlayEnabled(boolean) -> setOverlayEnabled
    void setOverlayActivated(boolean) -> setOverlayActivated
    boolean a() -> a
    boolean b() -> b
    int c() -> c
    void setYPosition(int) -> setYPosition
    int d() -> d
    void setXPosition(int) -> setXPosition
    com.google.ads.internal.i e() -> e
    boolean canScrollHorizontally(int) -> canScrollHorizontally
    boolean canScrollVertically(int) -> canScrollVertically
com.google.ads.internal.ActivationOverlay$1 -> com.google.ads.internal.ActivationOverlay$1:
    com.google.ads.internal.ActivationOverlay a -> a
    com.google.ads.internal.ActivationOverlay b -> b
    void run() -> run
com.google.ads.internal.AdVideoView -> com.google.ads.internal.AdVideoView:
    com.google.ads.internal.a b -> b
    java.lang.ref.WeakReference c -> c
    com.google.ads.internal.AdWebView d -> d
    android.widget.MediaController a -> a
    long e -> e
    android.widget.VideoView f -> f
    java.lang.String g -> g
    void a() -> a
    void b() -> b
    void setMediaControllerEnabled(boolean) -> setMediaControllerEnabled
    void setSrc(java.lang.String) -> setSrc
    void onCompletion(android.media.MediaPlayer) -> onCompletion
    boolean onError(android.media.MediaPlayer,int,int) -> onError
    void onPrepared(android.media.MediaPlayer) -> onPrepared
    void c() -> c
    void d() -> d
    void a(int) -> a
    void a(android.view.MotionEvent) -> a
    void e() -> e
    void f() -> f
com.google.ads.internal.AdVideoView$a -> com.google.ads.internal.AdVideoView$a:
    java.lang.ref.WeakReference a -> a
    void run() -> run
    void a() -> a
com.google.ads.internal.AdWebView -> com.google.ads.internal.AdWebView:
    java.lang.ref.WeakReference b -> b
    com.google.ads.AdSize c -> c
    boolean d -> d
    boolean e -> e
    boolean f -> f
    com.google.ads.n a -> a
    void f() -> f
    void g() -> g
    void h() -> h
    com.google.ads.AdActivity i() -> i
    boolean j() -> j
    boolean k() -> k
    void setAdActivity(com.google.ads.AdActivity) -> setAdActivity
    void loadDataWithBaseURL(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> loadDataWithBaseURL
    void loadUrl(java.lang.String) -> loadUrl
    void stopLoading() -> stopLoading
    void destroy() -> destroy
    void setAdSize(com.google.ads.AdSize) -> setAdSize
    void onMeasure(int,int) -> onMeasure
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void setCustomClose(boolean) -> setCustomClose
    void setIsExpandedMraid(boolean) -> setIsExpandedMraid
    void a(boolean) -> a
com.google.ads.internal.AdWebView$1 -> com.google.ads.internal.AdWebView$1:
    com.google.ads.internal.AdWebView a -> a
    void onDownloadStart(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long) -> onDownloadStart
com.google.ads.internal.AdWebView$2 -> com.google.ads.internal.AdWebView$2:
    com.google.ads.internal.AdWebView a -> a
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.google.ads.internal.a -> com.google.ads.internal.a:
    com.google.ads.internal.a e -> e
    com.google.ads.util.f a -> a
    java.util.Map b -> b
    java.util.Map c -> c
    java.util.Map d -> d
    java.lang.String a(android.net.Uri,java.util.HashMap) -> a
    void a(com.google.ads.internal.d,java.util.Map,android.net.Uri,android.webkit.WebView) -> a
    boolean a(android.net.Uri) -> a
    boolean b(android.net.Uri) -> b
    boolean c(android.net.Uri) -> c
    void a(android.webkit.WebView,java.lang.String,java.lang.String) -> a
    void a(android.webkit.WebView,java.lang.String) -> a
    void a(android.webkit.WebView,java.util.Map) -> a
    void a(android.webkit.WebView) -> a
    void b(android.webkit.WebView) -> b
    com.google.ads.internal.a a() -> a
com.google.ads.internal.a$1 -> com.google.ads.internal.a$1:
com.google.ads.internal.a$2 -> com.google.ads.internal.a$2:
    com.google.ads.internal.a a() -> a
    java.lang.Object b() -> b
com.google.ads.internal.a$3 -> com.google.ads.internal.a$3:
com.google.ads.internal.a$4 -> com.google.ads.internal.a$4:
com.google.ads.internal.b -> com.google.ads.internal.b:
    boolean a -> a
    void a(java.lang.String) -> a
    java.lang.String c(java.lang.String) -> b
com.google.ads.internal.c -> com.google.ads.internal.c:
    java.lang.String b -> b
    java.lang.String c -> c
    java.lang.String d -> d
    java.lang.String e -> e
    boolean f -> f
    com.google.ads.internal.f g -> g
    com.google.ads.AdRequest h -> h
    android.webkit.WebView i -> i
    com.google.ads.l j -> j
    java.lang.String k -> k
    java.lang.String l -> l
    java.util.LinkedList m -> m
    java.lang.String n -> n
    com.google.ads.AdSize o -> o
    boolean p -> p
    boolean q -> q
    boolean r -> r
    com.google.ads.AdRequest$ErrorCode s -> s
    boolean t -> t
    int u -> u
    java.lang.Thread v -> v
    boolean w -> w
    com.google.ads.internal.c$d x -> x
    boolean a -> a
    void a(boolean) -> a
    void a(java.lang.String) -> a
    void a() -> a
    void a(com.google.ads.AdRequest) -> a
    void run() -> run
    void b() -> b
    void a(java.lang.String,com.google.ads.c,com.google.ads.d) -> a
    java.lang.String a(java.util.Map,android.app.Activity) -> a
    java.lang.String d() -> d
    java.lang.String e() -> e
    java.lang.String f() -> f
    java.lang.String g() -> g
    java.lang.String h() -> h
    void a(com.google.ads.AdRequest$ErrorCode,boolean) -> a
    void b(java.lang.String,java.lang.String) -> b
    void i() -> i
    void j() -> j
    void b(boolean) -> b
    void b(java.lang.String) -> b
    void a(java.lang.String,java.lang.String) -> a
    void c(java.lang.String) -> c
    void d(java.lang.String) -> d
    void e(java.lang.String) -> e
    void f(java.lang.String) -> f
    void a(com.google.ads.AdSize) -> a
    void a(com.google.ads.AdRequest$ErrorCode) -> a
    void c() -> c
    void c(boolean) -> c
    void a(int) -> a
    void d(boolean) -> d
    void a(com.google.ads.internal.c$d) -> a
    void e(boolean) -> e
    boolean a(com.google.ads.internal.c) -> a
    com.google.ads.l b(com.google.ads.internal.c) -> b
    java.lang.String c(com.google.ads.internal.c) -> c
    android.webkit.WebView d(com.google.ads.internal.c) -> d
    java.lang.String e(com.google.ads.internal.c) -> e
    com.google.ads.AdSize f(com.google.ads.internal.c) -> f
com.google.ads.internal.c$1 -> com.google.ads.internal.c$1:
    com.google.ads.internal.c a -> a
    void run() -> run
com.google.ads.internal.c$2 -> com.google.ads.internal.c$2:
    com.google.ads.c a -> a
    com.google.ads.internal.c b -> b
    void run() -> run
com.google.ads.internal.c$3 -> com.google.ads.internal.c$3:
    int[] a -> a
com.google.ads.internal.c$a -> com.google.ads.internal.c$a:
    com.google.ads.internal.d a -> a
    android.webkit.WebView b -> b
    com.google.ads.internal.f c -> c
    com.google.ads.AdRequest$ErrorCode d -> d
    boolean e -> e
    void run() -> run
com.google.ads.internal.c$b -> com.google.ads.internal.c$b:
    com.google.ads.internal.c a -> a
com.google.ads.internal.c$c -> com.google.ads.internal.c$c:
    java.lang.String b -> b
    java.lang.String c -> c
    android.webkit.WebView d -> d
    com.google.ads.internal.c a -> a
    void run() -> run
com.google.ads.internal.c$d -> com.google.ads.internal.c$d:
    com.google.ads.internal.c$d a -> a
    com.google.ads.internal.c$d b -> b
    com.google.ads.internal.c$d c -> c
    com.google.ads.internal.c$d d -> d
    java.lang.String e -> e
    com.google.ads.internal.c$d[] f -> f
    com.google.ads.internal.c$d[] values() -> values
    com.google.ads.internal.c$d valueOf(java.lang.String) -> valueOf
com.google.ads.internal.c$e -> com.google.ads.internal.c$e:
    com.google.ads.internal.d b -> b
    android.webkit.WebView c -> c
    java.util.LinkedList d -> d
    int e -> e
    boolean f -> f
    java.lang.String g -> g
    com.google.ads.AdSize h -> h
    com.google.ads.internal.c a -> a
    void run() -> run
com.google.ads.internal.d -> com.google.ads.internal.d:
    java.lang.Object a -> a
    com.google.ads.n b -> b
    com.google.ads.internal.c c -> c
    com.google.ads.AdRequest d -> d
    com.google.ads.internal.g e -> e
    com.google.ads.internal.AdWebView f -> f
    com.google.ads.internal.i g -> g
    boolean h -> h
    long i -> i
    boolean j -> j
    boolean k -> k
    boolean l -> l
    boolean m -> m
    boolean n -> n
    android.content.SharedPreferences o -> o
    long p -> p
    com.google.ads.af q -> q
    boolean r -> r
    java.util.LinkedList s -> s
    java.util.LinkedList t -> t
    java.util.LinkedList u -> u
    int v -> v
    java.lang.Boolean w -> w
    com.google.ads.d x -> x
    com.google.ads.e y -> y
    com.google.ads.f z -> z
    java.lang.String A -> A
    java.lang.String B -> B
    void a() -> a
    void b() -> b
    void a(java.lang.String) -> a
    java.lang.String c() -> c
    java.lang.String d() -> d
    void e() -> e
    void f() -> f
    void g() -> g
    void h() -> h
    com.google.ads.n i() -> i
    com.google.ads.d j() -> j
    com.google.ads.internal.c k() -> k
    com.google.ads.internal.AdWebView l() -> l
    com.google.ads.internal.i m() -> m
    com.google.ads.internal.g n() -> n
    void a(int) -> a
    int o() -> o
    long p() -> p
    boolean q() -> q
    boolean r() -> r
    boolean t() -> s
    void a(com.google.ads.AdRequest) -> a
    void a(com.google.ads.AdRequest$ErrorCode) -> a
    void a(com.google.ads.c) -> a
    void a(android.view.View,com.google.ads.h,com.google.ads.f,boolean) -> a
    void a(com.google.ads.f,boolean) -> a
    void b(com.google.ads.c) -> b
    void u() -> t
    void v() -> u
    void w() -> v
    void a(java.lang.String,java.lang.String) -> a
    void x() -> w
    void a(com.google.ads.f,java.lang.Boolean) -> a
    void b(com.google.ads.f,java.lang.Boolean) -> b
    void a(java.util.List,java.lang.String) -> a
    void a(java.util.List,java.lang.String,java.lang.String,java.lang.String,java.lang.Boolean,java.lang.String,java.lang.String) -> a
    void y() -> x
    void A() -> y
    void a(long) -> a
    void a(boolean) -> a
    void a(android.view.View) -> a
    void a(float) -> a
    void b(long) -> b
    void B() -> z
    void C() -> A
    void D() -> B
    void E() -> C
    void b(java.lang.String) -> b
    void c(java.lang.String) -> c
    void a(java.util.LinkedList) -> a
    void b(boolean) -> b
    void a(com.google.ads.l,boolean,int,int,int,int) -> a
    void a(int,int,int,int) -> a
    java.util.LinkedList F() -> D
com.google.ads.internal.e -> com.google.ads.internal.e:
    java.lang.String a -> a
    java.util.HashMap b -> b
    java.util.HashMap a(java.io.Serializable) -> a
    android.os.Bundle a() -> a
    java.lang.String b() -> b
    java.util.HashMap c() -> c
com.google.ads.internal.f -> com.google.ads.internal.f:
    com.google.ads.l a -> a
    com.google.ads.internal.f$a b -> b
    boolean c -> c
    boolean d -> d
    java.lang.String e -> e
    java.lang.Thread f -> f
    void a() -> a
    void a(java.net.HttpURLConnection) -> a
    void b(java.net.HttpURLConnection) -> b
    void c(java.net.HttpURLConnection) -> c
    void d(java.net.HttpURLConnection) -> d
    void e(java.net.HttpURLConnection) -> e
    void f(java.net.HttpURLConnection) -> f
    void g(java.net.HttpURLConnection) -> g
    void h(java.net.HttpURLConnection) -> h
    void i(java.net.HttpURLConnection) -> i
    void j(java.net.HttpURLConnection) -> j
    void k(java.net.HttpURLConnection) -> k
    void a(boolean) -> a
    void l(java.net.HttpURLConnection) -> l
    void m(java.net.HttpURLConnection) -> m
    void n(java.net.HttpURLConnection) -> n
    void a(java.lang.String) -> a
    void a(java.net.HttpURLConnection,int) -> a
    void run() -> run
    void b() -> b
    void a(android.content.Context,java.net.HttpURLConnection) -> a
com.google.ads.internal.f$1 -> com.google.ads.internal.f$1:
    java.net.HttpURLConnection a(java.net.URL) -> a
com.google.ads.internal.f$a -> com.google.ads.internal.f$a:
    java.net.HttpURLConnection a(java.net.URL) -> a
com.google.ads.internal.g -> com.google.ads.internal.g:
    java.util.LinkedList a -> a
    long b -> b
    long c -> c
    long d -> d
    java.util.LinkedList e -> e
    long f -> f
    long g -> g
    long h -> h
    long i -> i
    long j -> j
    boolean k -> k
    boolean l -> l
    java.lang.String m -> m
    long n -> n
    java.util.LinkedList o -> o
    java.util.LinkedList p -> p
    void a() -> a
    void b() -> b
    void c() -> c
    void a(com.google.ads.g$a) -> a
    java.lang.String d() -> d
    java.lang.String e() -> e
    void f() -> f
    void g() -> g
    void h() -> h
    void i() -> i
    long j() -> j
    java.lang.String k() -> k
    java.lang.String l() -> l
    long m() -> m
    long n() -> n
    long o() -> o
    long p() -> p
    void q() -> q
    void r() -> r
    long s() -> s
    void t() -> t
    void u() -> u
    long v() -> v
    void w() -> w
    void x() -> x
    boolean y() -> y
    void z() -> z
    boolean A() -> A
    void B() -> B
    void C() -> C
    java.lang.String D() -> D
    void a(java.lang.String) -> a
    long E() -> E
com.google.ads.internal.h -> com.google.ads.internal.h:
    com.google.ads.AdSize b -> b
    boolean c -> c
    boolean d -> d
    com.google.ads.internal.h a -> a
    com.google.ads.internal.h a(com.google.ads.AdSize,android.content.Context) -> a
    com.google.ads.internal.h a(com.google.ads.AdSize) -> a
    boolean a() -> a
    boolean b() -> b
    com.google.ads.AdSize c() -> c
    void b(com.google.ads.AdSize) -> b
    void a(boolean) -> a
com.google.ads.internal.i -> com.google.ads.internal.i:
    com.google.ads.internal.a c -> c
    com.google.ads.internal.d a -> a
    java.util.Map d -> d
    boolean b -> b
    boolean e -> e
    boolean f -> f
    boolean g -> g
    boolean h -> h
    boolean i -> i
    com.google.ads.internal.i a(com.google.ads.internal.d,java.util.Map,boolean,boolean) -> a
    boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String) -> shouldOverrideUrlLoading
    void onPageStarted(android.webkit.WebView,java.lang.String,android.graphics.Bitmap) -> onPageStarted
    void onPageFinished(android.webkit.WebView,java.lang.String) -> onPageFinished
    void onReceivedError(android.webkit.WebView,int,java.lang.String,java.lang.String) -> onReceivedError
    void a(boolean) -> a
    void b(boolean) -> b
    void c(boolean) -> c
    void d(boolean) -> d
    boolean a() -> a
com.google.ads.internal.j -> com.google.ads.internal.j:
    java.lang.String a -> a
    android.content.Context b -> b
    java.net.HttpURLConnection a(java.net.URL) -> a
    java.io.BufferedOutputStream a(java.net.HttpURLConnection) -> a
    void run() -> run
com.google.ads.internal.j$a -> com.google.ads.internal.j$a:
    java.lang.String a -> a
    org.json.JSONObject a() -> a
com.google.ads.internal.k -> com.google.ads.internal.k:
    byte[] a -> a
    android.view.ViewGroup a(android.app.Activity,com.google.ads.internal.d) -> a
com.google.ads.internal.k$a -> com.google.ads.internal.k$a:
    android.gesture.GestureStore a -> a
    android.app.Activity b -> b
    com.google.ads.internal.d c -> c
    void onGesturePerformed(android.gesture.GestureOverlayView,android.gesture.Gesture) -> onGesturePerformed
    com.google.ads.internal.d a(com.google.ads.internal.k$a) -> a
    android.app.Activity b(com.google.ads.internal.k$a) -> b
com.google.ads.internal.k$a$1 -> com.google.ads.internal.k$a$1:
    com.google.ads.internal.k$a a -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.google.ads.internal.k$a$2 -> com.google.ads.internal.k$a$2:
    com.google.ads.internal.k$a a -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.google.ads.internal.k$a$3 -> com.google.ads.internal.k$a$3:
    java.lang.String a -> a
    com.google.ads.internal.k$a b -> b
    void onClick(android.content.DialogInterface,int) -> onClick
com.google.ads.j -> com.google.ads.j:
    com.google.ads.h a -> a
    boolean b -> b
    void onReceivedAd(com.google.ads.mediation.MediationBannerAdapter) -> a
    void onFailedToReceiveAd(com.google.ads.mediation.MediationBannerAdapter,com.google.ads.AdRequest$ErrorCode) -> a
    void onPresentScreen(com.google.ads.mediation.MediationBannerAdapter) -> b
    void onDismissScreen(com.google.ads.mediation.MediationBannerAdapter) -> c
    void onLeaveApplication(com.google.ads.mediation.MediationBannerAdapter) -> d
    void onClick(com.google.ads.mediation.MediationBannerAdapter) -> e
com.google.ads.k -> com.google.ads.k:
    com.google.ads.h a -> a
    void onReceivedAd(com.google.ads.mediation.MediationInterstitialAdapter) -> a
    void onFailedToReceiveAd(com.google.ads.mediation.MediationInterstitialAdapter,com.google.ads.AdRequest$ErrorCode) -> a
    void onPresentScreen(com.google.ads.mediation.MediationInterstitialAdapter) -> b
    void onDismissScreen(com.google.ads.mediation.MediationInterstitialAdapter) -> c
    void onLeaveApplication(com.google.ads.mediation.MediationInterstitialAdapter) -> d
com.google.ads.l -> com.google.ads.l:
    com.google.ads.util.i$b a -> a
    com.google.ads.util.i$c b -> b
    com.google.ads.util.i$c c -> c
com.google.ads.m -> com.google.ads.m:
    com.google.ads.m d -> d
    com.google.ads.util.i$c a -> a
    com.google.ads.util.i$b b -> b
    com.google.ads.util.i$b c -> c
    com.google.ads.m a() -> a
com.google.ads.m$a -> com.google.ads.m$a:
    com.google.ads.util.i$c a -> a
    com.google.ads.util.i$c b -> b
    com.google.ads.util.i$c c -> c
    com.google.ads.util.i$c d -> d
    com.google.ads.util.i$c e -> e
    com.google.ads.util.i$c f -> f
    com.google.ads.util.i$c g -> g
    com.google.ads.util.i$c h -> h
    com.google.ads.util.i$c i -> i
    com.google.ads.util.i$c j -> j
    com.google.ads.util.i$c k -> k
    com.google.ads.util.i$c l -> l
    com.google.ads.util.i$c m -> m
    com.google.ads.util.i$c n -> n
    com.google.ads.util.i$c o -> o
com.google.ads.mediation.EmptyNetworkExtras -> com.google.ads.mediation.EmptyNetworkExtras:
com.google.ads.mediation.MediationAdRequest -> com.google.ads.mediation.MediationAdRequest:
    com.google.ads.AdRequest a -> a
    boolean b -> b
    boolean c -> c
    com.google.ads.AdRequest$Gender getGender() -> a
    java.util.Date getBirthday() -> b
    java.util.Set getKeywords() -> c
    android.location.Location getLocation() -> d
    boolean isTesting() -> e
com.google.ads.mediation.MediationAdapter -> com.google.ads.mediation.MediationAdapter:
    void destroy() -> a
    java.lang.Class getAdditionalParametersType() -> b
    java.lang.Class getServerParametersType() -> c
com.google.ads.mediation.MediationBannerAdapter -> com.google.ads.mediation.MediationBannerAdapter:
    void requestBannerAd(com.google.ads.mediation.MediationBannerListener,android.app.Activity,com.google.ads.mediation.MediationServerParameters,com.google.ads.AdSize,com.google.ads.mediation.MediationAdRequest,com.google.ads.mediation.NetworkExtras) -> a
    android.view.View getBannerView() -> d
com.google.ads.mediation.MediationBannerListener -> com.google.ads.mediation.MediationBannerListener:
    void onReceivedAd(com.google.ads.mediation.MediationBannerAdapter) -> a
    void onFailedToReceiveAd(com.google.ads.mediation.MediationBannerAdapter,com.google.ads.AdRequest$ErrorCode) -> a
    void onPresentScreen(com.google.ads.mediation.MediationBannerAdapter) -> b
    void onDismissScreen(com.google.ads.mediation.MediationBannerAdapter) -> c
    void onLeaveApplication(com.google.ads.mediation.MediationBannerAdapter) -> d
    void onClick(com.google.ads.mediation.MediationBannerAdapter) -> e
com.google.ads.mediation.MediationInterstitialAdapter -> com.google.ads.mediation.MediationInterstitialAdapter:
    void requestInterstitialAd(com.google.ads.mediation.MediationInterstitialListener,android.app.Activity,com.google.ads.mediation.MediationServerParameters,com.google.ads.mediation.MediationAdRequest,com.google.ads.mediation.NetworkExtras) -> a
    void showInterstitial() -> e
com.google.ads.mediation.MediationInterstitialListener -> com.google.ads.mediation.MediationInterstitialListener:
    void onReceivedAd(com.google.ads.mediation.MediationInterstitialAdapter) -> a
    void onFailedToReceiveAd(com.google.ads.mediation.MediationInterstitialAdapter,com.google.ads.AdRequest$ErrorCode) -> a
    void onPresentScreen(com.google.ads.mediation.MediationInterstitialAdapter) -> b
    void onDismissScreen(com.google.ads.mediation.MediationInterstitialAdapter) -> c
    void onLeaveApplication(com.google.ads.mediation.MediationInterstitialAdapter) -> d
com.google.ads.mediation.MediationServerParameters -> com.google.ads.mediation.MediationServerParameters:
    void load(java.util.Map) -> a
    void a() -> a
com.google.ads.mediation.MediationServerParameters$MappingException -> com.google.ads.mediation.MediationServerParameters$MappingException:
com.google.ads.mediation.MediationServerParameters$Parameter -> com.google.ads.mediation.MediationServerParameters$Parameter:
    java.lang.String name() -> a
    boolean required() -> b
com.google.ads.mediation.NetworkExtras -> com.google.ads.mediation.NetworkExtras:
com.google.ads.mediation.admob.AdMobAdapter -> com.google.ads.mediation.admob.AdMobAdapter:
    com.google.ads.mediation.MediationBannerListener a -> a
    com.google.ads.mediation.MediationInterstitialListener b -> b
    com.google.ads.AdView c -> c
    com.google.ads.InterstitialAd d -> d
    void a() -> f
    boolean b() -> g
    com.google.ads.AdRequest a(android.app.Activity,com.google.ads.mediation.admob.AdMobAdapterServerParameters,com.google.ads.mediation.MediationAdRequest,com.google.ads.mediation.admob.AdMobAdapterExtras) -> a
    com.google.ads.AdView a(android.app.Activity,com.google.ads.AdSize,java.lang.String) -> a
    com.google.ads.InterstitialAd a(android.app.Activity,java.lang.String) -> a
    java.lang.Class getAdditionalParametersType() -> b
    java.lang.Class getServerParametersType() -> c
    void requestBannerAd(com.google.ads.mediation.MediationBannerListener,android.app.Activity,com.google.ads.mediation.admob.AdMobAdapterServerParameters,com.google.ads.AdSize,com.google.ads.mediation.MediationAdRequest,com.google.ads.mediation.admob.AdMobAdapterExtras) -> a
    android.view.View getBannerView() -> d
    void destroy() -> a
    void requestInterstitialAd(com.google.ads.mediation.MediationInterstitialListener,android.app.Activity,com.google.ads.mediation.admob.AdMobAdapterServerParameters,com.google.ads.mediation.MediationAdRequest,com.google.ads.mediation.admob.AdMobAdapterExtras) -> a
    void showInterstitial() -> e
    void requestBannerAd(com.google.ads.mediation.MediationBannerListener,android.app.Activity,com.google.ads.mediation.MediationServerParameters,com.google.ads.AdSize,com.google.ads.mediation.MediationAdRequest,com.google.ads.mediation.NetworkExtras) -> a
    void requestInterstitialAd(com.google.ads.mediation.MediationInterstitialListener,android.app.Activity,com.google.ads.mediation.MediationServerParameters,com.google.ads.mediation.MediationAdRequest,com.google.ads.mediation.NetworkExtras) -> a
    com.google.ads.mediation.MediationBannerListener a(com.google.ads.mediation.admob.AdMobAdapter) -> a
    com.google.ads.mediation.MediationInterstitialListener b(com.google.ads.mediation.admob.AdMobAdapter) -> b
com.google.ads.mediation.admob.AdMobAdapter$1 -> com.google.ads.mediation.admob.AdMobAdapter$1:
com.google.ads.mediation.admob.AdMobAdapter$a -> com.google.ads.mediation.admob.AdMobAdapter$a:
    com.google.ads.mediation.admob.AdMobAdapter a -> a
    void onReceiveAd(com.google.ads.Ad) -> a
    void onFailedToReceiveAd(com.google.ads.Ad,com.google.ads.AdRequest$ErrorCode) -> a
    void onPresentScreen(com.google.ads.Ad) -> b
    void onDismissScreen(com.google.ads.Ad) -> c
    void onLeaveApplication(com.google.ads.Ad) -> d
com.google.ads.mediation.admob.AdMobAdapter$b -> com.google.ads.mediation.admob.AdMobAdapter$b:
    com.google.ads.mediation.admob.AdMobAdapter a -> a
    void onReceiveAd(com.google.ads.Ad) -> a
    void onFailedToReceiveAd(com.google.ads.Ad,com.google.ads.AdRequest$ErrorCode) -> a
    void onPresentScreen(com.google.ads.Ad) -> b
    void onDismissScreen(com.google.ads.Ad) -> c
    void onLeaveApplication(com.google.ads.Ad) -> d
com.google.ads.mediation.admob.AdMobAdapterExtras -> com.google.ads.mediation.admob.AdMobAdapterExtras:
    boolean a -> a
    java.util.Map b -> b
    boolean getUseExactAdSize() -> d
    java.util.Map getExtras() -> e
    com.google.ads.mediation.admob.AdMobAdapterExtras clearExtras() -> c
    com.google.ads.mediation.admob.AdMobAdapterExtras addExtra(java.lang.String,java.lang.Object) -> b
com.google.ads.mediation.admob.AdMobAdapterServerParameters -> com.google.ads.mediation.admob.AdMobAdapterServerParameters:
    java.lang.String adUnitId -> a
    java.lang.String allowHouseAds -> b
com.google.ads.mediation.customevent.CustomEvent -> com.google.ads.mediation.customevent.CustomEvent:
    void destroy() -> a
com.google.ads.mediation.customevent.CustomEventAdapter -> com.google.ads.mediation.customevent.CustomEventAdapter:
    java.lang.String a -> a
    com.google.ads.mediation.customevent.CustomEventBanner b -> b
    com.google.ads.mediation.customevent.CustomEventAdapter$a c -> c
    com.google.ads.mediation.customevent.CustomEventInterstitial d -> d
    void requestBannerAd(com.google.ads.mediation.MediationBannerListener,android.app.Activity,com.google.ads.mediation.customevent.CustomEventServerParameters,com.google.ads.AdSize,com.google.ads.mediation.MediationAdRequest,com.google.ads.mediation.customevent.CustomEventExtras) -> a
    android.view.View getBannerView() -> d
    void showInterstitial() -> e
    void requestInterstitialAd(com.google.ads.mediation.MediationInterstitialListener,android.app.Activity,com.google.ads.mediation.customevent.CustomEventServerParameters,com.google.ads.mediation.MediationAdRequest,com.google.ads.mediation.customevent.CustomEventExtras) -> a
    java.lang.Class getAdditionalParametersType() -> b
    java.lang.Class getServerParametersType() -> c
    void destroy() -> a
    void a(java.lang.String,java.lang.Throwable) -> a
    java.lang.Object a(java.lang.String,java.lang.Class,java.lang.String) -> a
    void requestBannerAd(com.google.ads.mediation.MediationBannerListener,android.app.Activity,com.google.ads.mediation.MediationServerParameters,com.google.ads.AdSize,com.google.ads.mediation.MediationAdRequest,com.google.ads.mediation.NetworkExtras) -> a
    void requestInterstitialAd(com.google.ads.mediation.MediationInterstitialListener,android.app.Activity,com.google.ads.mediation.MediationServerParameters,com.google.ads.mediation.MediationAdRequest,com.google.ads.mediation.NetworkExtras) -> a
com.google.ads.mediation.customevent.CustomEventAdapter$a -> com.google.ads.mediation.customevent.CustomEventAdapter$a:
    android.view.View b -> b
    com.google.ads.mediation.MediationBannerListener c -> c
    com.google.ads.mediation.customevent.CustomEventAdapter a -> a
    android.view.View a() -> a
com.google.ads.mediation.customevent.CustomEventAdapter$b -> com.google.ads.mediation.customevent.CustomEventAdapter$b:
    com.google.ads.mediation.MediationInterstitialListener b -> b
    com.google.ads.mediation.customevent.CustomEventAdapter a -> a
com.google.ads.mediation.customevent.CustomEventBanner -> com.google.ads.mediation.customevent.CustomEventBanner:
    void requestBannerAd(com.google.ads.mediation.customevent.CustomEventBannerListener,android.app.Activity,java.lang.String,java.lang.String,com.google.ads.AdSize,com.google.ads.mediation.MediationAdRequest,java.lang.Object) -> a
com.google.ads.mediation.customevent.CustomEventBannerListener -> com.google.ads.mediation.customevent.CustomEventBannerListener:
com.google.ads.mediation.customevent.CustomEventExtras -> com.google.ads.mediation.customevent.CustomEventExtras:
    java.util.HashMap a -> a
    java.lang.Object getExtra(java.lang.String) -> a
com.google.ads.mediation.customevent.CustomEventInterstitial -> com.google.ads.mediation.customevent.CustomEventInterstitial:
    void requestInterstitialAd(com.google.ads.mediation.customevent.CustomEventInterstitialListener,android.app.Activity,java.lang.String,java.lang.String,com.google.ads.mediation.MediationAdRequest,java.lang.Object) -> a
    void showInterstitial() -> b
com.google.ads.mediation.customevent.CustomEventInterstitialListener -> com.google.ads.mediation.customevent.CustomEventInterstitialListener:
com.google.ads.mediation.customevent.CustomEventListener -> com.google.ads.mediation.customevent.CustomEventListener:
com.google.ads.mediation.customevent.CustomEventServerParameters -> com.google.ads.mediation.customevent.CustomEventServerParameters:
    java.lang.String label -> a
    java.lang.String className -> b
    java.lang.String parameter -> c
com.google.ads.n -> com.google.ads.n:
    com.google.ads.util.i$b a -> a
    com.google.ads.util.i$b b -> b
    com.google.ads.util.i$d c -> c
    com.google.ads.util.i$b d -> d
    com.google.ads.util.i$b e -> e
    com.google.ads.util.i$b f -> f
    com.google.ads.util.i$b g -> g
    com.google.ads.util.i$b h -> h
    com.google.ads.util.i$b i -> i
    com.google.ads.util.i$b j -> j
    com.google.ads.util.i$b k -> k
    com.google.ads.util.i$c l -> l
    com.google.ads.util.i$c m -> m
    com.google.ads.util.i$c n -> n
    com.google.ads.util.i$c o -> o
    com.google.ads.util.i$c p -> p
    com.google.ads.util.i$c q -> q
    com.google.ads.util.i$c r -> r
    com.google.ads.util.i$c s -> s
    com.google.ads.util.i$c t -> t
    boolean a() -> a
    boolean b() -> b
com.google.ads.o -> com.google.ads.o:
    void a(com.google.ads.internal.d,java.util.HashMap,android.webkit.WebView) -> a
com.google.ads.p -> com.google.ads.p:
    void a(com.google.ads.internal.d,java.util.HashMap,android.webkit.WebView) -> a
com.google.ads.q -> com.google.ads.q:
    com.google.ads.internal.a a -> a
    void a(com.google.ads.internal.d,java.util.HashMap,android.webkit.WebView) -> a
com.google.ads.r -> com.google.ads.r:
    void a(com.google.ads.internal.d,java.util.HashMap,android.webkit.WebView) -> a
com.google.ads.s -> com.google.ads.s:
    void a(com.google.ads.internal.d,java.util.HashMap,android.webkit.WebView) -> a
com.google.ads.searchads.SearchAdRequest -> com.google.ads.searchads.SearchAdRequest:
    java.lang.String a -> b
    int b -> c
    int c -> d
    int d -> e
    int e -> f
    int f -> g
    int g -> h
    java.lang.String h -> i
    int i -> j
    int j -> k
    com.google.ads.searchads.SearchAdRequest$BorderType k -> l
    int l -> m
    java.lang.String m -> n
    java.util.Map getRequestMap(android.content.Context) -> a
    java.lang.String a(int) -> a
com.google.ads.searchads.SearchAdRequest$BorderType -> com.google.ads.searchads.SearchAdRequest$BorderType:
    com.google.ads.searchads.SearchAdRequest$BorderType NONE -> a
    com.google.ads.searchads.SearchAdRequest$BorderType DASHED -> b
    com.google.ads.searchads.SearchAdRequest$BorderType DOTTED -> c
    com.google.ads.searchads.SearchAdRequest$BorderType SOLID -> d
    java.lang.String a -> e
    com.google.ads.searchads.SearchAdRequest$BorderType[] b -> f
    com.google.ads.searchads.SearchAdRequest$BorderType[] values() -> values
    com.google.ads.searchads.SearchAdRequest$BorderType valueOf(java.lang.String) -> valueOf
    java.lang.String toString() -> toString
com.google.ads.t -> com.google.ads.t:
    void a(com.google.ads.internal.d,java.util.HashMap,android.webkit.WebView) -> a
com.google.ads.u -> com.google.ads.u:
    void a(com.google.ads.internal.d,java.util.HashMap,android.webkit.WebView) -> a
com.google.ads.util.AdUtil -> com.google.ads.util.AdUtil:
    int a -> a
    java.lang.Boolean b -> b
    java.lang.String c -> c
    java.lang.String d -> d
    java.lang.String e -> e
    android.media.AudioManager f -> f
    boolean g -> g
    boolean h -> h
    java.lang.String i -> i
    boolean a(android.content.Intent,android.content.Context) -> a
    java.lang.String a(java.lang.Readable) -> a
    int a(java.lang.String) -> a
    java.lang.String a(android.content.Context) -> a
    int a() -> a
    int b() -> b
    int a(android.content.Context,android.util.DisplayMetrics) -> a
    int b(android.content.Context,android.util.DisplayMetrics) -> b
    boolean b(android.content.Context) -> b
    boolean a(int,int,java.lang.String) -> a
    boolean c(android.content.Context) -> c
    boolean c() -> c
    boolean a(com.google.ads.util.d) -> a
    boolean a(android.net.Uri) -> a
    java.lang.String b(java.lang.String) -> b
    java.lang.String d(android.content.Context) -> d
    java.lang.String e(android.content.Context) -> e
    boolean a(android.content.Context,java.lang.String) -> a
    java.lang.String f(android.content.Context) -> f
    com.google.ads.util.AdUtil$a g(android.content.Context) -> g
    android.util.DisplayMetrics a(android.app.Activity) -> a
    java.util.HashMap a(android.location.Location) -> a
    java.util.HashMap b(android.net.Uri) -> b
    boolean d() -> d
    void a(boolean) -> a
    void h(android.content.Context) -> h
    java.lang.String i(android.content.Context) -> i
    void a(android.webkit.WebView) -> a
    void a(java.net.HttpURLConnection,android.content.Context) -> a
    java.lang.String a(java.util.Map) -> a
    org.json.JSONObject b(java.util.Map) -> b
    org.json.JSONArray a(java.util.Set) -> a
    int a(android.content.Context,int) -> a
com.google.ads.util.AdUtil$UserActivityReceiver -> com.google.ads.util.AdUtil$UserActivityReceiver:
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.google.ads.util.AdUtil$a -> com.google.ads.util.AdUtil$a:
    com.google.ads.util.AdUtil$a a -> a
    com.google.ads.util.AdUtil$a b -> b
    com.google.ads.util.AdUtil$a c -> c
    com.google.ads.util.AdUtil$a d -> d
    com.google.ads.util.AdUtil$a e -> e
    com.google.ads.util.AdUtil$a f -> f
    com.google.ads.util.AdUtil$a[] g -> g
    com.google.ads.util.AdUtil$a[] values() -> values
    com.google.ads.util.AdUtil$a valueOf(java.lang.String) -> valueOf
com.google.ads.util.IcsUtil -> com.google.ads.util.IcsUtil:
com.google.ads.util.IcsUtil$IcsAdWebView -> com.google.ads.util.IcsUtil$IcsAdWebView:
    boolean canScrollHorizontally(int) -> canScrollHorizontally
    boolean canScrollVertically(int) -> canScrollVertically
com.google.ads.util.IcsUtil$a -> com.google.ads.util.IcsUtil$a:
    void onShowCustomView(android.view.View,int,android.webkit.WebChromeClient$CustomViewCallback) -> onShowCustomView
com.google.ads.util.a -> com.google.ads.util.a:
    boolean a -> a
    void a(boolean) -> a
    void a(boolean,java.lang.String) -> a
    void b(boolean) -> b
    void b(boolean,java.lang.String) -> b
    void a(java.lang.Object) -> a
    void b(java.lang.Object) -> b
    void a(java.lang.Object,java.lang.Object) -> a
    void a(java.lang.String) -> a
    void c(boolean,java.lang.String) -> c
com.google.ads.util.a$a -> com.google.ads.util.a$a:
com.google.ads.util.b -> com.google.ads.util.b:
    com.google.ads.util.b$b a -> a
    int b -> b
    void a(com.google.ads.util.b$a,java.lang.String) -> a
    void a(com.google.ads.util.b$a,java.lang.String,java.lang.Throwable) -> a
    void a(java.lang.String) -> a
    void a(java.lang.String,java.lang.Throwable) -> a
    void b(java.lang.String) -> b
    void b(java.lang.String,java.lang.Throwable) -> b
    void c(java.lang.String) -> c
    void c(java.lang.String,java.lang.Throwable) -> c
    void d(java.lang.String) -> d
    void e(java.lang.String) -> e
    void d(java.lang.String,java.lang.Throwable) -> d
    boolean a(java.lang.String,int) -> a
    boolean a(int) -> a
com.google.ads.util.b$a -> com.google.ads.util.b$a:
    com.google.ads.util.b$a a -> a
    com.google.ads.util.b$a b -> b
    com.google.ads.util.b$a c -> c
    com.google.ads.util.b$a d -> d
    com.google.ads.util.b$a e -> e
    int f -> f
    com.google.ads.util.b$a[] g -> g
    com.google.ads.util.b$a[] values() -> values
    com.google.ads.util.b$a valueOf(java.lang.String) -> valueOf
com.google.ads.util.b$b -> com.google.ads.util.b$b:
    void a(com.google.ads.util.b$a,java.lang.String,java.lang.Throwable) -> a
com.google.ads.util.c -> com.google.ads.util.c:
    boolean a -> a
    byte[] a(java.lang.String) -> a
    byte[] a(byte[],int) -> a
    byte[] a(byte[],int,int,int) -> a
com.google.ads.util.c$a -> com.google.ads.util.c$a:
    byte[] a -> a
    int b -> b
com.google.ads.util.c$b -> com.google.ads.util.c$b:
    int[] c -> c
    int[] d -> d
    int e -> e
    int f -> f
    int[] g -> g
    boolean a(byte[],int,int,boolean) -> a
com.google.ads.util.d -> com.google.ads.util.d:
    java.lang.String a -> a
    java.lang.String b -> b
    java.lang.String c -> c
    com.google.ads.util.d d -> d
    com.google.ads.util.d e -> e
    com.google.ads.util.d f -> f
    boolean equals(java.lang.Object) -> equals
    boolean a(java.lang.String,java.lang.String) -> a
    int hashCode() -> hashCode
com.google.ads.util.e -> com.google.ads.util.e:
    int a(android.content.Context,android.util.DisplayMetrics) -> a
    int b(android.content.Context,android.util.DisplayMetrics) -> b
    int a(android.content.Context,float,int) -> a
    void a(android.content.Intent,java.lang.String) -> a
com.google.ads.util.f -> com.google.ads.util.f:
    java.lang.Object b() -> b
com.google.ads.util.g -> com.google.ads.util.g:
    void a(android.webkit.WebSettings,com.google.ads.n) -> a
    void a(android.view.View) -> a
    void b(android.view.View) -> b
    void a(android.view.Window) -> a
com.google.ads.util.g$1 -> com.google.ads.util.g$1:
    int[] a -> a
com.google.ads.util.g$a -> com.google.ads.util.g$a:
    com.google.ads.n a -> a
    void onCloseWindow(android.webkit.WebView) -> onCloseWindow
    boolean onConsoleMessage(android.webkit.ConsoleMessage) -> onConsoleMessage
    void onExceededDatabaseQuota(java.lang.String,java.lang.String,long,long,long,android.webkit.WebStorage$QuotaUpdater) -> onExceededDatabaseQuota
    boolean onJsAlert(android.webkit.WebView,java.lang.String,java.lang.String,android.webkit.JsResult) -> onJsAlert
    boolean onJsBeforeUnload(android.webkit.WebView,java.lang.String,java.lang.String,android.webkit.JsResult) -> onJsBeforeUnload
    boolean onJsConfirm(android.webkit.WebView,java.lang.String,java.lang.String,android.webkit.JsResult) -> onJsConfirm
    boolean onJsPrompt(android.webkit.WebView,java.lang.String,java.lang.String,java.lang.String,android.webkit.JsPromptResult) -> onJsPrompt
    void onReachedMaxAppCacheSize(long,long,android.webkit.WebStorage$QuotaUpdater) -> onReachedMaxAppCacheSize
    void onShowCustomView(android.view.View,android.webkit.WebChromeClient$CustomViewCallback) -> onShowCustomView
    boolean a(android.webkit.WebView,java.lang.String,java.lang.String,java.lang.String,android.webkit.JsResult,android.webkit.JsPromptResult,boolean) -> a
    void a(android.app.AlertDialog$Builder,java.lang.String,android.webkit.JsResult) -> a
    void a(android.app.AlertDialog$Builder,android.content.Context,java.lang.String,java.lang.String,android.webkit.JsPromptResult) -> a
com.google.ads.util.g$a$1 -> com.google.ads.util.g$a$1:
    android.webkit.JsResult a -> a
    void onCancel(android.content.DialogInterface) -> onCancel
com.google.ads.util.g$a$2 -> com.google.ads.util.g$a$2:
    android.webkit.JsResult a -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.google.ads.util.g$a$3 -> com.google.ads.util.g$a$3:
    android.webkit.JsResult a -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.google.ads.util.g$a$4 -> com.google.ads.util.g$a$4:
    android.webkit.JsPromptResult a -> a
    void onCancel(android.content.DialogInterface) -> onCancel
com.google.ads.util.g$a$5 -> com.google.ads.util.g$a$5:
    android.webkit.JsPromptResult a -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.google.ads.util.g$a$6 -> com.google.ads.util.g$a$6:
    android.webkit.JsPromptResult a -> a
    android.widget.EditText b -> b
    void onClick(android.content.DialogInterface,int) -> onClick
com.google.ads.util.g$b -> com.google.ads.util.g$b:
    android.webkit.WebResourceResponse shouldInterceptRequest(android.webkit.WebView,java.lang.String) -> shouldInterceptRequest
    android.webkit.WebResourceResponse a(java.lang.String,android.content.Context) -> a
com.google.ads.util.h -> com.google.ads.util.h:
    void a(android.webkit.WebSettings,com.google.ads.n) -> a
com.google.ads.util.i -> com.google.ads.util.i:
    java.lang.Object a -> a
    int b -> b
    java.util.HashMap c -> c
    int u -> u
    java.util.ArrayList d -> d
    void finalize() -> finalize
    java.lang.String toString() -> toString
    void a(com.google.ads.util.i$a) -> a
    void a(com.google.ads.util.i,com.google.ads.util.i$a) -> a
com.google.ads.util.i$1 -> com.google.ads.util.i$1:
com.google.ads.util.i$a -> com.google.ads.util.i$a:
    java.lang.Object a -> a
    java.lang.String b -> b
    com.google.ads.util.i c -> c
    java.lang.String toString() -> toString
com.google.ads.util.i$b -> com.google.ads.util.i$b:
    com.google.ads.util.i d -> d
    java.lang.Object a() -> a
    java.lang.String toString() -> toString
com.google.ads.util.i$c -> com.google.ads.util.i$c:
    boolean e -> e
    com.google.ads.util.i d -> d
    java.lang.Object a() -> a
    void a(java.lang.Object) -> a
    java.lang.String toString() -> toString
com.google.ads.util.i$d -> com.google.ads.util.i$d:
    com.google.ads.util.i d -> d
    java.lang.Object a() -> a
    java.lang.String toString() -> toString
com.google.ads.v -> com.google.ads.v:
    void a(com.google.ads.internal.d,java.util.HashMap,android.webkit.WebView) -> a
com.google.ads.w -> com.google.ads.w:
    void a(com.google.ads.internal.d,java.util.HashMap,android.webkit.WebView) -> a
com.google.ads.x -> com.google.ads.x:
    void a(com.google.ads.internal.d,java.util.HashMap,android.webkit.WebView) -> a
    void a(java.util.HashMap,java.lang.String,com.google.ads.util.i$c) -> a
    void b(java.util.HashMap,java.lang.String,com.google.ads.util.i$c) -> b
    void c(java.util.HashMap,java.lang.String,com.google.ads.util.i$c) -> c
com.google.ads.y -> com.google.ads.y:
    void a(com.google.ads.internal.d,java.util.HashMap,android.webkit.WebView) -> a
com.google.ads.z -> com.google.ads.z:
    com.google.ads.AdActivity$StaticMethodWrapper a -> a
    void a(com.google.ads.internal.d,java.util.HashMap,android.webkit.WebView) -> a
org.andengine.audio.BaseAudioEntity -> org.andengine.a.a:
    org.andengine.audio.IAudioManager mAudioManager -> c
    float mLeftVolume -> a
    float mRightVolume -> b
    boolean mReleased -> d
    org.andengine.audio.IAudioManager getAudioManager() -> a
    float getMasterVolume() -> b
    void throwOnReleased() -> c
    void setVolume(float) -> a
    void setVolume(float,float) -> a
    void play() -> d
    void pause() -> e
    void resume() -> f
    void stop() -> g
    void setLooping(boolean) -> a
    void release() -> h
    void assertNotReleased() -> i
org.andengine.audio.BaseAudioManager -> org.andengine.a.b:
    java.util.ArrayList mAudioEntities -> a
    float mMasterVolume -> b
    float getMasterVolume() -> a
    void add(org.andengine.audio.IAudioEntity) -> a
    boolean remove(org.andengine.audio.IAudioEntity) -> b
    void releaseAll() -> b
org.andengine.audio.IAudioEntity -> org.andengine.a.c:
    void stop() -> g
    void release() -> h
org.andengine.audio.IAudioManager -> org.andengine.a.d:
    float getMasterVolume() -> a
org.andengine.audio.exception.AudioException -> org.andengine.a.a.a:
org.andengine.audio.music.Music -> org.andengine.a.b.a:
    android.media.MediaPlayer mMediaPlayer -> c
    org.andengine.audio.music.MusicManager getAudioManager() -> j
    void throwOnReleased() -> c
    void play() -> d
    void stop() -> g
    void resume() -> f
    void pause() -> e
    void setLooping(boolean) -> a
    void setVolume(float,float) -> a
    void release() -> h
    org.andengine.audio.IAudioManager getAudioManager() -> a
org.andengine.audio.music.MusicFactory -> org.andengine.a.b.b:
    java.lang.String sAssetBasePath -> a
    void setAssetBasePath(java.lang.String) -> a
    void onCreate() -> a
    org.andengine.audio.music.Music createMusicFromAsset(org.andengine.audio.music.MusicManager,android.content.Context,java.lang.String) -> a
org.andengine.audio.music.MusicManager -> org.andengine.a.b.c:
org.andengine.audio.music.exception.MusicException -> org.andengine.a.b.a.a:
org.andengine.audio.music.exception.MusicReleasedException -> org.andengine.a.b.a.b:
org.andengine.audio.sound.Sound -> org.andengine.a.c.a:
    int mSoundID -> c
    int mStreamID -> d
    boolean mLoaded -> e
    int mLoopCount -> f
    float mRate -> g
    int mPriority -> h
    int getSoundID() -> j
    void setLoaded(boolean) -> b
    void setLoopCount(int) -> a
    android.media.SoundPool getSoundPool() -> l
    org.andengine.audio.sound.SoundManager getAudioManager() -> k
    void throwOnReleased() -> c
    void play() -> d
    void stop() -> g
    void resume() -> f
    void pause() -> e
    void release() -> h
    void setLooping(boolean) -> a
    void setVolume(float,float) -> a
    org.andengine.audio.IAudioManager getAudioManager() -> a
org.andengine.audio.sound.SoundFactory -> org.andengine.a.c.b:
    java.lang.String sAssetBasePath -> a
    void setAssetBasePath(java.lang.String) -> a
    void onCreate() -> a
    org.andengine.audio.sound.Sound createSoundFromAsset(org.andengine.audio.sound.SoundManager,android.content.Context,java.lang.String) -> a
org.andengine.audio.sound.SoundManager -> org.andengine.a.c.c:
    android.media.SoundPool mSoundPool -> c
    android.util.SparseArray mSoundMap -> d
    android.media.SoundPool getSoundPool() -> c
    void add(org.andengine.audio.sound.Sound) -> a
    boolean remove(org.andengine.audio.sound.Sound) -> b
    void releaseAll() -> b
    void onLoadComplete(android.media.SoundPool,int,int) -> onLoadComplete
    void onPause() -> d
    void onResume() -> e
    void add(org.andengine.audio.IAudioEntity) -> a
    boolean remove(org.andengine.audio.IAudioEntity) -> b
org.andengine.audio.sound.exception.SoundException -> org.andengine.a.c.a.a:
org.andengine.audio.sound.exception.SoundReleasedException -> org.andengine.a.c.a.b:
org.andengine.engine.Engine -> org.andengine.b.a:
    org.andengine.input.sensor.SensorDelay SENSORDELAY_DEFAULT -> e
    boolean mRunning -> f
    boolean mDestroyed -> g
    long mLastTick -> h
    float mSecondsElapsedTotal -> i
    org.andengine.engine.Engine$EngineLock mEngineLock -> j
    org.andengine.engine.Engine$UpdateThread mUpdateThread -> k
    org.andengine.engine.handler.runnable.RunnableHandler mUpdateThreadRunnableHandler -> l
    org.andengine.engine.options.EngineOptions mEngineOptions -> m
    org.andengine.engine.camera.Camera mCamera -> a
    org.andengine.input.touch.controller.ITouchController mTouchController -> n
    org.andengine.opengl.vbo.VertexBufferObjectManager mVertexBufferObjectManager -> o
    org.andengine.opengl.texture.TextureManager mTextureManager -> p
    org.andengine.opengl.font.FontManager mFontManager -> q
    org.andengine.opengl.shader.ShaderProgramManager mShaderProgramManager -> r
    org.andengine.audio.sound.SoundManager mSoundManager -> s
    org.andengine.audio.music.MusicManager mMusicManager -> t
    org.andengine.entity.scene.Scene mScene -> b
    android.view.Display mDefaultDisplay -> u
    org.andengine.input.sensor.location.ILocationListener mLocationListener -> v
    android.location.Location mLocation -> w
    org.andengine.input.sensor.acceleration.IAccelerationListener mAccelerationListener -> x
    org.andengine.input.sensor.acceleration.AccelerationData mAccelerationData -> y
    org.andengine.input.sensor.orientation.IOrientationListener mOrientationListener -> z
    org.andengine.input.sensor.orientation.OrientationData mOrientationData -> A
    org.andengine.engine.handler.UpdateHandlerList mUpdateHandlers -> B
    org.andengine.engine.handler.DrawHandlerList mDrawHandlers -> C
    int mSurfaceWidth -> c
    int mSurfaceHeight -> d
    void startUpdateThread() -> a
    void start() -> b
    void stop() -> c
    void setScene(org.andengine.entity.scene.Scene) -> a
    org.andengine.engine.options.EngineOptions getEngineOptions() -> d
    org.andengine.engine.camera.Camera getCamera() -> e
    void setSurfaceSize(int,int) -> a
    void onUpdateCameraSurface() -> f
    void setTouchController(org.andengine.input.touch.controller.ITouchController) -> a
    org.andengine.opengl.vbo.VertexBufferObjectManager getVertexBufferObjectManager() -> g
    org.andengine.opengl.texture.TextureManager getTextureManager() -> h
    org.andengine.opengl.font.FontManager getFontManager() -> i
    org.andengine.audio.sound.SoundManager getSoundManager() -> j
    org.andengine.audio.music.MusicManager getMusicManager() -> k
    void registerUpdateHandler(org.andengine.engine.handler.IUpdateHandler) -> a
    void unregisterUpdateHandler(org.andengine.engine.handler.IUpdateHandler) -> b
    void onAccuracyChanged(android.hardware.Sensor,int) -> onAccuracyChanged
    void onSensorChanged(android.hardware.SensorEvent) -> onSensorChanged
    void onLocationChanged(android.location.Location) -> onLocationChanged
    void onProviderDisabled(java.lang.String) -> onProviderDisabled
    void onProviderEnabled(java.lang.String) -> onProviderEnabled
    void onStatusChanged(java.lang.String,int,android.os.Bundle) -> onStatusChanged
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
    boolean onTouchEvent(org.andengine.input.touch.TouchEvent) -> a
    boolean onTouchHUD(org.andengine.engine.camera.Camera,org.andengine.input.touch.TouchEvent) -> a
    boolean onTouchScene(org.andengine.entity.scene.Scene,org.andengine.input.touch.TouchEvent) -> a
    void runOnUpdateThread(java.lang.Runnable) -> a
    void runOnUpdateThread(java.lang.Runnable,boolean) -> a
    void onDestroy() -> l
    void onReloadResources() -> m
    org.andengine.engine.camera.Camera getCameraFromSurfaceTouchEvent(org.andengine.input.touch.TouchEvent) -> b
    org.andengine.entity.scene.Scene getSceneFromSurfaceTouchEvent(org.andengine.input.touch.TouchEvent) -> c
    void convertSurfaceTouchEventToSceneTouchEvent(org.andengine.engine.camera.Camera,org.andengine.input.touch.TouchEvent) -> b
    void onTickUpdate() -> n
    void throwOnDestroyed() -> o
    void onUpdate(long) -> a
    void onUpdateScene(float) -> a
    void onUpdateUpdateHandlers(float) -> b
    void onUpdateDrawHandlers(org.andengine.opengl.util.GLState,org.andengine.engine.camera.Camera) -> a
    void onDrawFrame(org.andengine.opengl.util.GLState) -> a
    void onDrawScene(org.andengine.opengl.util.GLState,org.andengine.engine.camera.Camera) -> b
    long getNanosecondsElapsed() -> p
    void releaseDefaultDisplay() -> q
    int getDisplayOrientation() -> r
org.andengine.engine.Engine$EngineDestroyedException -> org.andengine.b.b:
    org.andengine.engine.Engine this$0 -> a
org.andengine.engine.Engine$EngineLock -> org.andengine.b.c:
    java.util.concurrent.locks.Condition mDrawingCondition -> a
    java.util.concurrent.atomic.AtomicBoolean mDrawing -> b
    void notifyCanDraw() -> a
    void notifyCanUpdate() -> b
    void waitUntilCanDraw() -> c
    void waitUntilCanUpdate() -> d
org.andengine.engine.Engine$UpdateThread -> org.andengine.b.d:
    org.andengine.engine.Engine mEngine -> a
    org.andengine.engine.handler.runnable.RunnableHandler mRunnableHandler -> b
    void setEngine(org.andengine.engine.Engine) -> a
    void run() -> run
    void postRunnable(java.lang.Runnable) -> a
org.andengine.engine.LimitedFPSEngine -> org.andengine.b.e:
    long mPreferredFrameLengthNanoseconds -> e
    void onUpdate(long) -> a
org.andengine.engine.camera.Camera -> org.andengine.b.a.a:
    float[] VERTICES_TMP -> a
    float mXMin -> b
    float mXMax -> c
    float mYMin -> d
    float mYMax -> e
    float mZNear -> n
    float mZFar -> o
    org.andengine.engine.camera.hud.HUD mHUD -> p
    org.andengine.entity.IEntity mChaseEntity -> q
    float mRotation -> f
    float mCameraSceneRotation -> g
    int mSurfaceX -> h
    int mSurfaceY -> i
    int mSurfaceWidth -> j
    int mSurfaceHeight -> k
    boolean mResizeOnSurfaceSizeChanged -> l
    org.andengine.engine.handler.UpdateHandlerList mUpdateHandlers -> m
    float getXMin() -> a
    float getXMax() -> b
    float getYMin() -> c
    float getYMax() -> d
    void set(float,float,float,float) -> a
    float getCameraSceneWidth() -> e
    float getCameraSceneHeight() -> f
    float getCenterX() -> g
    float getCenterY() -> h
    void setCenter(float,float) -> a
    org.andengine.engine.camera.hud.HUD getHUD() -> i
    void setHUD(org.andengine.engine.camera.hud.HUD) -> a
    boolean hasHUD() -> j
    float getRotation() -> k
    void setSurfaceSize(int,int,int,int) -> a
    void onUpdate(float) -> a
    void reset() -> l
    void onDrawHUD(org.andengine.opengl.util.GLState) -> a
    void updateChaseEntity() -> m
    void onApplySceneMatrix(org.andengine.opengl.util.GLState) -> b
    void onApplySceneBackgroundMatrix(org.andengine.opengl.util.GLState) -> c
    void onApplyCameraSceneMatrix(org.andengine.opengl.util.GLState) -> d
    void applyRotation(org.andengine.opengl.util.GLState,float,float,float) -> a
    void convertSceneTouchEventToCameraSceneTouchEvent(org.andengine.input.touch.TouchEvent) -> a
    void convertCameraSceneTouchEventToSceneTouchEvent(org.andengine.input.touch.TouchEvent) -> b
    void applySceneToCameraSceneOffset(org.andengine.input.touch.TouchEvent) -> c
    void unapplySceneToCameraSceneOffset(org.andengine.input.touch.TouchEvent) -> d
    void applySceneRotation(org.andengine.input.touch.TouchEvent) -> e
    void unapplySceneRotation(org.andengine.input.touch.TouchEvent) -> f
    void applyCameraSceneRotation(org.andengine.input.touch.TouchEvent) -> g
    void unapplyCameraSceneRotation(org.andengine.input.touch.TouchEvent) -> h
    void convertSurfaceTouchEventToSceneTouchEvent(org.andengine.input.touch.TouchEvent,int,int) -> a
    void convertAxisAlignedSurfaceTouchEventToSceneTouchEvent(org.andengine.input.touch.TouchEvent,float,float) -> a
    void onSurfaceSizeInitialized(int,int,int,int) -> b
    void onSurfaceSizeChanged(int,int,int,int,int,int,int,int) -> a
org.andengine.engine.camera.hud.HUD -> org.andengine.b.a.a.a:
org.andengine.engine.handler.DrawHandlerList -> org.andengine.b.b.a:
    void onDraw(org.andengine.opengl.util.GLState,org.andengine.engine.camera.Camera) -> a
org.andengine.engine.handler.IDrawHandler -> org.andengine.b.b.b:
    void onDraw(org.andengine.opengl.util.GLState,org.andengine.engine.camera.Camera) -> a
org.andengine.engine.handler.IUpdateHandler -> org.andengine.b.b.c:
    void onUpdate(float) -> a
    void reset() -> l
org.andengine.engine.handler.UpdateHandlerList -> org.andengine.b.b.d:
    void onUpdate(float) -> a
    void reset() -> l
org.andengine.engine.handler.runnable.RunnableHandler -> org.andengine.b.b.a.a:
    java.util.ArrayList mRunnables -> a
    void onUpdate(float) -> a
    void reset() -> l
    void postRunnable(java.lang.Runnable) -> a
org.andengine.engine.handler.timer.ITimerCallback -> org.andengine.b.b.b.a:
    void onTimePassed(org.andengine.engine.handler.timer.TimerHandler) -> a
org.andengine.engine.handler.timer.TimerHandler -> org.andengine.b.b.b.b:
    float mTimerSeconds -> b
    float mTimerSecondsElapsed -> c
    boolean mTimerCallbackTriggered -> d
    org.andengine.engine.handler.timer.ITimerCallback mTimerCallback -> a
    boolean mAutoReset -> e
    void onUpdate(float) -> a
    void reset() -> l
org.andengine.engine.options.AudioOptions -> org.andengine.b.c.a:
    org.andengine.engine.options.SoundOptions mSoundOptions -> a
    org.andengine.engine.options.MusicOptions mMusicOptions -> b
    org.andengine.engine.options.SoundOptions getSoundOptions() -> a
    boolean needsSound() -> b
    org.andengine.engine.options.AudioOptions setNeedsSound(boolean) -> a
    boolean needsMusic() -> c
    org.andengine.engine.options.AudioOptions setNeedsMusic(boolean) -> b
org.andengine.engine.options.ConfigChooserOptions -> org.andengine.b.c.b:
    boolean mRequestedMultiSampling -> a
    int mRequestedRedSize -> b
    int mRequestedGreenSize -> c
    int mRequestedBlueSize -> d
    int mRequestedAlphaSize -> e
    int mRequestedDepthSize -> f
    int mRequestedStencilSize -> g
    boolean isRequestedMultiSampling() -> a
    int getRequestedRedSize() -> b
    int getRequestedGreenSize() -> c
    int getRequestedBlueSize() -> d
    int getRequestedAlphaSize() -> e
    int getRequestedDepthSize() -> f
    int getRequestedStencilSize() -> g
    boolean isRequestedRGBA8888() -> h
    boolean isRequestedRGB565() -> i
org.andengine.engine.options.EngineOptions -> org.andengine.b.c.c:
    org.andengine.engine.Engine$EngineLock mEngineLock -> a
    boolean mFullscreen -> b
    org.andengine.engine.options.ScreenOrientation mScreenOrientation -> c
    org.andengine.engine.options.resolutionpolicy.IResolutionPolicy mResolutionPolicy -> d
    org.andengine.engine.camera.Camera mCamera -> e
    org.andengine.engine.options.TouchOptions mTouchOptions -> f
    org.andengine.engine.options.AudioOptions mAudioOptions -> g
    org.andengine.engine.options.RenderOptions mRenderOptions -> h
    org.andengine.engine.options.WakeLockOptions mWakeLockOptions -> i
    org.andengine.engine.Engine$UpdateThread mUpdateThread -> j
    int mUpdateThreadPriority -> k
    boolean hasEngineLock() -> a
    org.andengine.engine.Engine$EngineLock getEngineLock() -> b
    org.andengine.engine.options.TouchOptions getTouchOptions() -> c
    org.andengine.engine.options.AudioOptions getAudioOptions() -> d
    org.andengine.engine.options.RenderOptions getRenderOptions() -> e
    boolean isFullscreen() -> f
    org.andengine.engine.options.ScreenOrientation getScreenOrientation() -> g
    org.andengine.engine.options.resolutionpolicy.IResolutionPolicy getResolutionPolicy() -> h
    org.andengine.engine.camera.Camera getCamera() -> i
    boolean hasUpdateThread() -> j
    org.andengine.engine.Engine$UpdateThread getUpdateThread() -> k
    int getUpdateThreadPriority() -> l
    org.andengine.engine.options.WakeLockOptions getWakeLockOptions() -> m
    org.andengine.engine.options.EngineOptions setWakeLockOptions(org.andengine.engine.options.WakeLockOptions) -> a
org.andengine.engine.options.MusicOptions -> org.andengine.b.c.d:
    boolean mNeedsMusic -> a
    boolean needsMusic() -> a
    org.andengine.engine.options.MusicOptions setNeedsMusic(boolean) -> a
org.andengine.engine.options.RenderOptions -> org.andengine.b.c.e:
    boolean mDithering -> a
    org.andengine.engine.options.ConfigChooserOptions mConfigChooserOptions -> b
    boolean isDithering() -> a
    org.andengine.engine.options.ConfigChooserOptions getConfigChooserOptions() -> b
org.andengine.engine.options.ScreenOrientation -> org.andengine.b.c.f:
    org.andengine.engine.options.ScreenOrientation LANDSCAPE_FIXED -> a
    org.andengine.engine.options.ScreenOrientation LANDSCAPE_SENSOR -> b
    org.andengine.engine.options.ScreenOrientation PORTRAIT_FIXED -> c
    org.andengine.engine.options.ScreenOrientation PORTRAIT_SENSOR -> d
    org.andengine.engine.options.ScreenOrientation[] ENUM$VALUES -> e
    org.andengine.engine.options.ScreenOrientation[] values() -> values
    org.andengine.engine.options.ScreenOrientation valueOf(java.lang.String) -> valueOf
org.andengine.engine.options.SoundOptions -> org.andengine.b.c.g:
    boolean mNeedsSound -> a
    int mMaxSimultaneousStreams -> b
    boolean needsSound() -> a
    org.andengine.engine.options.SoundOptions setNeedsSound(boolean) -> a
    int getMaxSimultaneousStreams() -> b
org.andengine.engine.options.TouchOptions -> org.andengine.b.c.h:
    boolean mNeedsMultiTouch -> a
    long mTouchEventIntervalMilliseconds -> b
    boolean needsMultiTouch() -> a
    long getTouchEventIntervalMilliseconds() -> b
org.andengine.engine.options.WakeLockOptions -> org.andengine.b.c.i:
    org.andengine.engine.options.WakeLockOptions BRIGHT -> a
    org.andengine.engine.options.WakeLockOptions SCREEN_BRIGHT -> b
    org.andengine.engine.options.WakeLockOptions SCREEN_DIM -> c
    org.andengine.engine.options.WakeLockOptions SCREEN_ON -> d
    int mFlag -> e
    org.andengine.engine.options.WakeLockOptions[] ENUM$VALUES -> f
    int getFlag() -> a
    org.andengine.engine.options.WakeLockOptions[] values() -> values
    org.andengine.engine.options.WakeLockOptions valueOf(java.lang.String) -> valueOf
org.andengine.engine.options.resolutionpolicy.BaseResolutionPolicy -> org.andengine.b.c.a.a:
    void throwOnNotMeasureSpecEXACTLY(int,int) -> a
org.andengine.engine.options.resolutionpolicy.FillResolutionPolicy -> org.andengine.b.c.a.b:
    void onMeasure(org.andengine.engine.options.resolutionpolicy.IResolutionPolicy$Callback,int,int) -> a
org.andengine.engine.options.resolutionpolicy.IResolutionPolicy -> org.andengine.b.c.a.c:
    void onMeasure(org.andengine.engine.options.resolutionpolicy.IResolutionPolicy$Callback,int,int) -> a
org.andengine.engine.options.resolutionpolicy.IResolutionPolicy$Callback -> org.andengine.b.c.a.d:
    void onResolutionChanged(int,int) -> a
org.andengine.entity.Entity -> org.andengine.c.a:
    float[] VERTICES_SCENE_TO_LOCAL_TMP -> a
    float[] VERTICES_LOCAL_TO_SCENE_TMP -> b
    float[] VERTICES_PARENT_TO_LOCAL_TMP -> c
    float[] VERTICES_LOCAL_TO_PARENT_TMP -> d
    org.andengine.util.call.ParameterCallable PARAMETERCALLABLE_DETACHCHILD -> e
    boolean mDisposed -> f
    boolean mVisible -> g
    boolean mCullingEnabled -> h
    boolean mIgnoreUpdate -> i
    boolean mChildrenVisible -> j
    boolean mChildrenIgnoreUpdate -> k
    boolean mChildrenSortPending -> l
    int mTag -> m
    int mZIndex -> n
    org.andengine.entity.IEntity mParent -> P
    org.andengine.util.adt.list.SmartList mChildren -> o
    org.andengine.entity.modifier.EntityModifierList mEntityModifiers -> Q
    org.andengine.engine.handler.UpdateHandlerList mUpdateHandlers -> R
    org.andengine.util.adt.color.Color mColor -> p
    float mX -> q
    float mY -> r
    float mOffsetCenterX -> s
    float mOffsetCenterY -> t
    float mLocalOffsetCenterX -> u
    float mLocalOffsetCenterY -> v
    float mWidth -> w
    float mHeight -> x
    float mRotation -> y
    float mRotationCenterX -> z
    float mRotationCenterY -> A
    float mLocalRotationCenterX -> B
    float mLocalRotationCenterY -> C
    float mScaleX -> D
    float mScaleY -> E
    float mScaleCenterX -> F
    float mScaleCenterY -> G
    float mLocalScaleCenterX -> H
    float mLocalScaleCenterY -> I
    float mSkewX -> J
    float mSkewY -> K
    float mSkewCenterX -> L
    float mSkewCenterY -> M
    float mLocalSkewCenterX -> N
    float mLocalSkewCenterY -> O
    boolean mLocalToParentTransformationDirty -> S
    boolean mParentToLocalTransformationDirty -> T
    org.andengine.util.adt.transformation.Transformation mLocalToParentTransformation -> U
    org.andengine.util.adt.transformation.Transformation mParentToLocalTransformation -> V
    org.andengine.util.adt.transformation.Transformation mLocalToSceneTransformation -> W
    org.andengine.util.adt.transformation.Transformation mSceneToLocalTransformation -> X
    void onUpdateColor() -> g
    boolean isDisposed() -> h
    boolean isVisible() -> i
    boolean isCulled(org.andengine.engine.camera.Camera) -> a
    boolean contains(float,float) -> a
    boolean onAreaTouched(org.andengine.input.touch.TouchEvent,float,float) -> a
    boolean hasParent() -> j
    org.andengine.entity.IEntity getParent() -> k
    void setParent(org.andengine.entity.IEntity) -> a
    int getZIndex() -> m
    float getX() -> n
    float getY() -> o
    void setX(float) -> b
    void setY(float) -> c
    void setPosition(float,float) -> b
    float getWidth() -> p
    void setWidth(float) -> d
    float getHeight() -> q
    void setHeight(float) -> e
    void setSize(float,float) -> c
    void setOffsetCenter(float,float) -> d
    void setRotationCenter(float,float) -> e
    void setScale(float) -> f
    void setScale(float,float) -> f
    void setScaleCenter(float,float) -> g
    void setSkewCenter(float,float) -> h
    void setAnchorCenter(float,float) -> i
    org.andengine.util.adt.color.Color getColor() -> r
    void setColor(org.andengine.util.adt.color.Color) -> a
    void setAlpha(float) -> g
    boolean detachSelf() -> s
    void detachChildren() -> t
    void attachChild(org.andengine.entity.IEntity) -> b
    boolean detachChild(org.andengine.entity.IEntity) -> c
    void registerUpdateHandler(org.andengine.engine.handler.IUpdateHandler) -> a
    void resetEntityModifiers() -> u
    float[] getSceneCenterCoordinates() -> v
    org.andengine.util.adt.transformation.Transformation getLocalToParentTransformation() -> w
    org.andengine.util.adt.transformation.Transformation getParentToLocalTransformation() -> x
    org.andengine.util.adt.transformation.Transformation getLocalToSceneTransformation() -> y
    org.andengine.util.adt.transformation.Transformation getSceneToLocalTransformation() -> z
    float[] convertLocalCoordinatesToSceneCoordinates(float,float) -> j
    float[] convertLocalCoordinatesToSceneCoordinates(float,float,float[]) -> a
    float[] convertSceneCoordinatesToLocalCoordinates(float,float) -> k
    float[] convertSceneCoordinatesToLocalCoordinates(float,float,float[]) -> b
    void onAttached() -> A
    void onDetached() -> B
    void onDraw(org.andengine.opengl.util.GLState,org.andengine.engine.camera.Camera) -> a
    void onUpdate(float) -> a
    void reset() -> l
    void dispose() -> C
    void finalize() -> finalize
    java.lang.String toString() -> toString
    void toString(java.lang.StringBuilder) -> a
    void preDraw(org.andengine.opengl.util.GLState,org.andengine.engine.camera.Camera) -> a_
    void draw(org.andengine.opengl.util.GLState,org.andengine.engine.camera.Camera) -> b
    void postDraw(org.andengine.opengl.util.GLState,org.andengine.engine.camera.Camera) -> c
    void allocateChildren() -> a
    void allocateUpdateHandlers() -> b
    void onApplyTransformations(org.andengine.opengl.util.GLState) -> a
    void applyOffset(org.andengine.opengl.util.GLState) -> b
    void applyTranslation(org.andengine.opengl.util.GLState) -> c
    void applyRotation(org.andengine.opengl.util.GLState) -> d
    void applySkew(org.andengine.opengl.util.GLState) -> e
    void applyScale(org.andengine.opengl.util.GLState) -> f
    void onManagedDraw(org.andengine.opengl.util.GLState,org.andengine.engine.camera.Camera) -> d
    void onManagedUpdate(float) -> h
    void updateLocalCenters() -> D
    void updateLocalCenterXs() -> E
    void updateLocalCenterYs() -> F
    void updateLocalOffsetCenter() -> G
    void updateLocalOffsetCenterX() -> H
    void updateLocalOffsetCenterY() -> I
    void updateLocalRotationCenter() -> J
    void updateLocalRotationCenterX() -> K
    void updateLocalRotationCenterY() -> L
    void updateLocalScaleCenter() -> M
    void updateLocalScaleCenterX() -> N
    void updateLocalScaleCenterY() -> O
    void updateLocalSkewCenter() -> P
    void updateLocalSkewCenterX() -> Q
    void updateLocalSkewCenterY() -> R
    void resetRotationCenter() -> S
    void resetScaleCenter() -> T
    void resetSkewCenter() -> U
    void assertEntityHasNoParent(org.andengine.entity.IEntity) -> d
org.andengine.entity.Entity$1 -> org.andengine.c.b:
    void call(org.andengine.entity.IEntity) -> a
    void call(java.lang.Object) -> a
org.andengine.entity.IEntity -> org.andengine.c.c:
    int getZIndex() -> m
    boolean hasParent() -> j
    org.andengine.entity.IEntity getParent() -> k
    void setParent(org.andengine.entity.IEntity) -> a
    void setPosition(float,float) -> b
    float getWidth() -> p
    float getHeight() -> q
    void setScale(float) -> f
    float[] getSceneCenterCoordinates() -> v
    float[] convertSceneCoordinatesToLocalCoordinates(float,float) -> k
    org.andengine.util.adt.transformation.Transformation getLocalToSceneTransformation() -> y
    org.andengine.util.adt.transformation.Transformation getSceneToLocalTransformation() -> z
    void onAttached() -> A
    void onDetached() -> B
    boolean detachChild(org.andengine.entity.IEntity) -> c
    void toString(java.lang.StringBuilder) -> a
org.andengine.entity.ZIndexSorter -> org.andengine.c.d:
    org.andengine.entity.ZIndexSorter INSTANCE -> a
    java.util.Comparator mZIndexComparator -> b
    org.andengine.entity.ZIndexSorter getInstance() -> a
    void sort(java.util.List) -> a
org.andengine.entity.ZIndexSorter$1 -> org.andengine.c.e:
    org.andengine.entity.ZIndexSorter this$0 -> a
    int compare(org.andengine.entity.IEntity,org.andengine.entity.IEntity) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
org.andengine.entity.modifier.EntityModifierList -> org.andengine.c.a.a:
org.andengine.entity.primitive.Rectangle -> org.andengine.c.b.a:
    org.andengine.opengl.vbo.attribute.VertexBufferObjectAttributes VERTEXBUFFEROBJECTATTRIBUTES_DEFAULT -> a
    org.andengine.entity.primitive.vbo.IRectangleVertexBufferObject mRectangleVertexBufferObject -> b
    org.andengine.entity.primitive.vbo.IRectangleVertexBufferObject getVertexBufferObject() -> a
    void preDraw(org.andengine.opengl.util.GLState,org.andengine.engine.camera.Camera) -> a_
    void draw(org.andengine.opengl.util.GLState,org.andengine.engine.camera.Camera) -> b
    void postDraw(org.andengine.opengl.util.GLState,org.andengine.engine.camera.Camera) -> c
    void onUpdateColor() -> g
    void onUpdateVertices() -> a_
    org.andengine.opengl.vbo.IVertexBufferObject getVertexBufferObject() -> c
org.andengine.entity.primitive.vbo.HighPerformanceRectangleVertexBufferObject -> org.andengine.c.b.a.a:
    void onUpdateColor(org.andengine.entity.primitive.Rectangle) -> a
    void onUpdateVertices(org.andengine.entity.primitive.Rectangle) -> b
org.andengine.entity.primitive.vbo.IRectangleVertexBufferObject -> org.andengine.c.b.a.b:
    void onUpdateColor(org.andengine.entity.primitive.Rectangle) -> a
    void onUpdateVertices(org.andengine.entity.primitive.Rectangle) -> b
org.andengine.entity.scene.CameraScene -> org.andengine.c.c.a:
    org.andengine.engine.camera.Camera mCamera -> a
    void setCamera(org.andengine.engine.camera.Camera) -> b
    float getWidth() -> p
    float getHeight() -> q
    void setWidth(float) -> d
    void setHeight(float) -> e
    void setSize(float,float) -> c
    boolean onSceneTouchEvent(org.andengine.input.touch.TouchEvent) -> a
    boolean onChildSceneTouchEvent(org.andengine.input.touch.TouchEvent) -> b
    void onApplyMatrix(org.andengine.opengl.util.GLState,org.andengine.engine.camera.Camera) -> e
org.andengine.entity.scene.IOnAreaTouchListener -> org.andengine.c.c.b:
    boolean onAreaTouched(org.andengine.input.touch.TouchEvent,org.andengine.entity.scene.ITouchArea,float,float) -> a
org.andengine.entity.scene.IOnSceneTouchListener -> org.andengine.c.c.c:
    boolean onSceneTouchEvent(org.andengine.entity.scene.Scene,org.andengine.input.touch.TouchEvent) -> a
org.andengine.entity.scene.ITouchArea -> org.andengine.c.c.d:
    boolean contains(float,float) -> a
    float[] convertSceneCoordinatesToLocalCoordinates(float,float) -> k
    boolean onAreaTouched(org.andengine.input.touch.TouchEvent,float,float) -> a
org.andengine.entity.scene.Scene -> org.andengine.c.c.e:
    float mSecondsElapsedTotal -> a
    org.andengine.entity.scene.Scene mParentScene -> P
    org.andengine.entity.scene.Scene mChildScene -> Q
    boolean mChildSceneModalDraw -> b
    boolean mChildSceneModalUpdate -> c
    boolean mChildSceneModalTouch -> d
    org.andengine.util.adt.list.SmartList mTouchAreas -> R
    org.andengine.engine.handler.runnable.RunnableHandler mRunnableHandler -> e
    org.andengine.entity.scene.IOnSceneTouchListener mOnSceneTouchListener -> S
    org.andengine.entity.scene.IOnAreaTouchListener mOnAreaTouchListener -> T
    org.andengine.entity.scene.background.IBackground mBackground -> U
    boolean mBackgroundEnabled -> V
    boolean mOnAreaTouchTraversalBackToFront -> W
    boolean mTouchAreaBindingOnActionDownEnabled -> X
    boolean mTouchAreaBindingOnActionMoveEnabled -> Y
    android.util.SparseArray mTouchAreaBindings -> Z
    boolean mOnSceneTouchListenerBindingOnActionDownEnabled -> aa
    android.util.SparseArray mOnSceneTouchListenerBindings -> ab
    void setBackground(org.andengine.entity.scene.background.IBackground) -> a
    void setBackgroundEnabled(boolean) -> a
    void setOnSceneTouchListener(org.andengine.entity.scene.IOnSceneTouchListener) -> a
    void setOnAreaTouchListener(org.andengine.entity.scene.IOnAreaTouchListener) -> a
    void setParentScene(org.andengine.entity.scene.Scene) -> b
    org.andengine.entity.scene.Scene getChildScene() -> V
    void setChildScene(org.andengine.entity.scene.Scene) -> a
    void setChildScene(org.andengine.entity.scene.Scene,boolean,boolean,boolean) -> a
    void clearChildScene() -> W
    void onManagedDraw(org.andengine.opengl.util.GLState,org.andengine.engine.camera.Camera) -> d
    void onApplyMatrix(org.andengine.opengl.util.GLState,org.andengine.engine.camera.Camera) -> e
    void onManagedUpdate(float) -> h
    boolean onSceneTouchEvent(org.andengine.input.touch.TouchEvent) -> a
    java.lang.Boolean onAreaTouchEvent(org.andengine.input.touch.TouchEvent,float,float,org.andengine.entity.scene.ITouchArea) -> a
    boolean onChildSceneTouchEvent(org.andengine.input.touch.TouchEvent) -> b
    void reset() -> l
    void setParent(org.andengine.entity.IEntity) -> a
    void registerTouchArea(org.andengine.entity.scene.ITouchArea) -> a
    boolean unregisterTouchArea(org.andengine.entity.scene.ITouchArea) -> b
    void clearTouchAreas() -> X
org.andengine.entity.scene.background.Background -> org.andengine.c.c.a.a:
    org.andengine.util.modifier.ModifierList mBackgroundModifiers -> a
    org.andengine.util.adt.color.Color mColor -> b
    boolean mColorEnabled -> c
    void onUpdate(float) -> a
    void onDraw(org.andengine.opengl.util.GLState,org.andengine.engine.camera.Camera) -> a
    void reset() -> l
org.andengine.entity.scene.background.IBackground -> org.andengine.c.c.a.b:
org.andengine.entity.scene.menu.MenuScene -> org.andengine.c.c.b.a:
    java.util.ArrayList mMenuItems -> b
    org.andengine.entity.scene.menu.MenuScene$IOnMenuItemClickListener mOnMenuItemClickListener -> c
    org.andengine.entity.scene.menu.animator.IMenuSceneAnimator mMenuSceneAnimator -> d
    org.andengine.entity.scene.menu.item.IMenuItem mSelectedMenuItem -> e
    void setOnMenuItemClickListener(org.andengine.entity.scene.menu.MenuScene$IOnMenuItemClickListener) -> a
    org.andengine.entity.scene.menu.item.IMenuItem getMenuItem(int) -> a
    int getMenuItemCount() -> a
    void addMenuItem(org.andengine.entity.scene.menu.item.IMenuItem) -> a
    org.andengine.entity.scene.menu.MenuScene getChildScene() -> b
    void setChildScene(org.andengine.entity.scene.Scene,boolean,boolean,boolean) -> a
    void clearChildScene() -> W
    boolean onAreaTouched(org.andengine.input.touch.TouchEvent,org.andengine.entity.scene.ITouchArea,float,float) -> a
    boolean onSceneTouchEvent(org.andengine.entity.scene.Scene,org.andengine.input.touch.TouchEvent) -> a
    void buildAnimations() -> c
    org.andengine.entity.scene.Scene getChildScene() -> V
org.andengine.entity.scene.menu.MenuScene$IOnMenuItemClickListener -> org.andengine.c.c.b.b:
    boolean onMenuItemClicked(org.andengine.entity.scene.menu.MenuScene,org.andengine.entity.scene.menu.item.IMenuItem,float,float) -> a
org.andengine.entity.scene.menu.animator.IMenuSceneAnimator -> org.andengine.c.c.b.a.a:
    void buildMenuSceneAnimations(org.andengine.entity.scene.menu.MenuScene) -> a
org.andengine.entity.scene.menu.animator.InstantMenuSceneAnimator -> org.andengine.c.c.b.a.b:
    void onMenuItemPositionBuilt(org.andengine.entity.scene.menu.MenuScene,int,org.andengine.entity.scene.menu.item.IMenuItem,float,float) -> a
org.andengine.entity.scene.menu.animator.MenuSceneAnimator -> org.andengine.c.c.b.a.c:
    org.andengine.util.adt.align.HorizontalAlign HORIZONTALALIGN_DEFAULT -> g
    org.andengine.util.adt.align.VerticalAlign VERTICALALIGN_DEFAULT -> h
    org.andengine.util.adt.align.HorizontalAlign mHorizontalAlign -> a
    org.andengine.util.adt.align.VerticalAlign mVerticalAlign -> b
    float mOffsetX -> c
    float mOffsetY -> d
    float mMenuItemSpacing -> e
    float mOverallHeight -> f
    int[] $SWITCH_TABLE$org$andengine$util$adt$align$HorizontalAlign -> i
    int[] $SWITCH_TABLE$org$andengine$util$adt$align$VerticalAlign -> j
    void onMenuItemPositionBuilt(org.andengine.entity.scene.menu.MenuScene,int,org.andengine.entity.scene.menu.item.IMenuItem,float,float) -> a
    void buildMenuSceneAnimations(org.andengine.entity.scene.menu.MenuScene) -> a
    float getMenuItemX(org.andengine.entity.scene.menu.MenuScene,int) -> a
    float getMenuItemY(org.andengine.entity.scene.menu.MenuScene,int) -> b
    void updateOverallHeight(org.andengine.entity.scene.menu.MenuScene) -> b
    int[] $SWITCH_TABLE$org$andengine$util$adt$align$HorizontalAlign() -> a
    int[] $SWITCH_TABLE$org$andengine$util$adt$align$VerticalAlign() -> b
org.andengine.entity.scene.menu.item.IMenuItem -> org.andengine.c.c.b.b.a:
    int getID() -> a
    void onSelected() -> b
    void onUnselected() -> d
org.andengine.entity.scene.menu.item.SpriteMenuItem -> org.andengine.c.c.b.b.b:
    int mID -> a
    int getID() -> a
    void onSelected() -> b
    void onUnselected() -> d
org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator -> org.andengine.c.c.b.b.a.a:
    org.andengine.entity.scene.menu.item.IMenuItem mMenuItem -> b
    void onMenuItemSelected(org.andengine.entity.scene.menu.item.IMenuItem) -> a
    void onMenuItemUnselected(org.andengine.entity.scene.menu.item.IMenuItem) -> b
    void onMenuItemReset(org.andengine.entity.scene.menu.item.IMenuItem) -> c
    int getID() -> a
    org.andengine.opengl.vbo.IVertexBufferObject getVertexBufferObject() -> c
    void onSelected() -> b
    void onUnselected() -> d
    void setPosition(float,float) -> b
    float getWidth() -> p
    float getHeight() -> q
    void setScale(float) -> f
    float[] getSceneCenterCoordinates() -> v
    int getZIndex() -> m
    void onDraw(org.andengine.opengl.util.GLState,org.andengine.engine.camera.Camera) -> a
    void onUpdate(float) -> a
    void reset() -> l
    boolean isDisposed() -> h
    void dispose() -> C
    boolean contains(float,float) -> a
    float[] convertSceneCoordinatesToLocalCoordinates(float,float) -> k
    boolean onAreaTouched(org.andengine.input.touch.TouchEvent,float,float) -> a
    boolean detachChild(org.andengine.entity.IEntity) -> c
    org.andengine.util.adt.transformation.Transformation getLocalToSceneTransformation() -> y
    org.andengine.util.adt.transformation.Transformation getSceneToLocalTransformation() -> z
    boolean hasParent() -> j
    org.andengine.entity.IEntity getParent() -> k
    void setParent(org.andengine.entity.IEntity) -> a
    void onAttached() -> A
    void onDetached() -> B
    void toString(java.lang.StringBuilder) -> a
org.andengine.entity.scene.menu.item.decorator.ScaleMenuItemDecorator -> org.andengine.c.c.b.b.a.b:
    float mSelectedScale -> a
    float mUnselectedScale -> c
    void onMenuItemSelected(org.andengine.entity.scene.menu.item.IMenuItem) -> a
    void onMenuItemUnselected(org.andengine.entity.scene.menu.item.IMenuItem) -> b
    void onMenuItemReset(org.andengine.entity.scene.menu.item.IMenuItem) -> c
org.andengine.entity.shape.IShape -> org.andengine.c.d.a:
    org.andengine.opengl.vbo.IVertexBufferObject getVertexBufferObject() -> c
org.andengine.entity.shape.Shape -> org.andengine.c.d.b:
    int mBlendFunctionSource -> c
    int mBlendFunctionDestination -> d
    boolean mBlendingEnabled -> e
    org.andengine.opengl.shader.ShaderProgram mShaderProgram -> P
    void setBlendingEnabled(boolean) -> a
    void setBlendFunction(int,int) -> a
    void onUpdateVertices() -> a_
    void preDraw(org.andengine.opengl.util.GLState,org.andengine.engine.camera.Camera) -> a_
    void postDraw(org.andengine.opengl.util.GLState,org.andengine.engine.camera.Camera) -> c
    void setWidth(float) -> d
    void setHeight(float) -> e
    void setSize(float,float) -> c
    void reset() -> l
    void dispose() -> C
    void initBlendFunction(org.andengine.opengl.texture.region.ITextureRegion) -> a
    void initBlendFunction(org.andengine.opengl.texture.ITexture) -> a
    void initBlendFunction(org.andengine.opengl.texture.TextureOptions) -> a
org.andengine.entity.sprite.ButtonSprite -> org.andengine.c.e.a:
    int mStateCount -> a
    org.andengine.entity.sprite.ButtonSprite$OnClickListener mOnClickListener -> U
    boolean mEnabled -> V
    org.andengine.entity.sprite.ButtonSprite$State mState -> W
    boolean isEnabled() -> a
    boolean onAreaTouched(org.andengine.input.touch.TouchEvent,float,float) -> a
    boolean contains(float,float) -> a
    void changeState(org.andengine.entity.sprite.ButtonSprite$State) -> a
org.andengine.entity.sprite.ButtonSprite$OnClickListener -> org.andengine.c.e.b:
    void onClick(org.andengine.entity.sprite.ButtonSprite,float,float) -> a
org.andengine.entity.sprite.ButtonSprite$State -> org.andengine.c.e.c:
    org.andengine.entity.sprite.ButtonSprite$State NORMAL -> a
    org.andengine.entity.sprite.ButtonSprite$State PRESSED -> b
    org.andengine.entity.sprite.ButtonSprite$State DISABLED -> c
    int mTiledTextureRegionIndex -> d
    org.andengine.entity.sprite.ButtonSprite$State[] ENUM$VALUES -> e
    int getTiledTextureRegionIndex() -> a
    org.andengine.entity.sprite.ButtonSprite$State[] values() -> values
    org.andengine.entity.sprite.ButtonSprite$State valueOf(java.lang.String) -> valueOf
org.andengine.entity.sprite.Sprite -> org.andengine.c.e.d:
    org.andengine.opengl.vbo.attribute.VertexBufferObjectAttributes VERTEXBUFFEROBJECTATTRIBUTES_DEFAULT -> b
    org.andengine.opengl.texture.region.ITextureRegion mTextureRegion -> Q
    org.andengine.entity.sprite.vbo.ISpriteVertexBufferObject mSpriteVertexBufferObject -> R
    boolean mFlippedVertical -> S
    boolean mFlippedHorizontal -> T
    org.andengine.opengl.texture.region.ITextureRegion getTextureRegion() -> e
    boolean isFlippedHorizontal() -> f
    boolean isFlippedVertical() -> V
    org.andengine.entity.sprite.vbo.ISpriteVertexBufferObject getVertexBufferObject() -> W
    void reset() -> l
    void preDraw(org.andengine.opengl.util.GLState,org.andengine.engine.camera.Camera) -> a_
    void draw(org.andengine.opengl.util.GLState,org.andengine.engine.camera.Camera) -> b
    void postDraw(org.andengine.opengl.util.GLState,org.andengine.engine.camera.Camera) -> c
    void onUpdateVertices() -> a_
    void onUpdateColor() -> g
    void onUpdateTextureCoordinates() -> X
    org.andengine.opengl.vbo.IVertexBufferObject getVertexBufferObject() -> c
org.andengine.entity.sprite.TiledSprite -> org.andengine.c.e.e:
    int mCurrentTileIndex -> a
    org.andengine.entity.sprite.vbo.ITiledSpriteVertexBufferObject mTiledSpriteVertexBufferObject -> U
    org.andengine.opengl.texture.region.ITextureRegion getTextureRegion() -> e
    org.andengine.opengl.texture.region.ITiledTextureRegion getTiledTextureRegion() -> d
    org.andengine.entity.sprite.vbo.ITiledSpriteVertexBufferObject getVertexBufferObject() -> Y
    void draw(org.andengine.opengl.util.GLState,org.andengine.engine.camera.Camera) -> b
    void onUpdateColor() -> g
    void onUpdateVertices() -> a_
    void onUpdateTextureCoordinates() -> X
    void setCurrentTileIndex(int) -> a
    int getTileCount() -> Z
    org.andengine.opengl.vbo.IVertexBufferObject getVertexBufferObject() -> c
    org.andengine.entity.sprite.vbo.ISpriteVertexBufferObject getVertexBufferObject() -> W
org.andengine.entity.sprite.vbo.HighPerformanceSpriteVertexBufferObject -> org.andengine.c.e.a.a:
    void onUpdateColor(org.andengine.entity.sprite.Sprite) -> a
    void onUpdateVertices(org.andengine.entity.sprite.Sprite) -> b
    void onUpdateTextureCoordinates(org.andengine.entity.sprite.Sprite) -> c
org.andengine.entity.sprite.vbo.HighPerformanceTiledSpriteVertexBufferObject -> org.andengine.c.e.a.b:
    void onUpdateColor(org.andengine.entity.sprite.TiledSprite) -> a
    void onUpdateVertices(org.andengine.entity.sprite.TiledSprite) -> b
    void onUpdateTextureCoordinates(org.andengine.entity.sprite.TiledSprite) -> c
org.andengine.entity.sprite.vbo.ISpriteVertexBufferObject -> org.andengine.c.e.a.c:
    void onUpdateColor(org.andengine.entity.sprite.Sprite) -> a
    void onUpdateVertices(org.andengine.entity.sprite.Sprite) -> b
    void onUpdateTextureCoordinates(org.andengine.entity.sprite.Sprite) -> c
org.andengine.entity.sprite.vbo.ITiledSpriteVertexBufferObject -> org.andengine.c.e.a.d:
    void onUpdateColor(org.andengine.entity.sprite.TiledSprite) -> a
    void onUpdateVertices(org.andengine.entity.sprite.TiledSprite) -> b
    void onUpdateTextureCoordinates(org.andengine.entity.sprite.TiledSprite) -> c
org.andengine.entity.text.AutoWrap -> org.andengine.c.f.a:
    org.andengine.entity.text.AutoWrap NONE -> a
    org.andengine.entity.text.AutoWrap WORDS -> b
    org.andengine.entity.text.AutoWrap LETTERS -> c
    org.andengine.entity.text.AutoWrap CJK -> d
    org.andengine.entity.text.AutoWrap[] ENUM$VALUES -> e
    org.andengine.entity.text.AutoWrap[] values() -> values
    org.andengine.entity.text.AutoWrap valueOf(java.lang.String) -> valueOf
org.andengine.entity.text.Text -> org.andengine.c.f.b:
    org.andengine.opengl.vbo.attribute.VertexBufferObjectAttributes VERTEXBUFFEROBJECTATTRIBUTES_DEFAULT -> a
    org.andengine.opengl.font.IFont mFont -> b
    float mLineWidthMaximum -> Q
    float mLineAlignmentWidth -> R
    org.andengine.entity.text.TextOptions mTextOptions -> S
    int mCharactersMaximum -> T
    int mCharactersToDraw -> U
    int mVertexCountToDraw -> V
    int mVertexCount -> W
    org.andengine.entity.text.vbo.ITextVertexBufferObject mTextVertexBufferObject -> X
    java.lang.CharSequence mText -> Y
    java.util.ArrayList mLines -> Z
    org.andengine.util.adt.list.IFloatList mLineWidths -> aa
    org.andengine.opengl.font.IFont getFont() -> a
    int getCharactersMaximum() -> d
    void setText(java.lang.CharSequence) -> a
    java.util.ArrayList getLines() -> e
    org.andengine.util.adt.list.IFloatList getLineWidths() -> f
    float getLineAlignmentWidth() -> V
    float getLeading() -> W
    org.andengine.util.adt.align.HorizontalAlign getHorizontalAlign() -> X
    void setAutoWrap(org.andengine.entity.text.AutoWrap) -> a
    void setAutoWrapWidth(float) -> i
    void setCharactersToDraw(int) -> a
    org.andengine.entity.text.vbo.ITextVertexBufferObject getVertexBufferObject() -> Y
    void preDraw(org.andengine.opengl.util.GLState,org.andengine.engine.camera.Camera) -> a_
    void draw(org.andengine.opengl.util.GLState,org.andengine.engine.camera.Camera) -> b
    void postDraw(org.andengine.opengl.util.GLState,org.andengine.engine.camera.Camera) -> c
    void onUpdateColor() -> g
    void onUpdateVertices() -> a_
    void invalidateText() -> Z
    org.andengine.opengl.vbo.IVertexBufferObject getVertexBufferObject() -> c
org.andengine.entity.text.TextOptions -> org.andengine.c.f.c:
    org.andengine.entity.text.AutoWrap mAutoWrap -> a
    float mAutoWrapWidth -> b
    float mLeading -> c
    org.andengine.util.adt.align.HorizontalAlign mHorizontalAlign -> d
org.andengine.entity.text.exception.OutOfCharactersException -> org.andengine.c.f.a.a:
org.andengine.entity.text.exception.TextException -> org.andengine.c.f.a.b:
org.andengine.entity.text.vbo.HighPerformanceTextVertexBufferObject -> org.andengine.c.f.b.a:
    int[] $SWITCH_TABLE$org$andengine$util$adt$align$HorizontalAlign -> l
    void onUpdateColor(org.andengine.entity.text.Text) -> a
    void onUpdateVertices(org.andengine.entity.text.Text) -> b
    int[] $SWITCH_TABLE$org$andengine$util$adt$align$HorizontalAlign() -> a
org.andengine.entity.text.vbo.ITextVertexBufferObject -> org.andengine.c.f.b.b:
    void onUpdateColor(org.andengine.entity.text.Text) -> a
    void onUpdateVertices(org.andengine.entity.text.Text) -> b
org.andengine.input.sensor.BaseSensorData -> org.andengine.input.sensor.a:
    float[] mValues -> a
    int mAccuracy -> b
    int mDisplayRotation -> c
    void setValues(float[]) -> a
    void setAccuracy(int) -> a
    void setDisplayRotation(int) -> b
    java.lang.String toString() -> toString
org.andengine.input.sensor.SensorDelay -> org.andengine.input.sensor.b:
    org.andengine.input.sensor.SensorDelay NORMAL -> a
    org.andengine.input.sensor.SensorDelay UI -> b
    org.andengine.input.sensor.SensorDelay GAME -> c
    org.andengine.input.sensor.SensorDelay FASTEST -> d
    int mDelay -> e
    org.andengine.input.sensor.SensorDelay[] ENUM$VALUES -> f
    org.andengine.input.sensor.SensorDelay[] values() -> values
    org.andengine.input.sensor.SensorDelay valueOf(java.lang.String) -> valueOf
org.andengine.input.sensor.acceleration.AccelerationData -> org.andengine.input.sensor.a.a:
    org.andengine.input.sensor.acceleration.AccelerationData$IAxisSwap[] AXISSWAPS -> d
    void setValues(float[]) -> a
    java.lang.String toString() -> toString
org.andengine.input.sensor.acceleration.AccelerationData$1 -> org.andengine.input.sensor.a.b:
    void swapAxis(float[]) -> a
org.andengine.input.sensor.acceleration.AccelerationData$2 -> org.andengine.input.sensor.a.c:
    void swapAxis(float[]) -> a
org.andengine.input.sensor.acceleration.AccelerationData$3 -> org.andengine.input.sensor.a.d:
    void swapAxis(float[]) -> a
org.andengine.input.sensor.acceleration.AccelerationData$4 -> org.andengine.input.sensor.a.e:
    void swapAxis(float[]) -> a
org.andengine.input.sensor.acceleration.AccelerationData$IAxisSwap -> org.andengine.input.sensor.a.f:
    void swapAxis(float[]) -> a
org.andengine.input.sensor.acceleration.IAccelerationListener -> org.andengine.input.sensor.a.g:
    void onAccelerationAccuracyChanged(org.andengine.input.sensor.acceleration.AccelerationData) -> a
    void onAccelerationChanged(org.andengine.input.sensor.acceleration.AccelerationData) -> b
org.andengine.input.sensor.location.ILocationListener -> org.andengine.input.sensor.location.a:
    void onLocationProviderEnabled() -> a
    void onLocationChanged(android.location.Location) -> a
    void onLocationLost() -> b
    void onLocationProviderDisabled() -> c
    void onLocationProviderStatusChanged(org.andengine.input.sensor.location.LocationProviderStatus,android.os.Bundle) -> a
org.andengine.input.sensor.location.LocationProviderStatus -> org.andengine.input.sensor.location.b:
    org.andengine.input.sensor.location.LocationProviderStatus AVAILABLE -> a
    org.andengine.input.sensor.location.LocationProviderStatus OUT_OF_SERVICE -> b
    org.andengine.input.sensor.location.LocationProviderStatus TEMPORARILY_UNAVAILABLE -> c
    org.andengine.input.sensor.location.LocationProviderStatus[] ENUM$VALUES -> d
    org.andengine.input.sensor.location.LocationProviderStatus[] values() -> values
    org.andengine.input.sensor.location.LocationProviderStatus valueOf(java.lang.String) -> valueOf
org.andengine.input.sensor.location.LocationSensorOptions -> org.andengine.input.sensor.location.LocationSensorOptions:
    boolean mEnabledOnly -> a
    long mMinimumTriggerTime -> b
    long mMinimumTriggerDistance -> c
org.andengine.input.sensor.orientation.IOrientationListener -> org.andengine.input.sensor.b.a:
    void onOrientationAccuracyChanged(org.andengine.input.sensor.orientation.OrientationData) -> a
    void onOrientationChanged(org.andengine.input.sensor.orientation.OrientationData) -> b
org.andengine.input.sensor.orientation.OrientationData -> org.andengine.input.sensor.b.b:
    float[] mAccelerationValues -> d
    float[] mMagneticFieldValues -> e
    float[] mRotationMatrix -> f
    int mMagneticFieldAccuracy -> g
    void setValues(float[]) -> a
    void setAccuracy(int) -> a
    void setAccelerationValues(float[]) -> b
    void setMagneticFieldValues(float[]) -> c
    void updateOrientation() -> a
    void setAccelerationAccuracy(int) -> c
    void setMagneticFieldAccuracy(int) -> d
    java.lang.String toString() -> toString
org.andengine.input.touch.TouchEvent -> org.andengine.input.a.a:
    org.andengine.input.touch.TouchEvent$TouchEventPool TOUCHEVENT_POOL -> f
    int mPointerID -> a
    float mX -> b
    float mY -> c
    int mAction -> d
    android.view.MotionEvent mMotionEvent -> e
    org.andengine.input.touch.TouchEvent obtain(float,float,int,int,android.view.MotionEvent) -> a
    void set(float,float,int,int,android.view.MotionEvent) -> b
    void recycle() -> a
    float getX() -> b
    float getY() -> c
    void set(float,float) -> a
    void offset(float,float) -> b
    int getPointerID() -> d
    int getAction() -> e
    boolean isActionDown() -> f
    boolean isActionUp() -> g
    boolean isActionMove() -> h
    boolean isActionCancel() -> i
    android.view.MotionEvent getMotionEvent() -> j
org.andengine.input.touch.TouchEvent$TouchEventPool -> org.andengine.input.a.b:
    org.andengine.input.touch.TouchEvent onAllocatePoolItem() -> a
    java.lang.Object onAllocatePoolItem() -> b
org.andengine.input.touch.controller.BaseTouchController -> org.andengine.input.a.a.a:
    org.andengine.input.touch.controller.ITouchEventCallback mTouchEventCallback -> a
    org.andengine.util.adt.pool.RunnablePoolUpdateHandler mTouchEventRunnablePoolUpdateHandler -> b
    void setTouchEventCallback(org.andengine.input.touch.controller.ITouchEventCallback) -> a
    void reset() -> l
    void onUpdate(float) -> a
    void fireTouchEvent(float,float,int,int,android.view.MotionEvent) -> a
    org.andengine.input.touch.controller.ITouchEventCallback access$0(org.andengine.input.touch.controller.BaseTouchController) -> a
org.andengine.input.touch.controller.BaseTouchController$1 -> org.andengine.input.a.a.b:
    org.andengine.input.touch.controller.BaseTouchController this$0 -> a
    org.andengine.input.touch.controller.BaseTouchController$TouchEventRunnablePoolItem onAllocatePoolItem() -> a
    org.andengine.util.adt.pool.RunnablePoolItem onAllocatePoolItem() -> b
org.andengine.input.touch.controller.BaseTouchController$TouchEventRunnablePoolItem -> org.andengine.input.a.a.c:
    org.andengine.input.touch.TouchEvent mTouchEvent -> d
    org.andengine.input.touch.controller.BaseTouchController this$0 -> a
    void set(org.andengine.input.touch.TouchEvent) -> a
    void run() -> run
    void onRecycle() -> a
org.andengine.input.touch.controller.ITouchController -> org.andengine.input.a.a.d:
    void setTouchEventCallback(org.andengine.input.touch.controller.ITouchEventCallback) -> a
    void onHandleMotionEvent(android.view.MotionEvent) -> a
org.andengine.input.touch.controller.ITouchEventCallback -> org.andengine.input.a.a.e:
    boolean onTouchEvent(org.andengine.input.touch.TouchEvent) -> a
org.andengine.input.touch.controller.MultiTouchController -> org.andengine.input.a.a.f:
    void onHandleMotionEvent(android.view.MotionEvent) -> a
    void onHandleTouchMove(android.view.MotionEvent) -> b
    void onHandleTouchAction(int,android.view.MotionEvent) -> a
    int getPointerIndex(android.view.MotionEvent) -> c
org.andengine.input.touch.controller.SingleTouchController -> org.andengine.input.a.a.g:
    void onHandleMotionEvent(android.view.MotionEvent) -> a
org.andengine.input.touch.detector.BaseDetector -> org.andengine.input.a.b.a:
    boolean mEnabled -> a
    boolean onManagedTouchEvent(org.andengine.input.touch.TouchEvent) -> a
    boolean onSceneTouchEvent(org.andengine.entity.scene.Scene,org.andengine.input.touch.TouchEvent) -> a
    boolean onTouchEvent(org.andengine.input.touch.TouchEvent) -> b
org.andengine.input.touch.detector.ScrollDetector -> org.andengine.input.a.b.b:
    float mTriggerScrollMinimumDistance -> a
    org.andengine.input.touch.detector.ScrollDetector$IScrollDetectorListener mScrollDetectorListener -> b
    int mPointerID -> c
    boolean mTriggering -> d
    float mLastX -> e
    float mLastY -> f
    boolean onManagedTouchEvent(org.andengine.input.touch.TouchEvent) -> a
    void prepareScroll(int,float,float) -> a
    void triggerOnScrollStarted(float,float) -> a
    void triggerOnScroll(float,float) -> b
    void triggerOnScrollFinished(float,float) -> c
    float getX(org.andengine.input.touch.TouchEvent) -> c
    float getY(org.andengine.input.touch.TouchEvent) -> d
org.andengine.input.touch.detector.ScrollDetector$IScrollDetectorListener -> org.andengine.input.a.b.c:
    void onScrollStarted(org.andengine.input.touch.detector.ScrollDetector,int,float,float) -> a
    void onScroll(org.andengine.input.touch.detector.ScrollDetector,int,float,float) -> b
    void onScrollFinished(org.andengine.input.touch.detector.ScrollDetector,int,float,float) -> c
org.andengine.input.touch.detector.SurfaceScrollDetector -> org.andengine.input.a.b.d:
    float getX(org.andengine.input.touch.TouchEvent) -> c
    float getY(org.andengine.input.touch.TouchEvent) -> d
org.andengine.opengl.GLES20Fix -> org.andengine.opengl.GLES20Fix:
    boolean NATIVE_LIB_LOADED -> a
    boolean WORKAROUND_MISSING_GLES20_METHODS -> b
    void glVertexAttribPointer(int,int,int,boolean,int,int) -> glVertexAttribPointer
org.andengine.opengl.font.Font -> org.andengine.opengl.a.a:
    org.andengine.opengl.font.FontManager mFontManager -> f
    org.andengine.opengl.texture.ITexture mTexture -> g
    int mTextureWidth -> h
    int mTextureHeight -> i
    int mCurrentTextureX -> j
    int mCurrentTextureY -> k
    int mCurrentTextureYHeightMax -> l
    android.util.SparseArray mManagedCharacterToLetterMap -> m
    java.util.ArrayList mLettersPendingToBeDrawnToTexture -> n
    android.graphics.Paint mPaint -> a
    android.graphics.Paint mBackgroundPaint -> o
    android.graphics.Paint$FontMetrics mFontMetrics -> b
    android.graphics.Canvas mCanvas -> c
    android.graphics.Rect mTextBounds -> d
    float[] mTextWidthContainer -> e
    float getAscent() -> a
    float getDescent() -> b
    org.andengine.opengl.texture.ITexture getTexture() -> c
    void load() -> d
    float getLineHeight() -> e
    org.andengine.opengl.font.Letter getLetter(char) -> a
    void invalidateLetters() -> f
    float getLetterAdvance(java.lang.String) -> b
    android.graphics.Bitmap getLetterBitmap(org.andengine.opengl.font.Letter) -> a
    void drawLetter(java.lang.String,float,float) -> a
    org.andengine.opengl.font.Letter createLetter(char) -> b
    void updateTextBounds(java.lang.String) -> a
    void update(org.andengine.opengl.util.GLState) -> a
org.andengine.opengl.font.FontFactory -> org.andengine.opengl.a.b:
    int COLOR_DEFAULT -> a
    java.lang.String sAssetBasePath -> b
    void setAssetBasePath(java.lang.String) -> a
    void onCreate() -> a
    org.andengine.opengl.font.StrokeFont createStrokeFromAsset(org.andengine.opengl.font.FontManager,org.andengine.opengl.texture.ITexture,android.content.res.AssetManager,java.lang.String,float,boolean,int,float,int) -> a
org.andengine.opengl.font.FontManager -> org.andengine.opengl.a.c:
    java.util.ArrayList mFontsManaged -> a
    java.util.ArrayList mBitmapFontsManaged -> b
    java.util.HashMap mFontsMapped -> c
    void onCreate() -> a
    void onDestroy() -> b
    void loadFont(org.andengine.opengl.font.Font) -> a
    void updateFonts(org.andengine.opengl.util.GLState) -> a
    void onReload() -> c
org.andengine.opengl.font.FontUtils -> org.andengine.opengl.a.d:
    int[] $SWITCH_TABLE$org$andengine$entity$text$AutoWrap -> a
    float measureText(org.andengine.opengl.font.IFont,java.lang.CharSequence) -> a
    float measureText(org.andengine.opengl.font.IFont,java.lang.CharSequence,int,int) -> a
    float measureText(org.andengine.opengl.font.IFont,java.lang.CharSequence,float[]) -> a
    float measureText(org.andengine.opengl.font.IFont,java.lang.CharSequence,int,int,float[]) -> a
    java.util.List splitLines(java.lang.CharSequence,java.util.List) -> a
    java.util.List splitLines(org.andengine.opengl.font.IFont,java.lang.CharSequence,java.util.List,org.andengine.entity.text.AutoWrap,float) -> a
    java.util.List splitLinesByLetters(org.andengine.opengl.font.IFont,java.lang.CharSequence,java.util.List,float) -> a
    java.util.List splitLinesByWords(org.andengine.opengl.font.IFont,java.lang.CharSequence,java.util.List,float) -> b
    java.util.List splitLinesByCJK(org.andengine.opengl.font.IFont,java.lang.CharSequence,java.util.List,float) -> c
    float getAdvanceCorrection(org.andengine.opengl.font.IFont,java.lang.CharSequence,int) -> a
    int[] $SWITCH_TABLE$org$andengine$entity$text$AutoWrap() -> a
org.andengine.opengl.font.IFont -> org.andengine.opengl.a.e:
    org.andengine.opengl.texture.ITexture getTexture() -> c
    float getAscent() -> a
    float getLineHeight() -> e
    org.andengine.opengl.font.Letter getLetter(char) -> a
org.andengine.opengl.font.Letter -> org.andengine.opengl.a.f:
    char mCharacter -> a
    boolean mWhitespace -> m
    int mTextureX -> b
    int mTextureY -> c
    int mWidth -> d
    int mHeight -> e
    float mOffsetX -> f
    float mOffsetY -> g
    float mAdvance -> h
    float mU -> i
    float mV -> j
    float mU2 -> k
    float mV2 -> l
    android.util.SparseIntArray mKernings -> n
    int getKerning(int) -> a
    boolean isWhitespace() -> a
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
org.andengine.opengl.font.StrokeFont -> org.andengine.opengl.a.g:
    android.graphics.Paint mStrokePaint -> f
    boolean mStrokeOnly -> g
    float mStrokeWidth -> h
    void updateTextBounds(java.lang.String) -> a
    void drawLetter(java.lang.String,float,float) -> a
org.andengine.opengl.font.exception.FontException -> org.andengine.opengl.a.a.a:
org.andengine.opengl.font.exception.LetterNotFoundException -> org.andengine.opengl.a.a.b:
org.andengine.opengl.shader.PositionColorShaderProgram -> org.andengine.opengl.b.a:
    org.andengine.opengl.shader.PositionColorShaderProgram INSTANCE -> b
    int sUniformModelViewPositionMatrixLocation -> a
    org.andengine.opengl.shader.PositionColorShaderProgram getInstance() -> a
    void link(org.andengine.opengl.util.GLState) -> a
    void bind(org.andengine.opengl.util.GLState,org.andengine.opengl.vbo.attribute.VertexBufferObjectAttributes) -> a
    void unbind(org.andengine.opengl.util.GLState) -> b
org.andengine.opengl.shader.PositionColorTextureCoordinatesShaderProgram -> org.andengine.opengl.b.b:
    org.andengine.opengl.shader.PositionColorTextureCoordinatesShaderProgram INSTANCE -> c
    int sUniformModelViewPositionMatrixLocation -> a
    int sUniformTexture0Location -> b
    org.andengine.opengl.shader.PositionColorTextureCoordinatesShaderProgram getInstance() -> a
    void link(org.andengine.opengl.util.GLState) -> a
    void bind(org.andengine.opengl.util.GLState,org.andengine.opengl.vbo.attribute.VertexBufferObjectAttributes) -> a
org.andengine.opengl.shader.PositionTextureCoordinatesPositionInterpolationTextureSelectShaderProgram -> org.andengine.opengl.b.c:
    org.andengine.opengl.shader.PositionTextureCoordinatesPositionInterpolationTextureSelectShaderProgram INSTANCE -> l
    int sUniformModelViewPositionMatrixLocation -> a
    int sUniformTexture0Location -> b
    int sUniformTexture1Location -> c
    int sUniformTextureSelectTexture0Location -> d
    int sUniformPositionInterpolationMix0Location -> e
    org.andengine.opengl.shader.PositionTextureCoordinatesPositionInterpolationTextureSelectShaderProgram getInstance() -> a
    void link(org.andengine.opengl.util.GLState) -> a
    void bind(org.andengine.opengl.util.GLState,org.andengine.opengl.vbo.attribute.VertexBufferObjectAttributes) -> a
    void unbind(org.andengine.opengl.util.GLState) -> b
org.andengine.opengl.shader.PositionTextureCoordinatesShaderProgram -> org.andengine.opengl.b.d:
    org.andengine.opengl.shader.PositionTextureCoordinatesShaderProgram INSTANCE -> c
    int sUniformModelViewPositionMatrixLocation -> a
    int sUniformTexture0Location -> b
    org.andengine.opengl.shader.PositionTextureCoordinatesShaderProgram getInstance() -> a
    void link(org.andengine.opengl.util.GLState) -> a
    void bind(org.andengine.opengl.util.GLState,org.andengine.opengl.vbo.attribute.VertexBufferObjectAttributes) -> a
    void unbind(org.andengine.opengl.util.GLState) -> b
org.andengine.opengl.shader.PositionTextureCoordinatesTextureSelectShaderProgram -> org.andengine.opengl.b.e:
    org.andengine.opengl.shader.PositionTextureCoordinatesTextureSelectShaderProgram INSTANCE -> e
    int sUniformModelViewPositionMatrixLocation -> a
    int sUniformTexture0Location -> b
    int sUniformTexture1Location -> c
    int sUniformTextureSelectTexture0Location -> d
    org.andengine.opengl.shader.PositionTextureCoordinatesTextureSelectShaderProgram getInstance() -> a
    void link(org.andengine.opengl.util.GLState) -> a
    void bind(org.andengine.opengl.util.GLState,org.andengine.opengl.vbo.attribute.VertexBufferObjectAttributes) -> a
    void unbind(org.andengine.opengl.util.GLState) -> b
org.andengine.opengl.shader.PositionTextureCoordinatesUniformColorShaderProgram -> org.andengine.opengl.b.f:
    org.andengine.opengl.shader.PositionTextureCoordinatesUniformColorShaderProgram INSTANCE -> d
    int sUniformModelViewPositionMatrixLocation -> a
    int sUniformTexture0Location -> b
    int sUniformColorLocation -> c
    org.andengine.opengl.shader.PositionTextureCoordinatesUniformColorShaderProgram getInstance() -> a
    void link(org.andengine.opengl.util.GLState) -> a
    void bind(org.andengine.opengl.util.GLState,org.andengine.opengl.vbo.attribute.VertexBufferObjectAttributes) -> a
    void unbind(org.andengine.opengl.util.GLState) -> b
org.andengine.opengl.shader.ShaderProgram -> org.andengine.opengl.b.g:
    int[] HARDWAREID_CONTAINER -> a
    int[] PARAMETERS_CONTAINER -> b
    int[] LENGTH_CONTAINER -> c
    int[] SIZE_CONTAINER -> d
    int[] TYPE_CONTAINER -> e
    byte[] NAME_CONTAINER -> l
    org.andengine.opengl.shader.source.IShaderSource mVertexShaderSource -> f
    org.andengine.opengl.shader.source.IShaderSource mFragmentShaderSource -> g
    int mProgramID -> h
    boolean mCompiled -> i
    java.util.HashMap mUniformLocations -> j
    java.util.HashMap mAttributeLocations -> k
    boolean isCompiled() -> b
    void setCompiled(boolean) -> a
    int getUniformLocation(java.lang.String) -> a
    void bind(org.andengine.opengl.util.GLState,org.andengine.opengl.vbo.attribute.VertexBufferObjectAttributes) -> a
    void unbind(org.andengine.opengl.util.GLState) -> b
    void compile(org.andengine.opengl.util.GLState) -> c
    void link(org.andengine.opengl.util.GLState) -> a
    int compileShader(java.lang.String,int) -> a
    void initUniformLocations() -> a
    void initAttributeLocations() -> c
org.andengine.opengl.shader.ShaderProgramManager -> org.andengine.opengl.b.h:
    java.util.ArrayList mShaderProgramsManaged -> a
    void onCreate() -> a
    void onDestroy() -> b
    void loadShaderProgram(org.andengine.opengl.shader.ShaderProgram) -> a
    void onReload() -> c
org.andengine.opengl.shader.exception.ShaderProgramCompileException -> org.andengine.opengl.b.a.a:
org.andengine.opengl.shader.exception.ShaderProgramException -> org.andengine.opengl.b.a.b:
org.andengine.opengl.shader.exception.ShaderProgramLinkException -> org.andengine.opengl.b.a.c:
org.andengine.opengl.shader.source.IShaderSource -> org.andengine.opengl.b.b.a:
    java.lang.String getShaderSource(org.andengine.opengl.util.GLState) -> a
org.andengine.opengl.shader.source.StringShaderSource -> org.andengine.opengl.b.b.b:
    java.lang.String mShaderSource -> a
    java.lang.String getShaderSource(org.andengine.opengl.util.GLState) -> a
org.andengine.opengl.texture.ITexture -> org.andengine.opengl.c.a:
    int getWidth() -> a
    int getHeight() -> b
    boolean isLoadedToHardware() -> c
    void setNotLoadedToHardware() -> d
    boolean isUpdateOnHardwareNeeded() -> e
    void setUpdateOnHardwareNeeded(boolean) -> a
    void load() -> f
    void unload() -> g
    void loadToHardware(org.andengine.opengl.util.GLState) -> a
    void unloadFromHardware(org.andengine.opengl.util.GLState) -> b
    void reloadToHardware(org.andengine.opengl.util.GLState) -> c
    void bind(org.andengine.opengl.util.GLState) -> d
    org.andengine.opengl.texture.PixelFormat getPixelFormat() -> h
    org.andengine.opengl.texture.TextureOptions getTextureOptions() -> i
    int getTextureMemorySize() -> j
org.andengine.opengl.texture.ITextureStateListener -> org.andengine.opengl.c.b:
    void onLoadedToHardware(org.andengine.opengl.texture.ITexture) -> a
    void onUnloadedFromHardware(org.andengine.opengl.texture.ITexture) -> b
org.andengine.opengl.texture.PixelFormat -> org.andengine.opengl.c.c:
    org.andengine.opengl.texture.PixelFormat UNDEFINED -> a
    org.andengine.opengl.texture.PixelFormat RGBA_4444 -> b
    org.andengine.opengl.texture.PixelFormat RGBA_5551 -> c
    org.andengine.opengl.texture.PixelFormat RGBA_8888 -> d
    org.andengine.opengl.texture.PixelFormat RGB_565 -> e
    org.andengine.opengl.texture.PixelFormat A_8 -> f
    org.andengine.opengl.texture.PixelFormat I_8 -> g
    org.andengine.opengl.texture.PixelFormat AI_88 -> h
    int mGLInternalFormat -> i
    int mGLFormat -> j
    int mGLType -> k
    int mBitsPerPixel -> l
    org.andengine.opengl.texture.PixelFormat[] ENUM$VALUES -> m
    int getGLInternalFormat() -> a
    int getGLFormat() -> b
    int getGLType() -> c
    int getBitsPerPixel() -> d
    org.andengine.opengl.texture.PixelFormat[] values() -> values
    org.andengine.opengl.texture.PixelFormat valueOf(java.lang.String) -> valueOf
org.andengine.opengl.texture.Texture -> org.andengine.opengl.c.d:
    org.andengine.opengl.texture.TextureManager mTextureManager -> a
    org.andengine.opengl.texture.PixelFormat mPixelFormat -> b
    org.andengine.opengl.texture.TextureOptions mTextureOptions -> c
    int mHardwareTextureID -> d
    boolean mUpdateOnHardwareNeeded -> e
    org.andengine.opengl.texture.ITextureStateListener mTextureStateListener -> f
    boolean isLoadedToHardware() -> c
    void setNotLoadedToHardware() -> d
    boolean isUpdateOnHardwareNeeded() -> e
    void setUpdateOnHardwareNeeded(boolean) -> a
    org.andengine.opengl.texture.PixelFormat getPixelFormat() -> h
    org.andengine.opengl.texture.TextureOptions getTextureOptions() -> i
    int getTextureMemorySize() -> j
    org.andengine.opengl.texture.ITextureStateListener getTextureStateListener() -> k
    void writeTextureToHardware(org.andengine.opengl.util.GLState) -> e
    void load() -> f
    void unload() -> g
    void loadToHardware(org.andengine.opengl.util.GLState) -> a
    void unloadFromHardware(org.andengine.opengl.util.GLState) -> b
    void reloadToHardware(org.andengine.opengl.util.GLState) -> c
    void bind(org.andengine.opengl.util.GLState) -> d
org.andengine.opengl.texture.TextureManager -> org.andengine.opengl.c.e:
    java.util.HashSet mTexturesManaged -> a
    java.util.HashMap mTexturesMapped -> b
    java.util.ArrayList mTexturesLoaded -> c
    java.util.ArrayList mTexturesToBeLoaded -> d
    java.util.ArrayList mTexturesToBeUnloaded -> e
    org.andengine.opengl.texture.TextureWarmUpVertexBufferObject mTextureWarmUpVertexBufferObject -> f
    int mTextureMemoryUsed -> g
    void onCreate() -> a
    void onReload() -> b
    void onDestroy() -> c
    boolean loadTexture(org.andengine.opengl.texture.ITexture) -> a
    boolean unloadTexture(org.andengine.opengl.texture.ITexture) -> b
    void updateTextures(org.andengine.opengl.util.GLState) -> a
org.andengine.opengl.texture.TextureOptions -> org.andengine.opengl.c.f:
    org.andengine.opengl.texture.TextureOptions NEAREST -> a
    org.andengine.opengl.texture.TextureOptions BILINEAR -> b
    org.andengine.opengl.texture.TextureOptions REPEATING_NEAREST -> c
    org.andengine.opengl.texture.TextureOptions REPEATING_BILINEAR -> d
    org.andengine.opengl.texture.TextureOptions NEAREST_PREMULTIPLYALPHA -> e
    org.andengine.opengl.texture.TextureOptions BILINEAR_PREMULTIPLYALPHA -> f
    org.andengine.opengl.texture.TextureOptions REPEATING_NEAREST_PREMULTIPLYALPHA -> g
    org.andengine.opengl.texture.TextureOptions REPEATING_BILINEAR_PREMULTIPLYALPHA -> h
    org.andengine.opengl.texture.TextureOptions DEFAULT -> i
    int mMagFilter -> j
    int mMinFilter -> k
    float mWrapT -> l
    float mWrapS -> m
    boolean mPreMultiplyAlpha -> n
    void apply() -> a
org.andengine.opengl.texture.TextureWarmUpVertexBufferObject -> org.andengine.opengl.c.g:
    org.andengine.opengl.vbo.attribute.VertexBufferObjectAttributes VERTEXBUFFEROBJECTATTRIBUTES_DEFAULT -> a
    java.nio.FloatBuffer mFloatBuffer -> b
    void onBufferData() -> b_
    void warmup(org.andengine.opengl.util.GLState,org.andengine.opengl.texture.ITexture) -> a
org.andengine.opengl.texture.atlas.ITextureAtlas -> org.andengine.opengl.c.a.a:
    void addTextureAtlasSource(org.andengine.opengl.texture.atlas.source.ITextureAtlasSource,int,int) -> a
    void addTextureAtlasSource(org.andengine.opengl.texture.atlas.source.ITextureAtlasSource,int,int,int) -> a
    void addEmptyTextureAtlasSource(int,int,int,int) -> a
org.andengine.opengl.texture.atlas.ITextureAtlas$ITextureAtlasStateListener -> org.andengine.opengl.c.a.b:
    void onTextureAtlasSourceLoaded(org.andengine.opengl.texture.atlas.ITextureAtlas,org.andengine.opengl.texture.atlas.source.ITextureAtlasSource) -> a
    void onTextureAtlasSourceLoadExeption(org.andengine.opengl.texture.atlas.ITextureAtlas,org.andengine.opengl.texture.atlas.source.ITextureAtlasSource,java.lang.Throwable) -> a
org.andengine.opengl.texture.atlas.TextureAtlas -> org.andengine.opengl.c.a.c:
    int mWidth -> g
    int mHeight -> h
    java.util.ArrayList mTextureAtlasSources -> i
    int getWidth() -> a
    int getHeight() -> b
    org.andengine.opengl.texture.atlas.ITextureAtlas$ITextureAtlasStateListener getTextureStateListener() -> l
    org.andengine.opengl.texture.atlas.ITextureAtlas$ITextureAtlasStateListener getTextureAtlasStateListener() -> m
    void addTextureAtlasSource(org.andengine.opengl.texture.atlas.source.ITextureAtlasSource,int,int) -> a
    void addTextureAtlasSource(org.andengine.opengl.texture.atlas.source.ITextureAtlasSource,int,int,int) -> a
    void checkTextureAtlasSourcePosition(org.andengine.opengl.texture.atlas.source.ITextureAtlasSource,int,int) -> b
    org.andengine.opengl.texture.ITextureStateListener getTextureStateListener() -> k
org.andengine.opengl.texture.atlas.bitmap.BitmapTextureAtlas -> org.andengine.opengl.c.a.a.a:
    org.andengine.opengl.texture.bitmap.BitmapTextureFormat mBitmapTextureFormat -> j
    void addEmptyTextureAtlasSource(int,int,int,int) -> a
    void writeTextureToHardware(org.andengine.opengl.util.GLState) -> e
org.andengine.opengl.texture.atlas.bitmap.BitmapTextureAtlasTextureRegionFactory -> org.andengine.opengl.c.a.a.b:
    java.lang.String sAssetBasePath -> a
    void setAssetBasePath(java.lang.String) -> a
    void reset() -> a
    org.andengine.opengl.texture.region.TextureRegion createFromAsset(org.andengine.opengl.texture.atlas.bitmap.BitmapTextureAtlas,android.content.Context,java.lang.String,int,int) -> a
    org.andengine.opengl.texture.region.TextureRegion createFromAsset(org.andengine.opengl.texture.atlas.bitmap.BitmapTextureAtlas,android.content.res.AssetManager,java.lang.String,int,int) -> a
    org.andengine.opengl.texture.region.TextureRegion createFromSource(org.andengine.opengl.texture.atlas.bitmap.BitmapTextureAtlas,org.andengine.opengl.texture.atlas.bitmap.source.IBitmapTextureAtlasSource,int,int) -> a
    org.andengine.opengl.texture.region.TextureRegion createFromAsset(org.andengine.opengl.texture.atlas.bitmap.BuildableBitmapTextureAtlas,android.content.Context,java.lang.String) -> a
    org.andengine.opengl.texture.region.TextureRegion createFromAsset(org.andengine.opengl.texture.atlas.bitmap.BuildableBitmapTextureAtlas,android.content.res.AssetManager,java.lang.String) -> a
    org.andengine.opengl.texture.region.TextureRegion createFromAsset(org.andengine.opengl.texture.atlas.bitmap.BuildableBitmapTextureAtlas,android.content.res.AssetManager,java.lang.String,boolean) -> a
    org.andengine.opengl.texture.region.TextureRegion createFromSource(org.andengine.opengl.texture.atlas.bitmap.BuildableBitmapTextureAtlas,org.andengine.opengl.texture.atlas.bitmap.source.IBitmapTextureAtlasSource,boolean) -> a
org.andengine.opengl.texture.atlas.bitmap.BuildableBitmapTextureAtlas -> org.andengine.opengl.c.a.a.c:
org.andengine.opengl.texture.atlas.bitmap.source.AssetBitmapTextureAtlasSource -> org.andengine.opengl.c.a.a.a.a:
    android.content.res.AssetManager mAssetManager -> e
    java.lang.String mAssetPath -> f
    org.andengine.opengl.texture.atlas.bitmap.source.AssetBitmapTextureAtlasSource create(android.content.res.AssetManager,java.lang.String) -> a
    org.andengine.opengl.texture.atlas.bitmap.source.AssetBitmapTextureAtlasSource create(android.content.res.AssetManager,java.lang.String,int,int) -> a
    android.graphics.Bitmap onLoadBitmap(android.graphics.Bitmap$Config) -> a
    android.graphics.Bitmap onLoadBitmap(android.graphics.Bitmap$Config,boolean) -> a
    java.lang.String toString() -> toString
org.andengine.opengl.texture.atlas.bitmap.source.EmptyBitmapTextureAtlasSource -> org.andengine.opengl.c.a.a.a.b:
    android.graphics.Bitmap onLoadBitmap(android.graphics.Bitmap$Config) -> a
    android.graphics.Bitmap onLoadBitmap(android.graphics.Bitmap$Config,boolean) -> a
    java.lang.String toString() -> toString
org.andengine.opengl.texture.atlas.bitmap.source.IBitmapTextureAtlasSource -> org.andengine.opengl.c.a.a.a.c:
    android.graphics.Bitmap onLoadBitmap(android.graphics.Bitmap$Config) -> a
org.andengine.opengl.texture.atlas.buildable.BuildableTextureAtlas -> org.andengine.opengl.c.a.b.a:
    org.andengine.opengl.texture.atlas.ITextureAtlas mTextureAtlas -> a
    java.util.ArrayList mTextureAtlasSourcesToPlace -> b
    int getWidth() -> a
    int getHeight() -> b
    boolean isLoadedToHardware() -> c
    void setNotLoadedToHardware() -> d
    boolean isUpdateOnHardwareNeeded() -> e
    void setUpdateOnHardwareNeeded(boolean) -> a
    void load() -> f
    void unload() -> g
    void loadToHardware(org.andengine.opengl.util.GLState) -> a
    void unloadFromHardware(org.andengine.opengl.util.GLState) -> b
    void reloadToHardware(org.andengine.opengl.util.GLState) -> c
    void bind(org.andengine.opengl.util.GLState) -> d
    org.andengine.opengl.texture.PixelFormat getPixelFormat() -> h
    org.andengine.opengl.texture.TextureOptions getTextureOptions() -> i
    int getTextureMemorySize() -> j
    void addTextureAtlasSource(org.andengine.opengl.texture.atlas.source.ITextureAtlasSource,int,int) -> a
    void addTextureAtlasSource(org.andengine.opengl.texture.atlas.source.ITextureAtlasSource,int,int,int) -> a
    void addEmptyTextureAtlasSource(int,int,int,int) -> a
    void addTextureAtlasSource(org.andengine.opengl.texture.atlas.source.ITextureAtlasSource,org.andengine.util.call.Callback) -> a
    org.andengine.opengl.texture.atlas.buildable.IBuildableTextureAtlas build(org.andengine.opengl.texture.atlas.buildable.builder.ITextureAtlasBuilder) -> a
org.andengine.opengl.texture.atlas.buildable.BuildableTextureAtlas$TextureAtlasSourceWithWithLocationCallback -> org.andengine.opengl.c.a.b.b:
    org.andengine.opengl.texture.atlas.source.ITextureAtlasSource mTextureAtlasSource -> a
    org.andengine.util.call.Callback mCallback -> b
    org.andengine.opengl.texture.atlas.source.ITextureAtlasSource getTextureAtlasSource() -> a
    org.andengine.util.call.Callback getCallback() -> b
org.andengine.opengl.texture.atlas.buildable.BuildableTextureAtlasTextureRegionFactory -> org.andengine.opengl.c.a.b.c:
    org.andengine.opengl.texture.region.TextureRegion createFromSource(org.andengine.opengl.texture.atlas.buildable.BuildableTextureAtlas,org.andengine.opengl.texture.atlas.source.ITextureAtlasSource,boolean) -> a
org.andengine.opengl.texture.atlas.buildable.BuildableTextureAtlasTextureRegionFactory$1 -> org.andengine.opengl.c.a.b.d:
    org.andengine.opengl.texture.region.TextureRegion val$textureRegion -> a
    void onCallback(org.andengine.opengl.texture.atlas.source.ITextureAtlasSource) -> a
    void onCallback(java.lang.Object) -> a
org.andengine.opengl.texture.atlas.buildable.IBuildableTextureAtlas -> org.andengine.opengl.c.a.b.e:
org.andengine.opengl.texture.atlas.buildable.builder.BlackPawnTextureAtlasBuilder -> org.andengine.opengl.c.a.b.a.a:
    java.util.Comparator TEXTURESOURCE_COMPARATOR -> a
    int mTextureAtlasBorderSpacing -> b
    int mTextureAtlasSourceSpacing -> c
    int mTextureAtlasSourcePadding -> d
    void build(org.andengine.opengl.texture.atlas.ITextureAtlas,java.util.ArrayList) -> a
org.andengine.opengl.texture.atlas.buildable.builder.BlackPawnTextureAtlasBuilder$1 -> org.andengine.opengl.c.a.b.a.b:
    int compare(org.andengine.opengl.texture.atlas.buildable.BuildableTextureAtlas$TextureAtlasSourceWithWithLocationCallback,org.andengine.opengl.texture.atlas.buildable.BuildableTextureAtlas$TextureAtlasSourceWithWithLocationCallback) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
org.andengine.opengl.texture.atlas.buildable.builder.BlackPawnTextureAtlasBuilder$Node -> org.andengine.opengl.c.a.b.a.c:
    org.andengine.opengl.texture.atlas.buildable.builder.BlackPawnTextureAtlasBuilder$Node mChildA -> a
    org.andengine.opengl.texture.atlas.buildable.builder.BlackPawnTextureAtlasBuilder$Node mChildB -> b
    org.andengine.opengl.texture.atlas.buildable.builder.BlackPawnTextureAtlasBuilder$Rect mRect -> c
    org.andengine.opengl.texture.atlas.source.ITextureAtlasSource mTextureAtlasSource -> d
    org.andengine.opengl.texture.atlas.buildable.builder.BlackPawnTextureAtlasBuilder$Node insert(org.andengine.opengl.texture.atlas.source.ITextureAtlasSource,int,int,int,int) -> a
    org.andengine.opengl.texture.atlas.buildable.builder.BlackPawnTextureAtlasBuilder$Node createChildren(org.andengine.opengl.texture.atlas.source.ITextureAtlasSource,int,int,int,int,int,int) -> a
    org.andengine.opengl.texture.atlas.buildable.builder.BlackPawnTextureAtlasBuilder$Rect access$0(org.andengine.opengl.texture.atlas.buildable.builder.BlackPawnTextureAtlasBuilder$Node) -> a
org.andengine.opengl.texture.atlas.buildable.builder.BlackPawnTextureAtlasBuilder$Rect -> org.andengine.opengl.c.a.b.a.d:
    int mLeft -> a
    int mTop -> b
    int mWidth -> c
    int mHeight -> d
    int getWidth() -> a
    int getHeight() -> b
    int getLeft() -> c
    int getTop() -> d
    java.lang.String toString() -> toString
    int access$0(org.andengine.opengl.texture.atlas.buildable.builder.BlackPawnTextureAtlasBuilder$Rect) -> a
    int access$1(org.andengine.opengl.texture.atlas.buildable.builder.BlackPawnTextureAtlasBuilder$Rect) -> b
org.andengine.opengl.texture.atlas.buildable.builder.ITextureAtlasBuilder -> org.andengine.opengl.c.a.b.a.e:
    void build(org.andengine.opengl.texture.atlas.ITextureAtlas,java.util.ArrayList) -> a
org.andengine.opengl.texture.atlas.buildable.builder.ITextureAtlasBuilder$TextureAtlasBuilderException -> org.andengine.opengl.c.a.b.a.f:
org.andengine.opengl.texture.atlas.source.BaseTextureAtlasSource -> org.andengine.opengl.c.a.c.a:
    int mTextureX -> a
    int mTextureY -> b
    int mTextureWidth -> c
    int mTextureHeight -> d
    int getTextureX() -> a
    int getTextureY() -> b
    void setTextureX(int) -> a
    void setTextureY(int) -> b
    int getTextureWidth() -> c
    int getTextureHeight() -> d
    java.lang.String toString() -> toString
org.andengine.opengl.texture.atlas.source.ITextureAtlasSource -> org.andengine.opengl.c.a.c.b:
    int getTextureX() -> a
    int getTextureY() -> b
    void setTextureX(int) -> a
    void setTextureY(int) -> b
    int getTextureWidth() -> c
    int getTextureHeight() -> d
org.andengine.opengl.texture.bitmap.BitmapTextureFormat -> org.andengine.opengl.c.b.a:
    org.andengine.opengl.texture.bitmap.BitmapTextureFormat RGBA_8888 -> a
    org.andengine.opengl.texture.bitmap.BitmapTextureFormat RGB_565 -> b
    org.andengine.opengl.texture.bitmap.BitmapTextureFormat RGBA_4444 -> c
    org.andengine.opengl.texture.bitmap.BitmapTextureFormat A_8 -> d
    android.graphics.Bitmap$Config mBitmapConfig -> e
    org.andengine.opengl.texture.PixelFormat mPixelFormat -> f
    org.andengine.opengl.texture.bitmap.BitmapTextureFormat[] ENUM$VALUES -> g
    android.graphics.Bitmap$Config getBitmapConfig() -> a
    org.andengine.opengl.texture.PixelFormat getPixelFormat() -> b
    org.andengine.opengl.texture.bitmap.BitmapTextureFormat[] values() -> values
    org.andengine.opengl.texture.bitmap.BitmapTextureFormat valueOf(java.lang.String) -> valueOf
org.andengine.opengl.texture.region.BaseTextureRegion -> org.andengine.opengl.c.c.a:
    org.andengine.opengl.texture.ITexture mTexture -> a
    org.andengine.opengl.texture.ITexture getTexture() -> a
org.andengine.opengl.texture.region.ITextureRegion -> org.andengine.opengl.c.c.b:
    float getWidth() -> b
    float getHeight() -> c
    float getU() -> d
    float getU2() -> e
    float getV() -> f
    float getV2() -> g
    boolean isRotated() -> h
    org.andengine.opengl.texture.ITexture getTexture() -> a
org.andengine.opengl.texture.region.ITiledTextureRegion -> org.andengine.opengl.c.c.c:
    org.andengine.opengl.texture.region.ITextureRegion getTextureRegion(int) -> a
    int getTileCount() -> i
org.andengine.opengl.texture.region.TextureRegion -> org.andengine.opengl.c.c.d:
    float mTextureX -> b
    float mTextureY -> c
    float mTextureWidth -> d
    float mTextureHeight -> e
    float mU -> f
    float mU2 -> g
    float mV -> h
    float mV2 -> i
    float mScale -> j
    boolean mRotated -> k
    float getTextureX() -> i
    float getTextureY() -> j
    void setTexturePosition(float,float) -> a
    float getWidth() -> b
    float getHeight() -> c
    float getU() -> d
    float getU2() -> e
    float getV() -> f
    float getV2() -> g
    boolean isRotated() -> h
    void updateUV() -> k
org.andengine.opengl.texture.region.TextureRegionFactory -> org.andengine.opengl.c.c.e:
    org.andengine.opengl.texture.region.TextureRegion createFromSource(org.andengine.opengl.texture.atlas.ITextureAtlas,org.andengine.opengl.texture.atlas.source.ITextureAtlasSource,int,int) -> a
    org.andengine.opengl.texture.region.TextureRegion createFromSource(org.andengine.opengl.texture.atlas.ITextureAtlas,org.andengine.opengl.texture.atlas.source.ITextureAtlasSource,int,int,boolean) -> a
org.andengine.opengl.texture.region.TiledTextureRegion -> org.andengine.opengl.c.c.f:
    int mCurrentTileIndex -> b
    int mTileCount -> c
    org.andengine.opengl.texture.region.ITextureRegion[] mTextureRegions -> d
    org.andengine.opengl.texture.region.ITextureRegion getTextureRegion(int) -> a
    int getTileCount() -> i
    float getWidth() -> b
    float getHeight() -> c
    float getU() -> d
    float getV() -> f
    float getU2() -> e
    float getV2() -> g
    boolean isRotated() -> h
org.andengine.opengl.util.BufferUtils -> org.andengine.opengl.util.BufferUtils:
    boolean NATIVE_LIB_LOADED -> a
    boolean WORKAROUND_BYTEBUFFER_PUT_FLOATARRAY -> b
    boolean WORKAROUND_BYTEBUFFER_ALLOCATE_DIRECT -> c
    java.nio.ByteBuffer allocateDirectByteBuffer(int) -> a
    void freeDirectByteBuffer(java.nio.ByteBuffer) -> a
    java.nio.ByteBuffer jniAllocateDirect(int) -> jniAllocateDirect
    void jniFreeDirect(java.nio.ByteBuffer) -> jniFreeDirect
    void put(java.nio.ByteBuffer,float[],int,int) -> a
    void jniPut(java.nio.ByteBuffer,float[],int,int) -> jniPut
org.andengine.opengl.util.GLHelper -> org.andengine.opengl.util.a:
    int[] $SWITCH_TABLE$org$andengine$opengl$texture$PixelFormat -> a
    java.nio.Buffer getPixels(android.graphics.Bitmap,org.andengine.opengl.texture.PixelFormat,java.nio.ByteOrder) -> a
    int[] convertARGB_8888toRGBA_8888(int[],java.nio.ByteOrder) -> a
    short[] convertARGB_8888toRGB_565(int[],java.nio.ByteOrder) -> b
    short[] convertARGB_8888toRGBA_4444(int[],java.nio.ByteOrder) -> c
    byte[] convertARGB_8888toA_8(int[]) -> a
    int[] getPixelsARGB_8888(android.graphics.Bitmap) -> a
    int[] $SWITCH_TABLE$org$andengine$opengl$texture$PixelFormat() -> a
org.andengine.opengl.util.GLMatrixStack -> org.andengine.opengl.util.b:
    float[] mMatrixStack -> a
    int mMatrixStackOffset -> b
    float[] mTemp -> c
    void glLoadIdentity() -> a
    void glTranslatef(float,float,float) -> a
    void glRotatef(float,float,float,float) -> a
    void glScalef(float,float,float) -> b
    void glSkewf(float,float) -> a
    void glOrthof(float,float,float,float,float,float) -> a
    void glPushMatrix() -> b
    void glPopMatrix() -> c
    void reset() -> d
    void setSkewM(float[],int,float,float) -> a
org.andengine.opengl.util.GLMatrixStack$GLMatrixStackOverflowException -> org.andengine.opengl.util.c:
org.andengine.opengl.util.GLMatrixStack$GLMatrixStackUnderflowException -> org.andengine.opengl.util.d:
org.andengine.opengl.util.GLScissorStack -> org.andengine.opengl.util.e:
    int[] mScissorStack -> a
    int mScissorStackOffset -> b
    void reset() -> a
org.andengine.opengl.util.GLState -> org.andengine.opengl.util.f:
    int[] mHardwareIDContainer -> a
    java.lang.String mVersion -> b
    java.lang.String mRenderer -> c
    java.lang.String mExtensions -> d
    int mMaximumVertexAttributeCount -> e
    int mMaximumVertexShaderUniformVectorCount -> f
    int mMaximumFragmentShaderUniformVectorCount -> g
    int mMaximumTextureSize -> h
    int mMaximumTextureUnits -> i
    int mCurrentArrayBufferID -> j
    int mCurrentIndexBufferID -> k
    int mCurrentShaderProgramID -> l
    int[] mCurrentBoundTextureIDs -> m
    int mCurrentFramebufferID -> n
    int mCurrentActiveTextureIndex -> o
    int mCurrentSourceBlendMode -> p
    int mCurrentDestinationBlendMode -> q
    boolean mDitherEnabled -> r
    boolean mDepthTestEnabled -> s
    boolean mScissorTestEnabled -> t
    boolean mBlendEnabled -> u
    boolean mCullingEnabled -> v
    float mLineWidth -> w
    org.andengine.opengl.util.GLMatrixStack mModelViewGLMatrixStack -> x
    org.andengine.opengl.util.GLMatrixStack mProjectionGLMatrixStack -> y
    org.andengine.opengl.util.GLScissorStack mScissorStack -> z
    float[] mModelViewGLMatrix -> A
    float[] mProjectionGLMatrix -> B
    float[] mModelViewProjectionGLMatrix -> C
    void reset(org.andengine.engine.options.RenderOptions,org.andengine.opengl.view.ConfigChooser,javax.microedition.khronos.egl.EGLConfig) -> a
    boolean enableBlend() -> a
    boolean disableBlend() -> b
    boolean disableCulling() -> c
    boolean enableDither() -> d
    boolean disableDither() -> e
    boolean setDitherEnabled(boolean) -> a
    boolean enableDepthTest() -> f
    boolean disableDepthTest() -> g
    int generateBuffer() -> h
    void bindArrayBuffer(int) -> a
    void deleteArrayBuffer(int) -> b
    void useProgram(int) -> c
    int generateTexture() -> i
    void bindTexture(int) -> d
    void deleteTexture(int) -> e
    void blendFunction(int,int) -> a
    void lineWidth(float) -> a
    void pushModelViewGLMatrix() -> j
    void popModelViewGLMatrix() -> k
    void loadModelViewGLMatrixIdentity() -> l
    void translateModelViewGLMatrixf(float,float,float) -> a
    void rotateModelViewGLMatrixf(float,float,float,float) -> a
    void scaleModelViewGLMatrixf(float,float,int) -> a
    void skewModelViewGLMatrixf(float,float) -> a
    void pushProjectionGLMatrix() -> m
    void popProjectionGLMatrix() -> n
    void loadProjectionGLMatrixIdentity() -> o
    void translateProjectionGLMatrixf(float,float,float) -> b
    void rotateProjectionGLMatrixf(float,float,float,float) -> b
    void orthoProjectionGLMatrixf(float,float,float,float,float,float) -> a
    float[] getModelViewProjectionGLMatrix() -> p
    void glTexSubImage2D(int,int,int,int,android.graphics.Bitmap,org.andengine.opengl.texture.PixelFormat) -> a
    int getInteger(int) -> f
org.andengine.opengl.util.VertexUtils -> org.andengine.opengl.util.g:
    float getVertex(float[],int,int,int) -> a
org.andengine.opengl.vbo.DrawType -> org.andengine.opengl.d.a:
    org.andengine.opengl.vbo.DrawType STATIC -> a
    org.andengine.opengl.vbo.DrawType DYNAMIC -> b
    org.andengine.opengl.vbo.DrawType STREAM -> c
    int mUsage -> d
    org.andengine.opengl.vbo.DrawType[] ENUM$VALUES -> e
    int getUsage() -> a
    org.andengine.opengl.vbo.DrawType[] values() -> values
    org.andengine.opengl.vbo.DrawType valueOf(java.lang.String) -> valueOf
org.andengine.opengl.vbo.HighPerformanceVertexBufferObject -> org.andengine.opengl.d.b:
    float[] mBufferData -> a
    java.nio.FloatBuffer mFloatBuffer -> b
    void onBufferData() -> b_
org.andengine.opengl.vbo.IVertexBufferObject -> org.andengine.opengl.d.c:
    boolean isAutoDispose() -> b
    boolean isLoadedToHardware() -> c
    void setNotLoadedToHardware() -> d
    void unloadFromHardware(org.andengine.opengl.util.GLState) -> a
    void bind(org.andengine.opengl.util.GLState,org.andengine.opengl.shader.ShaderProgram) -> a
    void unbind(org.andengine.opengl.util.GLState,org.andengine.opengl.shader.ShaderProgram) -> b
    void draw(int,int) -> a
    void draw(int,int,int) -> a
org.andengine.opengl.vbo.VertexBufferObject -> org.andengine.opengl.d.d:
    int mCapacity -> c
    boolean mAutoDispose -> d
    int mUsage -> e
    java.nio.ByteBuffer mByteBuffer -> f
    int mHardwareBufferID -> g
    boolean mDirtyOnHardware -> h
    boolean mDisposed -> i
    org.andengine.opengl.vbo.VertexBufferObjectManager mVertexBufferObjectManager -> j
    org.andengine.opengl.vbo.attribute.VertexBufferObjectAttributes mVertexBufferObjectAttributes -> k
    boolean isDisposed() -> h
    boolean isAutoDispose() -> b
    boolean isLoadedToHardware() -> c
    void setNotLoadedToHardware() -> d
    void setDirtyOnHardware() -> e
    void onBufferData() -> b_
    void bind(org.andengine.opengl.util.GLState) -> b
    void bind(org.andengine.opengl.util.GLState,org.andengine.opengl.shader.ShaderProgram) -> a
    void unbind(org.andengine.opengl.util.GLState,org.andengine.opengl.shader.ShaderProgram) -> b
    void unloadFromHardware(org.andengine.opengl.util.GLState) -> a
    void draw(int,int) -> a
    void draw(int,int,int) -> a
    void dispose() -> C
    void finalize() -> finalize
    void loadToHardware(org.andengine.opengl.util.GLState) -> c
org.andengine.opengl.vbo.VertexBufferObjectManager -> org.andengine.opengl.d.e:
    java.util.ArrayList mVertexBufferObjectsLoaded -> a
    java.util.ArrayList mVertexBufferObjectsToBeUnloaded -> b
    void onCreate() -> a
    void onDestroy() -> b
    void onVertexBufferObjectLoaded(org.andengine.opengl.vbo.IVertexBufferObject) -> a
    void onUnloadVertexBufferObject(org.andengine.opengl.vbo.IVertexBufferObject) -> b
    void onReload() -> c
    void updateVertexBufferObjects(org.andengine.opengl.util.GLState) -> a
org.andengine.opengl.vbo.attribute.VertexBufferObjectAttribute -> org.andengine.opengl.d.a.a:
    int mLocation -> a
    java.lang.String mName -> b
    int mSize -> c
    int mType -> d
    boolean mNormalized -> e
    int mOffset -> f
    void glVertexAttribPointer(int) -> a
org.andengine.opengl.vbo.attribute.VertexBufferObjectAttributeFix -> org.andengine.opengl.d.a.b:
    void glVertexAttribPointer(int) -> a
org.andengine.opengl.vbo.attribute.VertexBufferObjectAttributes -> org.andengine.opengl.d.a.c:
    int mStride -> a
    org.andengine.opengl.vbo.attribute.VertexBufferObjectAttribute[] mVertexBufferObjectAttributes -> b
    void glVertexAttribPointers() -> a
org.andengine.opengl.vbo.attribute.VertexBufferObjectAttributesBuilder -> org.andengine.opengl.d.a.d:
    boolean WORAROUND_GLES2_GLVERTEXATTRIBPOINTER_MISSING -> a
    int mIndex -> b
    org.andengine.opengl.vbo.attribute.VertexBufferObjectAttribute[] mVertexBufferObjectAttributes -> c
    int mOffset -> d
    org.andengine.opengl.vbo.attribute.VertexBufferObjectAttributesBuilder add(int,java.lang.String,int,int,boolean) -> a
    org.andengine.opengl.vbo.attribute.VertexBufferObjectAttributes build() -> a
org.andengine.opengl.view.ConfigChooser -> org.andengine.opengl.e.a:
    int[] BUFFER -> a
    int[] mMultiSampleEGLConfig -> b
    int[] mNvidiaCoverageMultiSampleEGLConfig -> c
    int[] mDefaultEGLConfig -> d
    boolean mRequestedMultiSampling -> e
    boolean mActualMultiSampling -> f
    boolean mActualCoverageMultiSampling -> g
    int mRequestedRedSize -> h
    int mRequestedGreenSize -> i
    int mRequestedBlueSize -> j
    int mRequestedAlphaSize -> k
    int mRequestedDepthSize -> l
    int mRequestedStencilSize -> m
    int mActualRedSize -> n
    int mActualGreenSize -> o
    int mActualBlueSize -> p
    int mActualAlphaSize -> q
    int mActualDepthSize -> r
    int mActualStencilSize -> s
    boolean isActualCoverageMultiSampling() -> a
    int getActualRedSize() -> b
    int getActualGreenSize() -> c
    int getActualBlueSize() -> d
    int getActualAlphaSize() -> e
    int getActualDepthSize() -> f
    int getActualStencilSize() -> g
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay) -> chooseConfig
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,org.andengine.opengl.view.ConfigChooserMatcher) -> a
    int getEGLConfigCount(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,int[]) -> a
    javax.microedition.khronos.egl.EGLConfig findEGLConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,int[],int,org.andengine.opengl.view.ConfigChooserMatcher) -> a
    javax.microedition.khronos.egl.EGLConfig findEGLConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[],org.andengine.opengl.view.ConfigChooserMatcher) -> a
    int getConfigAttrib(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int,int) -> a
org.andengine.opengl.view.ConfigChooserMatcher -> org.andengine.opengl.e.b:
    org.andengine.opengl.view.ConfigChooserMatcher STRICT -> a
    org.andengine.opengl.view.ConfigChooserMatcher LOOSE_STENCIL -> b
    org.andengine.opengl.view.ConfigChooserMatcher LOOSE_DEPTH_AND_STENCIL -> c
    org.andengine.opengl.view.ConfigChooserMatcher ANY -> d
    boolean matches(int,int,int,int,int,int,int,int,int,int,int,int) -> a
org.andengine.opengl.view.ConfigChooserMatcher$1 -> org.andengine.opengl.e.c:
    boolean matches(int,int,int,int,int,int,int,int,int,int,int,int) -> a
org.andengine.opengl.view.ConfigChooserMatcher$2 -> org.andengine.opengl.e.d:
    boolean matches(int,int,int,int,int,int,int,int,int,int,int,int) -> a
org.andengine.opengl.view.ConfigChooserMatcher$3 -> org.andengine.opengl.e.e:
    boolean matches(int,int,int,int,int,int,int,int,int,int,int,int) -> a
org.andengine.opengl.view.ConfigChooserMatcher$4 -> org.andengine.opengl.e.f:
    boolean matches(int,int,int,int,int,int,int,int,int,int,int,int) -> a
org.andengine.opengl.view.EngineRenderer -> org.andengine.opengl.e.g:
    org.andengine.engine.Engine mEngine -> a
    org.andengine.opengl.view.ConfigChooser mConfigChooser -> b
    boolean mMultiSampling -> c
    org.andengine.opengl.view.IRendererListener mRendererListener -> d
    org.andengine.opengl.util.GLState mGLState -> e
    void onSurfaceCreated(javax.microedition.khronos.opengles.GL10,javax.microedition.khronos.egl.EGLConfig) -> onSurfaceCreated
    void onSurfaceChanged(javax.microedition.khronos.opengles.GL10,int,int) -> onSurfaceChanged
    void onDrawFrame(javax.microedition.khronos.opengles.GL10) -> onDrawFrame
org.andengine.opengl.view.IRendererListener -> org.andengine.opengl.e.h:
    void onSurfaceCreated(org.andengine.opengl.util.GLState) -> a
    void onSurfaceChanged(org.andengine.opengl.util.GLState,int,int) -> a
org.andengine.opengl.view.RenderSurfaceView -> org.andengine.opengl.e.i:
    org.andengine.opengl.view.EngineRenderer mEngineRenderer -> a
    org.andengine.opengl.view.ConfigChooser mConfigChooser -> b
    org.andengine.opengl.view.ConfigChooser getConfigChooser() -> getConfigChooser
    void onMeasure(int,int) -> onMeasure
    void onResolutionChanged(int,int) -> a
    void setRenderer(org.andengine.engine.Engine,org.andengine.opengl.view.IRendererListener) -> a
org.andengine.ui.IGameInterface -> org.andengine.d.a:
    org.andengine.engine.options.EngineOptions onCreateEngineOptions() -> b
    void onCreateResources(org.andengine.ui.IGameInterface$OnCreateResourcesCallback) -> a
    void onCreateScene(org.andengine.ui.IGameInterface$OnCreateSceneCallback) -> a
    void onPopulateScene(org.andengine.entity.scene.Scene,org.andengine.ui.IGameInterface$OnPopulateSceneCallback) -> a
org.andengine.ui.IGameInterface$OnCreateResourcesCallback -> org.andengine.d.b:
    void onCreateResourcesFinished() -> a
org.andengine.ui.IGameInterface$OnCreateSceneCallback -> org.andengine.d.c:
    void onCreateSceneFinished(org.andengine.entity.scene.Scene) -> a
org.andengine.ui.IGameInterface$OnPopulateSceneCallback -> org.andengine.d.d:
    void onPopulateSceneFinished() -> a
org.andengine.ui.activity.BaseActivity -> org.andengine.d.a.a:
org.andengine.ui.activity.BaseGameActivity -> org.andengine.d.a.b:
    org.andengine.engine.Engine mEngine -> b
    android.os.PowerManager$WakeLock mWakeLock -> a
    org.andengine.opengl.view.RenderSurfaceView mRenderSurfaceView -> c
    boolean mGamePaused -> d
    boolean mGameCreated -> e
    boolean mCreateGameCalled -> f
    boolean mOnReloadResourcesScheduled -> g
    int[] $SWITCH_TABLE$org$andengine$engine$options$ScreenOrientation -> h
    void onCreate(android.os.Bundle) -> onCreate
    org.andengine.engine.Engine onCreateEngine(org.andengine.engine.options.EngineOptions) -> a
    void onSurfaceCreated(org.andengine.opengl.util.GLState) -> a
    void onSurfaceChanged(org.andengine.opengl.util.GLState,int,int) -> a
    void onCreateGame() -> c
    void onGameCreated() -> d
    void onResume() -> onResume
    void onResumeGame() -> e
    void onWindowFocusChanged(boolean) -> onWindowFocusChanged
    void onReloadResources() -> f
    void onPause() -> onPause
    void onPauseGame() -> g
    void onDestroy() -> onDestroy
    void onDestroyResources() -> h
    void onGameDestroyed() -> i
    boolean isGameLoaded() -> j
    org.andengine.opengl.vbo.VertexBufferObjectManager getVertexBufferObjectManager() -> k
    org.andengine.opengl.texture.TextureManager getTextureManager() -> l
    org.andengine.opengl.font.FontManager getFontManager() -> m
    org.andengine.audio.sound.SoundManager getSoundManager() -> n
    org.andengine.audio.music.MusicManager getMusicManager() -> o
    void callGameResumedOnUIThread() -> r
    void onSetContentView() -> a
    void runOnUpdateThread(java.lang.Runnable) -> a
    void acquireWakeLock() -> s
    void acquireWakeLock(org.andengine.engine.options.WakeLockOptions) -> a
    void releaseWakeLock() -> t
    void applyEngineOptions() -> u
    android.widget.FrameLayout$LayoutParams createSurfaceViewLayoutParams() -> p
    void access$0(org.andengine.ui.activity.BaseGameActivity) -> a
    int[] $SWITCH_TABLE$org$andengine$engine$options$ScreenOrientation() -> q
org.andengine.ui.activity.BaseGameActivity$1 -> org.andengine.d.a.c:
    org.andengine.ui.activity.BaseGameActivity this$0 -> a
    void onPopulateSceneFinished() -> a
org.andengine.ui.activity.BaseGameActivity$2 -> org.andengine.d.a.d:
    org.andengine.ui.activity.BaseGameActivity this$0 -> a
    org.andengine.ui.IGameInterface$OnPopulateSceneCallback val$onPopulateSceneCallback -> b
    void onCreateSceneFinished(org.andengine.entity.scene.Scene) -> a
org.andengine.ui.activity.BaseGameActivity$3 -> org.andengine.d.a.e:
    org.andengine.ui.activity.BaseGameActivity this$0 -> a
    org.andengine.ui.IGameInterface$OnCreateSceneCallback val$onCreateSceneCallback -> b
    void onCreateResourcesFinished() -> a
org.andengine.ui.activity.BaseGameActivity$4 -> org.andengine.d.a.f:
    org.andengine.ui.activity.BaseGameActivity this$0 -> a
    void run() -> run
org.andengine.util.ActivityUtils -> org.andengine.e.a:
    void requestFullscreen(android.app.Activity) -> a
    void keepScreenOn(android.app.Activity) -> b
org.andengine.util.BitmapUtils -> org.andengine.e.b:
    android.graphics.Bitmap ensureBitmapIsMutable(android.graphics.Bitmap) -> a
org.andengine.util.IDisposable -> org.andengine.e.c:
    boolean isDisposed() -> h
    void dispose() -> C
org.andengine.util.IDisposable$AlreadyDisposedException -> org.andengine.e.d:
org.andengine.util.StreamUtils -> org.andengine.e.e:
    void close(java.io.Closeable) -> a
org.andengine.util.TextUtils -> org.andengine.e.f:
    java.util.regex.Pattern SPLITPATTERN_SPACE -> a
    java.util.regex.Pattern SPLITPATTERN_SPACES -> b
    java.util.regex.Pattern SPLITPATTERN_COMMA -> c
    int countOccurrences(java.lang.CharSequence,char) -> a
    java.util.List split(java.lang.CharSequence,char,java.util.List) -> a
org.andengine.util.adt.align.HorizontalAlign -> org.andengine.e.a.a.a:
    org.andengine.util.adt.align.HorizontalAlign LEFT -> a
    org.andengine.util.adt.align.HorizontalAlign CENTER -> b
    org.andengine.util.adt.align.HorizontalAlign RIGHT -> c
    org.andengine.util.adt.align.HorizontalAlign[] ENUM$VALUES -> d
    org.andengine.util.adt.align.HorizontalAlign[] values() -> values
    org.andengine.util.adt.align.HorizontalAlign valueOf(java.lang.String) -> valueOf
org.andengine.util.adt.align.VerticalAlign -> org.andengine.e.a.a.b:
    org.andengine.util.adt.align.VerticalAlign TOP -> a
    org.andengine.util.adt.align.VerticalAlign CENTER -> b
    org.andengine.util.adt.align.VerticalAlign BOTTOM -> c
    org.andengine.util.adt.align.VerticalAlign[] ENUM$VALUES -> d
    org.andengine.util.adt.align.VerticalAlign[] values() -> values
    org.andengine.util.adt.align.VerticalAlign valueOf(java.lang.String) -> valueOf
org.andengine.util.adt.color.Color -> org.andengine.e.a.b.a:
    org.andengine.util.adt.color.Color WHITE -> a
    org.andengine.util.adt.color.Color BLACK -> b
    org.andengine.util.adt.color.Color RED -> c
    org.andengine.util.adt.color.Color YELLOW -> d
    org.andengine.util.adt.color.Color GREEN -> e
    org.andengine.util.adt.color.Color CYAN -> f
    org.andengine.util.adt.color.Color BLUE -> g
    org.andengine.util.adt.color.Color PINK -> h
    org.andengine.util.adt.color.Color TRANSPARENT -> i
    int WHITE_ABGR_PACKED_INT -> j
    int BLACK_ABGR_PACKED_INT -> k
    int RED_ABGR_PACKED_INT -> l
    int YELLOW_ABGR_PACKED_INT -> m
    int GREEN_ABGR_PACKED_INT -> n
    int CYAN_ABGR_PACKED_INT -> o
    int BLUE_ABGR_PACKED_INT -> p
    int PINK_ABGR_PACKED_INT -> q
    int TRANSPARENT_ABGR_PACKED_INT -> r
    float WHITE_ABGR_PACKED_FLOAT -> s
    float BLACK_ABGR_PACKED_FLOAT -> t
    float RED_ABGR_PACKED_FLOAT -> u
    float YELLOW_ABGR_PACKED_FLOAT -> v
    float GREEN_ABGR_PACKED_FLOAT -> w
    float CYAN_ABGR_PACKED_FLOAT -> x
    float BLUE_ABGR_PACKED_FLOAT -> y
    float PINK_ABGR_PACKED_FLOAT -> z
    float TRANSPARENT_ABGR_PACKED_FLOAT -> A
    int WHITE_ARGB_PACKED_INT -> B
    int BLACK_ARGB_PACKED_INT -> C
    int RED_ARGB_PACKED_INT -> D
    int YELLOW_ARGB_PACKED_INT -> E
    int GREEN_ARGB_PACKED_INT -> F
    int CYAN_ARGB_PACKED_INT -> G
    int BLUE_ARGB_PACKED_INT -> H
    int PINK_ARGB_PACKED_INT -> I
    int TRANSPARENT_ARGB_PACKED_INT -> J
    float mRed -> K
    float mGreen -> L
    float mBlue -> M
    float mAlpha -> N
    int mABGRPackedInt -> O
    float mABGRPackedFloat -> P
    float getRed() -> a
    float getGreen() -> b
    float getBlue() -> c
    float getAlpha() -> d
    boolean setAlphaChecking(float) -> a
    void set(float,float,float,float) -> a
    void set(org.andengine.util.adt.color.Color) -> a
    int getABGRPackedInt() -> e
    float getABGRPackedFloat() -> f
    int getARGBPackedInt() -> g
    void reset() -> h
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    boolean equals(org.andengine.util.adt.color.Color) -> b
    void packABGRAlpha() -> i
    void packABGR() -> j
org.andengine.util.adt.color.ColorUtils -> org.andengine.e.a.b.b:
    float[] HSV_TO_COLOR -> a
    int convertRGBAToARGBPackedInt(float,float,float,float) -> a
    int convertRGBAToABGRPackedInt(float,float,float,float) -> b
    float convertPackedIntToPackedFloat(int) -> a
org.andengine.util.adt.list.FloatArrayList -> org.andengine.e.a.c.a:
    float[] mItems -> a
    int mSize -> b
    float get(int) -> a
    void add(float) -> a
    void clear() -> a
    void ensureCapacity(int) -> b
org.andengine.util.adt.list.IFloatList -> org.andengine.e.a.c.b:
    float get(int) -> a
    void add(float) -> a
    void clear() -> a
org.andengine.util.adt.list.IList -> org.andengine.e.a.c.c:
    java.lang.Object get(int) -> a
    int size() -> a
org.andengine.util.adt.list.ListUtils -> org.andengine.e.a.c.d:
    java.lang.String toString(org.andengine.util.adt.list.IList) -> a
org.andengine.util.adt.list.ShiftList -> org.andengine.e.a.c.e:
    java.lang.Object[] mItems -> a
    int mHead -> b
    int mTail -> c
    java.lang.Object get(int) -> a
    java.lang.Object poll() -> b
    void enter(java.lang.Object) -> a
    int size() -> a
    java.lang.String toString() -> toString
    void shift() -> c
    void ensureShiftableRight() -> d
org.andengine.util.adt.list.SmartList -> org.andengine.e.a.c.f:
    boolean remove(java.lang.Object,org.andengine.util.call.ParameterCallable) -> a
    void clear(org.andengine.util.call.ParameterCallable) -> a
org.andengine.util.adt.map.SparseArrayUtils -> org.andengine.e.a.d.a:
    java.lang.String toString(android.util.SparseArray) -> a
org.andengine.util.adt.pool.GenericPool -> org.andengine.e.a.e.a:
    java.util.ArrayList mAvailableItems -> a
    int mGrowth -> b
    int mAvailableItemCountMaximum -> c
    int mUnrecycledItemCount -> d
    java.lang.Object onAllocatePoolItem() -> b
    void onHandleRecycleItem(java.lang.Object) -> a
    java.lang.Object onHandleAllocatePoolItem() -> c
    void onHandleObtainItem(java.lang.Object) -> b
    void batchAllocatePoolItems(int) -> a
    java.lang.Object obtainPoolItem() -> d
    void recyclePoolItem(java.lang.Object) -> c
org.andengine.util.adt.pool.Pool -> org.andengine.e.a.e.b:
    org.andengine.util.adt.pool.PoolItem onHandleAllocatePoolItem() -> a
    void onHandleObtainItem(org.andengine.util.adt.pool.PoolItem) -> a
    void onHandleRecycleItem(org.andengine.util.adt.pool.PoolItem) -> b
    void recyclePoolItem(org.andengine.util.adt.pool.PoolItem) -> c
    boolean ownsPoolItem(org.andengine.util.adt.pool.PoolItem) -> d
    java.lang.Object onHandleAllocatePoolItem() -> c
    void onHandleRecycleItem(java.lang.Object) -> a
    void onHandleObtainItem(java.lang.Object) -> b
    void recyclePoolItem(java.lang.Object) -> c
org.andengine.util.adt.pool.PoolItem -> org.andengine.e.a.e.c:
    org.andengine.util.adt.pool.Pool mParent -> b
    boolean mRecycled -> c
    boolean isRecycled() -> b
    boolean isFromPool(org.andengine.util.adt.pool.Pool) -> a
    void onRecycle() -> a
    void onObtain() -> c
org.andengine.util.adt.pool.PoolUpdateHandler -> org.andengine.e.a.e.d:
    org.andengine.util.adt.pool.Pool mPool -> a
    org.andengine.util.adt.queue.IQueue mScheduledPoolItemQueue -> b
    org.andengine.util.adt.pool.PoolItem onAllocatePoolItem() -> c
    void onHandlePoolItem(org.andengine.util.adt.pool.PoolItem) -> a
    void onUpdate(float) -> a
    void reset() -> l
    org.andengine.util.adt.pool.PoolItem obtainPoolItem() -> d
    void postPoolItem(org.andengine.util.adt.pool.PoolItem) -> b
org.andengine.util.adt.pool.PoolUpdateHandler$1 -> org.andengine.e.a.e.e:
    org.andengine.util.adt.pool.PoolUpdateHandler this$0 -> a
    org.andengine.util.adt.pool.PoolItem onAllocatePoolItem() -> e
    java.lang.Object onAllocatePoolItem() -> b
org.andengine.util.adt.pool.RunnablePoolItem -> org.andengine.e.a.e.f:
org.andengine.util.adt.pool.RunnablePoolUpdateHandler -> org.andengine.e.a.e.g:
    org.andengine.util.adt.pool.RunnablePoolItem onAllocatePoolItem() -> b
    void onHandlePoolItem(org.andengine.util.adt.pool.RunnablePoolItem) -> a
    void onHandlePoolItem(org.andengine.util.adt.pool.PoolItem) -> a
    org.andengine.util.adt.pool.PoolItem onAllocatePoolItem() -> c
org.andengine.util.adt.queue.IQueue -> org.andengine.e.a.f.a:
    java.lang.Object poll() -> b
    void enter(java.lang.Object) -> a
org.andengine.util.adt.queue.concurrent.SynchronizedQueue -> org.andengine.e.a.f.a.a:
    org.andengine.util.adt.queue.IQueue mQueue -> a
    java.lang.Object get(int) -> a
    java.lang.Object poll() -> b
    void enter(java.lang.Object) -> a
    int size() -> a
    java.lang.String toString() -> toString
org.andengine.util.adt.transformation.Transformation -> org.andengine.e.a.g.a:
    float a -> a
    float b -> b
    float c -> c
    float d -> d
    float tx -> e
    float ty -> f
    java.lang.String toString() -> toString
    void setToIdentity() -> a
    void setTo(org.andengine.util.adt.transformation.Transformation) -> a
    void postTranslate(float,float) -> a
    void postRotate(float) -> a
    void postScale(float,float) -> b
    void postSkew(float,float) -> c
    void postConcat(org.andengine.util.adt.transformation.Transformation) -> b
    void postConcat(float,float,float,float,float,float) -> a
    void preConcat(org.andengine.util.adt.transformation.Transformation) -> c
    void preConcat(float,float,float,float,float,float) -> b
    void transform(float[]) -> a
org.andengine.util.algorithm.collision.BaseCollisionChecker -> org.andengine.e.b.a.a:
    int relativeCCW(float,float,float,float,float,float) -> a
    boolean checkCollision(float[],int,float[],int) -> a
    boolean checkCollision(float[],int,int,int,int,float[],int,int,int,int) -> a
    boolean checkCollisionSub(float[],int,int,int,int,int,float[],int,int,int,int) -> a
    boolean checkContains(float[],int,float,float) -> a
    boolean checkContains(float[],int,int,int,int,float,float) -> a
org.andengine.util.algorithm.collision.EntityCollisionChecker -> org.andengine.e.b.a.b:
    float[] VERTICES_CONTAINS_TMP -> a
    float[] VERTICES_COLLISION_TMP_A -> b
    float[] VERTICES_COLLISION_TMP_B -> c
    boolean checkContains(org.andengine.entity.IEntity,float,float) -> a
    boolean isVisible(org.andengine.engine.camera.Camera,org.andengine.entity.IEntity) -> a
    void fillVertices(org.andengine.entity.IEntity,float[]) -> a
    void fillVertices(float,float,float,float,org.andengine.util.adt.transformation.Transformation,float[]) -> a
    void fillVertices(org.andengine.engine.camera.Camera,float[]) -> a
org.andengine.util.algorithm.collision.LineCollisionChecker -> org.andengine.e.b.a.c:
    boolean checkLineCollision(float,float,float,float,float,float,float,float) -> a
org.andengine.util.algorithm.sort.InsertionSorter -> org.andengine.e.b.b.a:
    void sort(java.util.List,int,int,java.util.Comparator) -> a
org.andengine.util.algorithm.sort.Sorter -> org.andengine.e.b.b.b:
    void sort(java.util.List,int,int,java.util.Comparator) -> a
    void sort(java.util.List,java.util.Comparator) -> a
org.andengine.util.call.Callback -> org.andengine.e.c.a:
    void onCallback(java.lang.Object) -> a
org.andengine.util.call.ParameterCallable -> org.andengine.e.c.b:
    void call(java.lang.Object) -> a
org.andengine.util.debug.Debug -> org.andengine.e.d.a:
    java.lang.String sTag -> a
    java.lang.String sDebugUser -> b
    org.andengine.util.debug.Debug$DebugLevel sDebugLevel -> c
    void v(java.lang.String) -> a
    void v(java.lang.String,java.lang.String,java.lang.Throwable) -> a
    void d(java.lang.String) -> b
    void d(java.lang.String,java.lang.Throwable) -> a
    void d(java.lang.String,java.lang.String,java.lang.Throwable) -> b
    void w(java.lang.String) -> c
    void w(java.lang.String,java.lang.String,java.lang.Throwable) -> c
    void e(java.lang.String) -> d
    void e(java.lang.Throwable) -> a
    void e(java.lang.String,java.lang.Throwable) -> b
    void e(java.lang.String,java.lang.String,java.lang.Throwable) -> d
org.andengine.util.debug.Debug$DebugLevel -> org.andengine.e.d.b:
    org.andengine.util.debug.Debug$DebugLevel NONE -> a
    org.andengine.util.debug.Debug$DebugLevel ERROR -> b
    org.andengine.util.debug.Debug$DebugLevel WARNING -> c
    org.andengine.util.debug.Debug$DebugLevel INFO -> d
    org.andengine.util.debug.Debug$DebugLevel DEBUG -> e
    org.andengine.util.debug.Debug$DebugLevel VERBOSE -> f
    org.andengine.util.debug.Debug$DebugLevel ALL -> g
    org.andengine.util.debug.Debug$DebugLevel[] ENUM$VALUES -> h
    boolean isSameOrLessThan(org.andengine.util.debug.Debug$DebugLevel) -> a
    org.andengine.util.debug.Debug$DebugLevel[] values() -> values
    org.andengine.util.debug.Debug$DebugLevel valueOf(java.lang.String) -> valueOf
org.andengine.util.exception.AndEngineException -> org.andengine.e.e.a:
org.andengine.util.exception.AndEngineRuntimeException -> org.andengine.e.e.b:
org.andengine.util.exception.MethodNotSupportedException -> org.andengine.e.e.c:
org.andengine.util.exception.NullBitmapException -> org.andengine.e.e.d:
org.andengine.util.math.MathUtils -> org.andengine.e.f.a:
    java.util.Random RANDOM -> a
    float degToRad(float) -> a
    boolean isPowerOfTwo(int) -> a
    float[] rotateAroundCenter(float[],float,float,float) -> a
    float[] revertRotateAroundCenter(float[],float,float,float) -> b
org.andengine.util.modifier.IModifier -> org.andengine.e.g.a:
    java.util.Comparator MODIFIER_COMPARATOR_DURATION_DESCENDING -> a
    void reset() -> a
    boolean isFinished() -> b
    boolean isAutoUnregisterWhenFinished() -> c
    float getDuration() -> d
    float onUpdate(float,java.lang.Object) -> a
org.andengine.util.modifier.IModifier$1 -> org.andengine.e.g.b:
    int compare(org.andengine.util.modifier.IModifier,org.andengine.util.modifier.IModifier) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
org.andengine.util.modifier.ModifierList -> org.andengine.e.g.c:
    java.lang.Object mTarget -> a
    boolean add(org.andengine.util.modifier.IModifier) -> a
    void onUpdate(float) -> a
    void reset() -> l
    boolean add(java.lang.Object) -> add
org.andengine.util.system.SystemUtils -> org.andengine.e.h.a:
    boolean SDK_VERSION_ECLAIR_OR_LATER -> a
    boolean SDK_VERSION_FROYO_OR_LATER -> b
    boolean SDK_VERSION_GINGERBREAD_OR_LATER -> c
    boolean SDK_VERSION_HONEYCOMB_OR_LATER -> d
    boolean SDK_VERSION_ICE_CREAM_SANDWICH_OR_LATER -> e
    boolean isAndroidVersionOrLower(int) -> a
    boolean isAndroidVersionOrHigher(int) -> b
    boolean isAndroidVersion(int,int) -> a
